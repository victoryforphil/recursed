searchState.loadedDescShard("rerun", 4, "Binary flags listing features that may or may not be …\nAfter Device::drop\nD.component\nD.alpha\nDirect3D-12 (Windows)\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nIntegral type used for dynamic bind group offsets.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nDummy backend, used for testing.\nFunction passes if new value is equal to existing value. …\nError type\nAn error message.\nFilter for error scopes.\nLower level source of the error.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nIf not present, the texture can’t be sampled with a …\nAllows textures with formats “r32float”, “rg32float…\nBinding is visible from the fragment shader of a render …\nAmount of times the fragment shader is ran. Accounts for …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment processing in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable GPU-based validation. Implies <code>Self::VALIDATION</code>. …\nEnable green channel writes\nOpenGL 3.3+ (Windows), OpenGL ES 3.0+ (Linux, Android, …\nSelects which OpenGL ES 3 minor version to request.\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\n<code>wgpu-hal</code>’s internal counters.\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nIgnore the stencil state for the face.\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nSupports indirect drawing and dispatching.\nAllows non-zero value for the <code>first_instance</code> member in …\nA timestamp that is invalid due to the platform not having …\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to a texture, …\nView of a texture which can be used to copy to a texture, …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nAn informational message.\nThe alpha channel, if it exists, of the textures is …\nContext for all other wgpu objects. Instance of wgpu.\nVertex data is advanced every instance.\nOptions for creating an instance.\nInstance debugging flags.\nIntegrated GPU with shared CPU/GPU memory.\nCatch only internal errors.\nInternal error. Used for signalling any failures not …\nAll internal counters, exposed for debugging purposes.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nObject debugging label.\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe swap chain has been lost and needs to be recreated.\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSize to align mappings.\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nSupported on macOS/iOS\nSupports sample-rate shading.\nAllows a texture of this format to back a view passed as …\nAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nPresentation frames are kept in a single-frame queue. …\nPassed to <code>Device::poll</code> to control how and if it should …\nPassed to <code>Device::poll</code> to control how and if it should …\nResult of a maintain operation.\nApplications that have control over the content that is …\nType of buffer mapping.\nmax(Src, Dst)\nHints to the device about the memory allocation strategy.\nFavor memory usage over performance.\nMetal API (Apple platforms)\nmin(Src, Dst)\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nPower usage is not considered when choosing an adapter.\nNo value.\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nQuery returns a single 64-bit number, serving as an …\nMore information coming soon …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nCatch only out-of-memory errors.\nOut of memory error\nThere is no more memory left to allocate a new frame.\nThe underlying surface has changed, and therefore the swap …\nThe surface under the swap chain has changed.\nAllows the user to create bind groups containing arrays …\nAllows the use of pipeline cache objects\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nBlend mode that does standard alpha blending with …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nAlignment all push constants need\nFavor performance over memory usage (the default value).\nHandle to a pipeline cache, which is used to accelerate …\nDescribes a pipeline cache, which allows reusing …\nAdvanced options for use when a pipeline is compiled\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nBehavior of the presentation engine based on frame rate.\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a query set\nSize of a single piece of query data.\nHandle to a query set.\nDescribes a <code>QuerySet</code>.\nType of query contained in a QuerySet.\nHandle to a command queue on a device.\nA write-only view into a staging buffer.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nAllows for usage of textures of format …\nRaw window &amp; display handle.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nPre-prepared reusable bundle of GPU operations.\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nEncodes a series of GPU operations into a reusable “…\nDescribes a <code>RenderBundleEncoder</code>.\nIn-progress recording of a render pass: a list of render …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nDescribes the timestamp writes of a render pass.\nHandle to a rendering (graphics) pipeline.\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nAfter replacing the device_lost_callback\nAdditional information required when requesting an adapter.\nOptions for requesting adapter.\nRequesting a device from an <code>Adapter</code> failed.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nAllows shaders to use i64 and u64.\nAllows shaders to use all i64 and u64 atomic operations.\nAllows shaders to use i64 and u64 atomic min and max.\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nEnables creating shader modules from SPIR-V binary data …\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nWhen used as a STORAGE texture, then a texture with this …\nAllows the user to create uniform arrays of storage …\nAllows compute and fragment shaders to use the subgroup …\nAllows shaders to use the subgroup barrier\nAllows vertex shaders to use the subgroup operation …\nSupports specifying which view formats are allowed when …\nHandle to a sampler.\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nDescriptor for a shader module given by SPIR-V binary, for …\nSource of a shader module.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nSome value of type <code>T</code>.\nA human-readable representation for a span, tailored for …\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nIdentifier for a particular call to <code>Queue::submit</code>. Can be …\nThere are no active submissions in flight as of the …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nHandle to a presentable surface.\nDefines the capabilities of a given surface and adapter.\nDescribes a <code>Surface</code>.\nResult of an unsuccessful call to …\nStatus of the received surface image.\nThe window/canvas/surface/swap-chain/etc. a surface is …\nThe window/canvas/surface/swap-chain/etc. a surface is …\nSurface texture that can be rendered to. Result of a …\nEnables device specific texture format features.\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nAllows the 3d dimension for textures with BC compressed …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries directly on command encoders.\nAllows for timestamp queries directly on command encoders.\nHandle to a texture on the GPU.\nA texture binding.\nKind of data the texture holds.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nHandle to a texture view.\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nA timeout was encountered while trying to acquire the next …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\n[0, 0, 0, 0]\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nAllows shaders to index uniform buffer and storage texture …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nType for the callback of uncaptured error handler\nA buffer for uniform values.\nTriggered by driver\n8 bit integer RGBA, [0, 255] converted to/from …\nThree unsigned 10-bit integers and one 2-bit integer, …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\nEnable validation, if possible.\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nIf this is true, use of <code>@builtin(vertex_index)</code> and …\nEnables using 64-bit types for vertex attributes.\nBinding is visible from the vertex and fragment shaders of …\nAmount of times the vertex shader is ran. Accounts for the …\nSupports storage buffers in vertex shaders.\nVertex buffer strides have to be aligned to this number.\nEnables bindings of writable storage buffers and textures …\nSupports specifying which view format values are allowed …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nAllows using the VK_GOOGLE_display_timing Vulkan extension.\nCatch only validation errors.\nValidation error, signifying a bug in code or data\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nDescribes the vertex processing in a render pipeline.\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API (Windows, Linux, Android, MacOS via …\nSupports all the texture usages described in WebGPU. If …\nSame as WaitForSubmissionIndex but waits for the most …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nOn wgpu-core based backends, block until the given …\nA warning message.\nWGSL module as a string slice.\nWindow handle producer.\nSuper trait for window handles as used in <code>SurfaceTarget</code>.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\nZero origin.\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nAlpha component of the color\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nEnable advanced debugging and validation flags …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nReturn the binding view of the entire buffer.\nReturn the binding view of the entire buffer.\nReturns the inner hal Surface using a callback. The hal …\nApply a callback to this <code>Adapter</code>’s underlying backend …\nReturns the inner hal Buffer using a callback. The hal …\nApply a callback to this <code>Device</code>’s underlying backend …\nReturn a reference to a specific backend instance, if …\nReturns the inner hal Texture using a callback. The hal …\nReturns the inner hal TextureView using a callback. The …\nReturns the inner hal CommandEncoder using a callback. The …\nMake an <code>ImageCopyTexture</code> representing the whole texture.\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nThe list of attributes which comprise a single vertex.\nBlue component of the color\nBack face mode.\nBackend used for device\nWhich <code>Backends</code> to enable.\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nBegins recording of a compute pass.\nStart a occlusion query on this render pass. It can be …\nStart a pipeline statistics query on this compute pass. It …\nStart a pipeline statistics query on this render pass. It …\nBegins recording of a render pass.\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nDepth bias state.\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nAmount of allocated gpu memory attributed to buffers, in …\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nThe pipeline cache to use when creating this pipeline.\nThe pipeline cache to use when creating this pipeline.\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nDepth bias clamp value (absolute).\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nThe color space of this texture.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nSurface that is required to be presentable with the …\nSurface that is required to be presentable with the …\nGet the texture dimension required of this texture view …\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nAdvanced options for when this pipeline is compiled\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nInitializes <code>Surface</code> for presentation.\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nSpecifies the values of pipeline-overridable constants in …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\n<code>wgpu-core</code> counters.\nTotal count of queries the set contains. Must not be zero. …\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nConverts a wgpu-hal <code>ExposedAdapter</code> to a wgpu <code>Adapter</code>.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> from a wgpu-hal Buffer.\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreate a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal <code>OpenDevice</code>\nCreate a <code>PipelineCache</code> with initial data\nCreates a <code>PipelineLayout</code>.\nCreates a new <code>QuerySet</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a shader module from either SPIR-V or WGSL source …\nCreates a shader module from SPIR-V binary directly.\nCreates a shader module from either SPIR-V or WGSL source …\nCreates a new surface targeting a given …\nCreates a new surface targeting a given …\nCreates a new <code>Texture</code>.\nCreates a <code>Texture</code> from a wgpu-hal Texture.\nCreates a view of this texture.\nThe face culling mode.\nThe data used to initialise the cache initialise\nEnable recommended debugging and validation flags.\nCreates a new instance of wgpu with default options.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nReturns the depth or layer count of this <code>Texture</code>.\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nInformation about the depth attachment that this render …\nThe effect of draw calls on the depth and stencil aspects …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\nDestroy the associated native resources as soon as …\nDestroy this device.\nDestroy the associated native resources as soon as …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the dimension of this <code>Texture</code>.\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDraws primitives from the active vertex buffer(s).\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nDraws primitives from the active vertex buffer(s) based on …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nWhich DX12 shader compiler to use.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nReturns which backends can be picked for the current build …\nEnd the occlusion query on this render pass. It can be …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nEnd the pipeline statistics query on this compute pass. It …\nEnd the pipeline statistics query on this render pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nThe name of the entry point in the compiled shader to use.\nRetrieves all available <code>Adapter</code>s that match the given …\nExecute a render bundle, which is a set of pre-recorded …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is performed when stencil test fails.\nWhether to create a cache without data when the provided …\nThe features which can be used to create devices on this …\nThe features which can be used on this device.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nFinishes recording and returns a <code>RenderBundle</code> that can be …\nCombined boolean flags.\nAdditional property flags for the format.\nFlags to tune the behavior of the instance.\nIndicates that only a fallback adapter can be returned. …\nIndicates that only a fallback adapter can be returned. …\nDrops the lifetime relationship to the parent command …\nDrops the lifetime relationship to the parent command …\nReturns the format of this <code>Texture</code>.\nThe texture format of the swap chain. The only formats …\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the texture view. Either must be the same as the …\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nCreate an new instance of wgpu from a wgpu-core instance.\nCreate an new instance of wgpu from a wgpu-hal instance.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\nGenerate an GPU memory allocation report if the underlying …\nGenerates memory report.\nGet an object representing the bind group layout at a …\nGet an object representing the bind group layout at a …\nReturns the capabilities of the surface when used with the …\nGet the compilation info for the shader module.\nReturns the next texture to be presented by the swapchain …\nGet the data associated with this pipeline cache. The data …\nReturn a default <code>SurfaceConfiguration</code> from width and …\nGet info about the adapter itself.\nGet info about the adapter itself.\nQuery internal counters from the native backend for …\nGain read-only access to the bytes of a mapped <code>Buffer</code>.\nGain write access to the bytes of a mapped <code>Buffer</code>.\nGenerates a timestamp using the clock used by the …\nReturns the features supported for a given texture format …\nGets the amount of nanoseconds each tick of a timestamp …\nWhich OpenGL ES 3 minor version to request. Will be …\nReturns the format features guaranteed by the WebGPU spec.\n<code>wgpu-hal</code> counters.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nReturns the height of this <code>Texture</code>.\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nMacro to load raw SPIR-V data statically, for use with …\nLoad WGSL source code from a file at compile time.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nInserts debug marker.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> for BCn compressed formats.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns true if this timestamp is the invalid timestamp.\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the result is <code>Self::SubmissionQueueEmpty</code>`.\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nReturns whether this adapter may present to the passed …\nThis maintain represents a wait of some kind.\nReturns true if the underlying platform offers complete …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label for the device.\nDebug label for the query set.\nDebug label of the render bundle encoder. This will show …\nDebug label of the texture. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the bind group layout. This will show up in …\nDebug label of the pipeline cache. This might show up in …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the render bundle encoder. This will show …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the shader module. This will show up in …\nDebug label of the shader module. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of this command buffer.\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nLength in code units (in bytes) of the span.\nThe best limits which can be used to create devices on …\nThe limits which can be used on this device.\nAdditional limits\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nHow data should be read through this attachment.\nWhere in the source code the message points at.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nMap the buffer. Buffer is ready to map once the callback …\nMap on the wait index type.\nTakes a closure and maps the label of the command buffer …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nThe maximum number of bytes necessary to hold one sample …\nThe maximum allowed number of color attachments.\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximal number of invocations in a subgroup. Lower is “…\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nNumber of gpu memory allocations.\nHints for memory allocation strategies.\nThe text of the message.\nThe type of the message.\nThe messages from the shader compilation process.\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nMinimal number of invocations in a subgroup. Higher is “…\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nReturns the mip_level_count of this <code>Texture</code>.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nThe multi-sampling properties of the pipeline.\nIf this render bundle will rendering to multiple array …\nIf the pipeline will be used with a multiview render pass, …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreate an new instance of wgpu.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\n0-based Offset in code units (in bytes) of the start of …\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nRegisters a callback when the previous call to submit …\nSet a callback for errors that are not handled in error …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nPanics if the MaintainResult is not Ok.\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nCheck for resource cleanups and mapping callbacks. Will …\nPolls all devices.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nPop an error scope.\nPower preference for the adapter.\nPower preference for the adapter.\nThe premultiplication of this texture\nThe premultiplication of this texture\nSchedule this texture to be presented on the owning …\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nThe properties of the pipeline at the primitive assembly …\nSet of push constant ranges this pipeline uses. Each …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nPush an error scope.\nThe query set to write to.\nThe query set to write to.\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nRetrieves an <code>Adapter</code> which matches the given …\nRequests a connection to a physical device, creating a …\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nReturns the sample_count of this <code>Texture</code>.\nSample count of texture. If this is not 1, texture must …\nSample count this render bundle is capable of rendering …\nSample count supported by a given texture format.\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet a DeviceLostCallback on this device.\nSets the active index buffer.\nSets the active index buffer.\nSets the active compute pipeline.\nSets the active render pipeline.\nSets the active render pipeline.\nSet push constant data for subsequent dispatch calls.\nSet push constant data.\nSet push constant data for subsequent draw calls.\nSets the scissor rectangle used during the rasterization …\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nAssign a vertex buffer to a slot.\nSets the viewport used during the rasterization stage to …\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the length of the buffer allocation in bytes.\nReturns the byte size of the format.\nReturns the size of this <code>Texture</code>.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nReturn a slice of a <code>Buffer</code>’s bytes.\nSlope depth biasing factor.\nSource code for the shader.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStarts frame capture.\nStencil state.\nWhat operations will be performed on the stencil part of …\nIf the stencil aspect of the depth stencil attachment is …\nHow often this vertex buffer is “stepped” forward.\nStops frame capture.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmits a series of finished command buffers for execution.\n<code>true</code> if the acquired buffer can still be used for …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSee …\nThe number of bytes occupied per pixel in a color …\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAccessible view of the frame.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAmount of allocated gpu memory attributed to textures, in …\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nKind of query that this query set should contain.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlushes any pending write operations and unmaps the buffer …\nReturns the allowed usages for this <code>Buffer</code>.\nReturns the allowed usages of this <code>Texture</code>.\nUsages of a buffer. If the buffer is used in any way that …\nThe usage of the swap chain. The only supported usage is …\nAllowed usages of the texture. If used in other ways, the …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\nUtility structures and functions that are built on top of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nMacro to produce an array of <code>VertexAttribute</code>.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nConstruct a wait variant\nConstruct a WaitForSubmissionIndex variant\nReturns the width of this <code>Texture</code>.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nReturns this set of flags, affected by environment …\nSchedule a data write into <code>buffer</code> starting at <code>offset</code>.\nWrite to a buffer via a directly mapped staging buffer.\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nSchedule a write of some data into a texture.\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nWhether workgroup scoped memory will be initialized with …\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nDescription of the validation error.\nDescription of the internal GPU error.\nLower level source of the error.\nLower level source of the error.\nLower level source of the error.\nDefines the range of allowed memory block sizes for …\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nNo value.\nSome value of type <code>T</code>.\nThe index of a queue submission.\nAllocating resource ids, and tracking the resources they …\nPresentation.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nBind group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a pipeline layout.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nDescribes a pipeline layout.\nBind groups that this pipeline uses. The first entry will …\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nSlot for which binding provides resource. Corresponds to …\nThe resources to bind to this bind group.\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group.\nDebug label of the bind group.\nDebug label of the bind group layout.\nDebug label of the pipeline layout.\nDebug label of the pipeline layout.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nSet of push constant ranges this pipeline uses. Each …\nSet of push constant ranges this pipeline uses. Each …\nResource to attach to the binding\nResource to attach to the binding\nDescribes a depth/stencil attachment to a render pass.\nDescribes an attachment location in words.\nClear the output attachment with the clear color. Clearing …\nError encountered while attempting a clear.\nA buffer of commands to be submitted to the GPU for …\nThe mutable state of a <code>CommandBuffer</code>.\nError encountered when performing a compute pass.\nError encountered when performing a compute pass.\nError encountered while attempting to do a copy on a …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDiscards the content of the render target.\nError validating a draw call.\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDo not clear output attachment.\nOperation to perform to the output attachment at the start …\nDescribes an individual channel within a render pass, such …\nDescribes the writing of timestamp values in a render or …\nError encountered when dealing with queries\nError encountered while trying to use queries\nDescribes a <code>RenderBundleEncoder</code>.\nError encountered when finishing recording a render bundle.\nError encountered when encoding a render command. This is …\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nError encountered when performing a render pass.\nError encountered when performing a render pass.\nError encountered while trying to resolve a query.\nSet a range of push constants to values stored in …\nStore the result of the renderpass.\nOperation to perform to the output attachment at the end …\nError encountered while attempting a data transfer.\nThe copy aspect.\nThe copy aspect.\nThe index of the query set at which a start timestamp of …\nThe buffer to be copied to/from.\nWhat operations will be performed on this color attachment.\nIf load_op is <code>LoadOp::Clear</code>, the attachment will be …\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nWhat operations will be performed on the depth part of the …\nWhat operations will be performed on the depth part of the …\nInformation about the depth attachment that this render …\nThe depth and stencil attachment of the render pass, if …\nThe index of the query set at which an end timestamp of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the render bundle encoder. This will show …\nDebug label of the render bundle encoder.\nThe layout of the texture data in this buffer.\nOperation to perform to the output attachment at the start …\nThe target mip level of the texture.\nThe target mip level of the texture.\nIf this render bundle will rendering to multiple array …\nDefines where the occlusion query results will be stored …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe premultiplication of this texture\nThe query set to write the timestamps to.\nIf true, the relevant channel is not changed by a …\nThe view that will receive the resolved output if …\nSample count this render bundle is capable of rendering to.\nWhat operations will be performed on the stencil part of …\nWhat operations will be performed on the stencil part of …\nOperation to perform to the output attachment at the end …\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe view to use as an attachment.\nThe byte offset within the push constant storage to write …\nThe number of bytes to write. This must be a multiple of …\nIndex in <code>push_constant_data</code> of the start of the data to be …\nSafety\nSafety\nSafety\nSafety\nStructure describing a logical device. Some members are …\nReturns the backend this device is using.\nSafety\nCreate a validator with the given validation flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nOnly use this function in contexts where there is no <code>Device</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label for the device.\nHints for memory allocation strategies.\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nA texture or buffer to be freed soon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStructure describing a logical device. Some members are …\nDon’t use this error type with thiserror’s #[…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nSafety\nSafety\nCreates a compute pass.\nCreates a render pass.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nSafety\nCreate a shader module with the given <code>source</code>.\nSafety\nSafety\nCheck <code>device_id</code> for freeable resources and completed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nCreates a new surface targeting the given display/window …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll all devices on all backends.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nSafety\nSafety\nAll the resources tracked by a <code>crate::global::Global</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn identifier for a wgpu object.\nMarker trait used to determine which types uniquely …\nThe raw underlying representation of an identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoerce the identifiers into its raw underlying …\nMarker types for each resource.\nUnzip a raw identifier into its components.\nZip together an identifier and return its raw underlying …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError when requesting a device from the adaptor\nSafety\nReturns the backend this adapter is using.\nSurface that is required to be presentable with the …\nCreates a new surface targeting the given display/window …\nIndicates that only a fallback adapter can be returned. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nList of instances per backend.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a set of backends from a comma separated list of …\nPower preference for the adapter.\nWidth of abstract types, in bytes.\nAbstract floating-point type.\nWGSL abstract integer type.\nOpaque object representing an acceleration structure of …\nArray access with a computed index.\nAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known …\nAddressing space of variables.\nAn arena holding some kind of component (e.g., type, …\nHomogeneous list of elements.\nGet the length of an array. The expression must resolve to …\nSize of an array.\nCast a simple type to another kind.\nAtomic scalar.\nAtomic function.\nFunction on an atomic value.\nResult of an atomic operation.\nWidth of a boolean type, in bytes.\nMemory barrier flags.\nSynchronize invocations within the work group. The <code>Barrier</code> …\n2D vector\nApply a binary operator.\nOperation that can be applied on two values.\nDescribes how an input/output variable is to be bound.\nArray of bindings.\nA code block is a vector of statements, with maybe a …\nA block containing more statements, to be executed …\nBoolean type.\nExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.\nAll gather from the same lane at the index given by the …\nAll gather from the active lane with the smallest index\nBuilt-in inputs and outputs.\nBuilt-in shader variable.\nNumber of bytes per scalar.\nCalls a function.\nResult of calling another function.\nInterpolate the value at the center of the pixel.\nInterpolate the value at a point that lies within all …\nComposite expression.\nEnables adjusting depth without disabling early Z.\nConstant value.\nThe array size is constant.\nConstant value.\nSkips to the <code>continuing</code> block of the innermost enclosing …\nCube map\n1D image\n2D image\n3D image\nDepth comparison image.\nCompute the derivative on an axis.\nAxis on which to compute a derivative.\nHint at which precision to compute a derivative.\nThe array size can change at runtime.\nEarly fragment tests.\nUse the value provided by the first or last vertex of the …\nEmit a range of expressions, visible to all statements …\nThe main function for a pipeline stage.\nAn expression that can be evaluated to obtain a value.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nHash map that is faster but not resilient to DoS attacks.\nHash set that is faster but not resilient to DoS attacks.\nInsertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but …\nInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but …\nUse the value provided by the first vertex of the current …\nIndicates that no interpolation will be performed.\nFloating point type.\nA function defined in the module.\nFunction locals.\nA function argument.\nReference a function parameter, by its index.\nA function result.\nThe specific behavior of a <code>SubgroupGather</code> statement.\nVariable defined at module level.\nReference a global variable.\nShader may rewrite depth only with a value greater than …\nA strongly typed reference to an arena item.\nOpaque handles, such as samplers and images.\nConditionally executes one of two blocks, based on the …\nPossibly multidimensional array of texels.\nSub-class of the image type.\nThe number of dimensions an image has.\nLoad a texel from an image.\nType of an image query.\nQuery information from an image.\nSample a point from a sampled or a depth image.\nStores a texel value to an image.\nInitialize the <code>RayQuery</code> object.\nThe interpolation qualifier of a binding or struct field.\nAborts the current shader execution.\nStorage can be used as a source for load ops.\nShader may rewrite depth smaller than one that would have …\nIndicates that linear, non-perspective, correct …\nLiteral.\nLoad a value indirectly.\nVariable defined at function level.\nReference a local variable.\nIndexed location.\nExecutes a block repeatedly.\nCall a math function\nBuilt-in shader function for math.\nMatrix of numbers.\nShader module.\nEquivalent of the WGSL’s <code>%</code> operator or SPIR-V’s <code>OpFRem</code>\nGet the number of array layers, a <code>u32</code>.\nGet the number of mipmap levels, a <code>u32</code>.\nGet the number of samples, a <code>u32</code>.\nPipeline-overridable constant.\nPipeline-overridable constant.\nThe value will be interpolated in a perspective-correct …\nPointer to another type.\nReturn types predeclared for the frexp, modf, and …\nPrivate data, per invocation, mutable.\nStart or continue the query given by the statement’s …\nPush constants.\n4D vector\nA strongly typed range of handles.\nLocally used handle for ray queries.\nAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>…\nReturn an intersection found by <code>query</code>.\nResult of a <code>Proceed</code> <code>RayQuery</code> statement.\nCall a relational function.\nBuilt-in shader function for testing relation between …\nPipeline binding information for global resources.\nReturns from the function (possibly with a value).\nBarrier affects all <code>AddressSpace::Storage</code> accesses.\nStorage can be used as a target for store ops.\nBarrier synchronizes execution across all invocations …\nInterpolate the value at each sample location. In …\nSampling modifier to control the level of detail.\nRegular sampled image.\nCan be used to sample values from images.\nThe sampling qualifiers of a binding or struct field.\nCharacteristics of a scalar type.\nNumber of integral or floating-point kind.\nPrimitive type for a scalar.\nSelect between two values based on a condition.\nStage of the programmable pipeline.\nRight shift carries the sign of signed integers only.\nEach gathers from a different lane at the index given by …\nEach gathers from their lane plus the shift given by the …\nEach gathers from their lane minus the shift given by the …\nEach gathers from their lane xored with the given by the …\nSigned integer type.\nGet the size at the specified level.\nA human-readable representation for a span, tailored for …\nA source code span, used for error reporting.\nA source code span together with “context”, a …\nSet of special types that can be optionally generated by …\nSplat scalar into a vector.\nInstructions which make up an executable block.\nStorage buffer data, potentially mutable.\nStorage image.\nFlags describing an image.\nImage storage format.\nStores a value at an address.\nUser-defined structure.\nMember of a user-defined structure.\nCalculate a bitmask using a boolean from each active …\nResult of a <code>SubgroupBallot</code> statement.\nCompute a collective operation across all active threads …\nGather a value from another active thread in the subgroup\nResult of a <code>SubgroupCollectiveOperation</code> or <code>SubgroupGather</code> …\nConditionally executes one of multiple blocks, based on …\nA case for a switch statement.\nThe value of the switch case.\nVector swizzle.\nComponent selection for a vector swizzle.\n3D vector\nA data type declared in the module.\nEnum with additional information, depending on the kind of …\nUnsigned integer type.\nApply an unary operator.\nOperation that can be applied on a single value.\nShader may not rewrite depth value.\nUniform buffer data.\nAn arena whose elements are guaranteed to be unique.\nPointer to a scalar or vector.\nVector of numbers.\nNumber of components in a vector.\nBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.\nWrapper class for <code>Error</code>, augmenting it with a list of …\nWorkgroup shared data, mutable.\nLoad uniformly from a uniform pointer in the workgroup …\nResult of a <code>WorkGroupUniformLoad</code> statement.\nZero value of a type.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConvert inner error into another type. Joins span …\nAdds a new value to the arena, returning a typed handle.\nApply the usual default interpolation for <code>ty</code> to <code>binding</code>.\nInformation about function argument.\nFind the common type of <code>self</code> and <code>other</code> under WGSL’s …\nReturn <code>true</code> if automatic conversions will covert <code>self</code> to …\nBackend functions that export shader <code>Module</code>s into binary …\nReturns the ref count, upon reaching which this expression …\nFor I/O structs, defines the binding.\nBinding number within the group.\nFor resources, defines the binding point.\nFor entry points, an argument has to have a binding unless …\nFor entry points, the result has to have a binding unless …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBody of the case.\nBlock of instructions comprising the body of the function.\nReturn the canonical form of <code>self</code>, or <code>None</code> if it’s …\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>range</code> is valid for this arena.\nClears the arena, keeping all allocations.\nClears the arena keeping all allocations\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nArena for the constants defined in this module.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nDrains the arena, returning an iterator over the items …\nEarly depth test for fragment stages.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEntry points.\nCompare <code>self</code> and <code>rhs</code> as types.\nExpressions used inside this function.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nIf true, the control flow continues to the next case in …\nFetch a handle to an existing type.\nAdds a value with a custom check for uniqueness: returns a …\nAdds a value with a check for uniqueness, where the check …\nreturn the first and last handles included in <code>self</code>.\nConstruct a float <code>Scalar</code> with the given width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConstruct a <code>Range</code> that covers the indices in <code>inner</code>.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nFrontend parsers that consume binary and text shaders and …\nThe entrance function.\nArena for the functions defined in this module.\nPopulate this module’s <code>SpecialTypes::predeclared_types</code> …\nPopulate this module’s <code>SpecialTypes::ray_desc</code> type.\nPopulate this module’s <code>SpecialTypes::ray_intersection</code> …\nReturn this arena’s handle for <code>value</code>, if present.\nReturn this arena’s value at <code>handle</code>, if that is a valid …\nGet a mutable reference to an element in the arena.\nReturn the span associated with <code>handle</code>.\nConstant expressions and override expressions used by this …\nArena for the global variables defined in this module.\nThe bind group index.\nPipeline Constant ID.\nReturns the index of this handle.\nReturn the index range covered by <code>self</code>.\nReturn the length of a subscriptable type.\nThe default value of the pipeline-overridable constant.\nThe value of the constant.\nInitial value for this variable.\nInitial value for this variable.\nInner structure that depends on the kind of the type.\nInsert a new value into the arena.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the inner vector.\nReverse of <code>Self::new</code>, discards span information and …\nConvert inner error using <code>From</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck whether <code>self</code> was defined or is a default/unknown span\nReturn true if this expression is a dynamic …\nReturn <code>true</code> if the arena contains no elements.\nReturns <code>true</code> if the arena contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if this is a handle to a type rather than the …\nReturns true if the statement directly terminates the …\nReturns an iterator over the items stored in this arena, …\nReturns an iterator over the items stored in this arena, …\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns a iterator over the items stored in this arena, …\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLists of reserved keywords for each shading language with …\nHow the value’s bits are to be interpreted.\nReturn the current number of items stored in this arena.\nReturns the current number of items stored in this arena.\nLength in code units (in bytes) of the span.\n1-based line number.\n1-based column in code units (in bytes) of the start of …\nLocal variables defined and used in the function.\nReturn a <code>SourceLocation</code> for this span in the provided …\nReturn a <code>SourceLocation</code> for our first span, if we have one.\nThe name of the type, if any.\nName of the variable, if any.\nName of the variable, if any.\nName of the argument, if any.\nName of the function, if any.\nName of this entry point, visible externally.\nMap of expressions that have associated variable names\nReturns true if the expression is considered emitted at …\nCreate a new arena with no initial capacity allocated.\nCreate a new arena with no initial capacity allocated.\nCreates a new <code>Span</code> from a range of byte indices\nCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.\nReturn a range enclosing handles <code>first</code> through <code>last</code>, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n0-based Offset in code units (in bytes) of the start of …\nOffset from the beginning from the struct.\nReturn the global variable being accessed by the …\nArena for the pipeline-overridable constants defined in …\nTypes for predeclared wgsl types instantiated on demand.\n<code>Module</code> processing functionality.\nGet the range of handles from a particular number of …\nType for <code>RayDesc</code>.\nType for <code>RayIntersection</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReplace an old value with a new value.\nThe result of this function, if any.\nReturn the scalar type of <code>self</code>.\nReturns the scalar width in bytes\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet the size of this type.\nHow this variable is to be stored.\nIterator over stored <code>SpanContext</code>s.\nDictionary of special type handles.\nShader stage.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nModifies <code>self</code> to contain the smallest <code>Span</code> possible that …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts <code>self</code> to a range if the span is not unknown\nFormats the type as it is written in wgsl.\nFormat a scalar kind+width as a type is written in wgsl.\nFormats the type as it is written in wgsl.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the smallest <code>Span</code> possible that contains all the …\nType of the field.\nThe type of this variable.\nThe type of this variable.\nType of the argument.\nType of the result.\nArena for the types defined in this module.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a new <code>Span</code> starting at <code>self</code> and ending at <code>other</code>\nShader validator.\nValue, upon which the case is considered true.\nThis size of the value in bytes.\nAdd a <code>SpanContext</code>.\nAdd a new span with description.\nWorkgroup size for compute stages\nWrite this handle’s index to <code>formatter</code>, preceded by …\nIndicates the 2nd input to the blender when dual-source …\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nBoolean expression\nIf provided, converts to the specified byte width. …\nThe coordinate of the texel we wish to load. This must be …\nSource expression, which can only be a scalar or a vector.\nIf Some(), this operation is a gather operation on the …\nThe image to load a texel from. This must have type <code>Image</code>. …\nTarget scalar kind.\nA level of detail, for mipmapped images.\nThis refers to an expression in <code>Module::global_expressions</code>.\nA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.\nThe type of the result\nKind of values to sample.\nMulti-sampled image.\nMulti-sampled depth image.\nIf <code>None</code>, the base level is considered.\nThe acceleration structure within which this query should …\nA struct of detailed parameters for the ray query.\nThe value to broadcast over\nThe value to compute over\nHow to combine the results\nFunction to run on the atomic value.\nThe specific operation we’re performing on <code>query</code>.\nSpecifies which thread to gather from\nWhat operation to compute\nPointer to an atomic value.\nThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space\nThe value from this thread to store in the ballot\nThe <code>RayQuery</code> object this statement operates on.\n<code>AtomicResult</code> expression representing this function’s …\nThe <code>WorkGroupUniformLoadResult</code> expression representing …\nThe <code>SubgroupBallotResult</code> expression representing this load…\nThe <code>SubgroupOperationResult</code> expression representing this …\nThe <code>SubgroupOperationResult</code> expression representing this …\nValue to use in the function.\nNames of vector components.\nAn <code>EntryPoint</code>, and its index in <code>Module::entry_points</code>.\nA regular function.\nHelper structure that stores data needed when writing the …\nWhether we’re generating an entry point or a regular …\nIndent for backends.\nIndentation level.\nExpressions that need baking.\nSpecifies the values of pipeline-overridable constants in …\nRay flags, for a <code>RayDesc</code>’s <code>flags</code> field.\nThe intersection test to use for ray queries.\nGet a flags value with all known bits set.\nHelper method that generates a <code>NameKey</code> for a function …\nHelper function that returns the string corresponding to …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nFor constness checks\nThe expression arena of the current function being written\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nBackend for GLSL (OpenGL Shading Language).\nAnalysis about the function\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the function is an entry point for a …\nWhether all bits in this flags value are unset.\nReturns true if the given expression points to a …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nHelper method that generates a <code>NameKey</code> for a local in the …\nMap of expressions that have associated variable names\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nHelper method that resolves a type of a given expression.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nBackend for SPIR-V (Standard Portable Intermediate …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current function being written\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlip output Y and extend Z from (0, 1) to (-1, 1).\nBuffer address space support.\nMapping between resources and bindings.\n8 byte floats.\nSupports ARB_shader_draw_parameters on the host, which …\nDual source blending\nArrays with a dynamic length.\n<code>core</code> GLSL.\n<code>es</code> GLSL.\nThe entry point couldn’t be found.\nA GLSL compilation error.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nMore image formats.\nStructure used to encode additions to GLSL that aren’t …\n<code>crate::Sampling::First</code> is unsupported.\nA error occurred while writing to the output.\nImage load and early depth tests.\nImage size query\nInclude unused global variables, constants and functions. …\nInstance index\nA image was used with multiple samplers, which isn’t …\nThe specified <code>Version</code> doesn’t have all required <code>Features</code>.\n<code>AddressSpace::PushConstant</code> was used more than once in the …\nInterpolation and auxiliary qualifiers.\nConfiguration used in the <code>Writer</code>.\nA subset of options meant to be changed per pipeline.\nAll information to bind a single uniform value to the …\nReflection info for texture mappings and uniforms.\nSample ID.\nSubgroup operations\nList of supported <code>core</code> GLSL versions.\nList of supported <code>es</code> GLSL versions.\nTexture levels query\nTexture samples query\nSample specific LODs of cube / array shadow textures\nSupports GL_EXT_texture_shadow_lod on the host, which …\nMapping between a texture and its sampler, if it exists.\nA call was made to an unsupported external.\nA scalar with an unsupported width was requested.\nA GLSL version.\nThe specified <code>Version</code> isn’t supported.\nWriter responsible for all code generation.\nConfiguration flags for the <code>Writer</code>.\nGL uniform name for the item. This name is the same as if …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMap of resources association to binding locations.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe index which can be used for dual source blending. This …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe location of the global. This corresponds to …\nHow many views to render to, if doing multiview rendering.\nCreates a new <code>Writer</code> instance.\nCreate a new gles version\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset in the push constant memory block this uniform …\nList of push constant items in the shader.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nHandle to the associated sampler global variable, if it …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …")