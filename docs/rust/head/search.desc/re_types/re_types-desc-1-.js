searchState.loadedDescShard("re_types", 1, "<strong>Datatype</strong>: Visible time range bounds for a specific …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nHow much to rotate around the axis.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nThe color that will be applied to the annotated entity.\nL, RGB, RGBA, …\nThe dimension number to select.\nThe dimension number to select.\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nThe first string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert the direction of the dimension.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe names of the dimensions of the tensor (optional).\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nThe second string.\nThe shape of the tensor, i.e. the length of each dimension.\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nThe width of the image in pixels.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\n<strong>Datatype</strong>: Angle in radians.\nCreate a new angle from degrees.\nCreate a new angle from radians.\nZero angle, often used for representing no rotation.\nAngle in degrees (converts from radians).\nReturns the argument unchanged.\nCreate a new angle from degrees.\nCreate a new angle from radians.\nCalls <code>U::from(self)</code>.\nAngle in radians.\nAngle in radians. One turn is equal to 2π (or τ) radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nThe color that will be applied to the annotated entity.\nReturns the argument unchanged.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCalls <code>U::from(self)</code>.\nThe label that will be shown in the UI.\n<strong>Datatype</strong>: A binary blob of data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Blob</code> that is a slice of this buffer starting …\n<strong>Datatype</strong>: The innermost datatype of an image.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n16-bit signed integer.\n32-bit signed integer.\n64-bit signed integer.\n8-bit signed integer.\n16-bit unsigned integer.\n32-bit unsigned integer.\n64-bit unsigned integer.\n8-bit unsigned integer.\nNumber of bits used to represent this element type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\n<strong>Datatype</strong>: The description of a semantic Class.\nReturns the argument unchanged.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nCalls <code>U::from(self)</code>.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: Specified what color components are present in …\nGrayscale luminance intencity/brightness/value, sometimes …\nRed, Green, Blue\nRed, Green, Blue, Alpha\nReturns the argument unchanged.\nDo we have an alpha channel?\nCalls <code>U::from(self)</code>.\n1 for grayscale, 3 for RGB, etc.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe data type of each channel (e.g. the red channel) of …\nThe color model represented by this image format.\nL, RGB, RGBA, …\nThe datatype represented by this image format.\nCreate a new depth image format with the given resolution …\nReturns the argument unchanged.\nFrom a speicifc pixel format.\nDetermine if the image format has an alpha channel.\nThe height of the image in pixels.\nCalls <code>U::from(self)</code>.\nDetermine if the image format represents floating point …\nNumber of bytes for the whole image.\nUsed mainly for chroma downsampled formats and differing …\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nCreate a new segmentation image format with the given …\nThe width of the image in pixels.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe first point of the pair.\nThe second point of the pair.\nCreate a vector of <code>KeypointPair</code> from an array of tuples.\nThe identity matrix.\n<strong>Datatype</strong>: A 3x3 Matrix.\nReturns the matrix column for the given <code>index</code>.\nReturns the argument unchanged.\nGet a specific element.\nColumn-major order matrix coefficients.\nCalls <code>U::from(self)</code>.\nSet a specific element.\nThe identity matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\nReturns the matrix column for the given <code>index</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nThe color model derived from this pixel format.\nThe datatype that this decodes into.\nRandom-access decoding of a specific pixel of an image.\nRandom-access decoding of a specific pixel of an image.\nReturns the argument unchanged.\nDo we have an alpha channel?\nCalls <code>U::from(self)</code>.\nIs this pixel format floating point?\nReturns true if the format is a YUV format using limited …\nNumber of bytes needed to represent an image of the given …\nYuv matrix coefficients used by this format.\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\nThe X^Y plane with normal = +Z.\nThe Y^Z plane with normal = +X.\nThe Z^X plane with normal = +Y.\nThe distance of the plane from the origin (in multiples of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new plane from a normal and distance.\nThe normal of the plane (unnormalized if the plane is …\nThe identity quaternion representing no rotation.\nA quaternion that represents an invalid transform.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nReturns the argument unchanged.\nFrom WXYZ.\nFrom XYZW.\nCalls <code>U::from(self)</code>.\nThe components of the quaternion in X,Y,Z,W order.\nRange that expands from negative infinity to positive …\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\nAbsolute length of the range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRange that expands from negative infinity to positive …\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\nBlack and opaque.\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nFully transparent (invisible).\nWhite and opaque.\nReturns the argument unchanged.\nFrom linear-space sRGB values in 0-1 range, with a …\nFrom gamma-space sRGB values.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nCalls <code>U::from(self)</code>.\n<code>[r, g, b, a]</code>\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nThe identity rotation, representing no rotation.\nA rotation that represents an invalid transform.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new rotation from an axis and an angle.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64bit IEEE-754 floating point, also known as <code>double</code>.\n16bit signed integer.\n32bit signed integer.\n64bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n16bit unsigned integer.\n32bit unsigned integer.\n64bit unsigned integer.\n8bit unsigned integer.\nThe underlying data type of the buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this buffer empty?\nThe size of the buffer in bytes.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\nThe content/data.\nGet the name of a specific dimension.\nThe datatype of the tensor.\nReturns the argument unchanged.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from the contents of an image file.\nConstruct a tensor from the contents of an image file on …\nGet the value of the element at the given index.\nCalls <code>U::from(self)</code>.\nReturns true if either all dimensions have size 1 or only …\nThe names of the dimensions of the tensor (optional).\nCreate a new tensor.\nThe number of dimensions of the tensor.\nThe shape of the tensor.\nThe shape of the tensor, i.e. the length of each dimension.\nReturns the shape of the tensor with all leading &amp; …\nThe size of the tensor data, in bytes.\nSet the names of the dimensions to the provided names.\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\nThe dimension number to select.\nReturns the argument unchanged.\nThe index along the dimension to use.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\nThe dimension number to select.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvert the direction of the dimension.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\nThe first string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe second string.\n<strong>Datatype</strong>: A 16-byte UUID.\nThe raw bytes representing the UUID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nAssign a new x\nAssign a new y\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\n<strong>Datatype</strong>: A uint32 vector in 3D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\n<strong>Datatype</strong>: A uint vector in 4D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe w-coordinate, i.e. index 3.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A vector in 2D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\n<code>[1, 1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A vector in 3D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\n<strong>Datatype</strong>: A vector in 4D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe w-coordinate, i.e. index 3.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\n<strong>Datatype</strong>: Presentation timestamp within a …\nReturns the timestamp as nanoseconds.\nReturns the timestamp as seconds.\nReturns the argument unchanged.\nCreate new timestamp from nanoseconds since video start.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nGenerates reflection about all known archetypes.\nGenerates reflection about all known components.\nGenerates reflection about all known components.\nRotation defined with an axis and an angle.\nThe identity rotation, expressed as a quaternion\nRotation defined by a quaternion.\nA 3D rotation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nIndicator component for the <code>AffixFuzzer1</code> …\nThe total number of components in the archetype: 22 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1018</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1019</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1020</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1021</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1022</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nIndicator component for the <code>AffixFuzzer2</code> …\nThe total number of components in the archetype: 19 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1118</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz1122</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer2</code>.\nIndicator component for the <code>AffixFuzzer3</code> …\nThe total number of components in the archetype: 0 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2001</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2002</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2003</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2004</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2005</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2006</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2007</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2008</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2009</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2010</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2011</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2012</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2013</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2014</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2015</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2016</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2017</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2018</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer3</code>.\nIndicator component for the <code>AffixFuzzer4</code> …\nThe total number of components in the archetype: 0 …\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2101</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2102</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2103</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2104</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2105</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2106</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2107</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2108</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2109</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2110</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2111</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2112</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2113</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2114</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2115</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2116</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2117</code>.\nReturns the <code>ComponentDescriptor</code> for <code>Self::fuzz2118</code>.\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer4</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nOne.\nCorrect.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\nGreat film.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nThe first value.\nThe second value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBaby’s got it.\nFeeling blue.\n<strong>Datatype</strong>: A test of the enum type.\nIt’s the only way to go.\nIt’s what’s remaining.\nCorrect.\nGreat film.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe first value.\nThe second value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne.\nThe answer to life, the universe, and everything.\nThree.\nTwo.\n<strong>Datatype</strong>: A test of an enumate with specified values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\n-X\n-Y\n-Z\n+X\n+Y\n+Z\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nThe six cardinal directions for 3D view-space and …\nConvert to a unit-length 3D vector.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an upper case letter to one of the six cardinal …\nConvert a dimension index to an axis.\nCreate a <code>Handedness</code> from a boolean.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLong description of the direction, e.g. “Up”, “Down…\nRepresent this direction as the first letter of the …\nPositive or negative.")