searchState.loadedDescShard("re_sdk", 1, "Compares and sets the maximum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nCompares and sets the minimum of the current value and <code>val</code>,\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies logical “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “nand” to the current value and …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies logical “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nApplies bitwise “or” to the current value and returns …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nDecrements the current value by <code>val</code> and returns the …\nFetches the value, and applies a function to it that …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies logical “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nApplies bitwise “xor” to the current value and returns …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes the atomic and returns the contained value.\nReturns <code>true</code> if operations on values of this type are …\nLoads a value from the atomic cell.\nLoads a value from the atomic using a “consume” memory …\nCreates a new atomic cell initialized with <code>val</code>.\nStores <code>val</code> into the atomic cell.\nStores <code>val</code> into the atomic cell and returns the previous …\nTakes the value of the atomic cell, leaving …\nThe message could not be sent because the channel is …\nThe message could not be sent because the channel is …\nThe message could not be received because the channel is …\nThe message could not be received because the channel is …\nA message could not be received because the channel is …\nThe message could not be sent because the channel is full.\nA blocking iterator over messages in a channel.\nA blocking iterator over messages in a channel.\nAn error returned from the <code>ready_timeout</code> method.\nThe receiving side of a channel.\nAn error returned from the <code>recv</code> method.\nAn error returned from the <code>recv_timeout</code> method.\nSelects from a set of channel operations.\nAn error returned from the <code>select_timeout</code> method.\nA selected operation that needs to be completed.\nAn error returned from the <code>send</code> method.\nAn error returned from the <code>send_timeout</code> method.\nThe sending side of a channel.\nThe message could not be sent because the channel is full …\nA message could not be received because the channel is …\nA non-blocking iterator over messages in a channel.\nAn error returned from the <code>try_ready</code> method.\nAn error returned from the <code>try_recv</code> method.\nAn error returned from the <code>try_select</code> method.\nAn error returned from the <code>try_send</code> method.\nCreates a receiver that delivers a message after a certain …\nCreates a receiver that delivers a message at a certain …\nCreates a channel of bounded capacity.\nIf the channel is bounded, returns its capacity.\nIf the channel is bounded, returns its capacity.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the index of the selected operation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message.\nUnwraps the message.\nUnwraps the message.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the receive operation failed because the …\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the send operation failed because the …\nReturns <code>true</code> if the send operation timed out.\nReturns <code>true</code> if the receive operation timed out.\nA blocking iterator over messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nCreates a receiver that never delivers messages.\nCreates an empty list of channel operations for selection.\nBlocks until one of the operations becomes ready.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is received or …\nAdds a receive operation.\nCompletes the receive operation.\nWaits for a message to be received from the channel, but …\nWaits for a message to be received from the channel, but …\nRemoves a previously added operation.\nReturns <code>true</code> if senders belong to the same channel.\nReturns <code>true</code> if receivers belong to the same channel.\nBlocks until one of the operations becomes ready and …\nSelects from a set of channel operations.\nSelects from a set of channel operations.\nBlocks until a given deadline, or until one of the …\nBlocks for a limited time until one of the operations …\nBlocks the current thread until a message is sent or the …\nAdds a send operation.\nCompletes the send operation.\nWaits for a message to be sent into the channel, but only …\nWaits for a message to be sent into the channel, but only …\nCreates a receiver that delivers messages periodically.\nA non-blocking iterator over messages in the channel.\nAttempts to find a ready operation without blocking.\nAttempts to receive a message from the channel without …\nAttempts to select one of the operations without blocking.\nAttempts to send a message into the channel without …\nCreates a channel of unbounded capacity.\nThe queue was empty at the time of stealing.\nAn injector queue.\nThe steal operation needs to be retried.\nPossible outcomes of a steal operation.\nA stealer handle of a worker queue.\nAt least one task was successfully stolen.\nA worker queue.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsumes items until a <code>Success</code> is found and returns it.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue was empty at the time of …\nReturns <code>true</code> if the steal operation needs to be retried.\nReturns <code>true</code> if at least one task was stolen.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the deque.\nReturns the number of tasks in the queue.\nCreates a new injector queue.\nCreates a FIFO worker queue.\nCreates a LIFO worker queue.\nIf no task was stolen, attempts another steal operation.\nPops a task from the queue.\nPushes a task into the queue.\nPushes a task into the queue.\nSteals a task from the queue.\nSteals a task from the queue.\nSteals a batch of tasks and pushes them into another …\nSteals a batch of tasks and pushes them into a worker.\nSteals a batch of tasks, pushes them into another worker, …\nSteals a batch of tasks, pushes them into a worker, and …\nSteals no more than <code>limit</code> of tasks and pushes them into …\nSteals no more than of tasks and pushes them into a worker.\nSteals no more than <code>limit</code> of tasks, pushes them into …\nSteals no more than <code>limit</code> of tasks, pushes them into a …\nCreates a stealer for this queue.\nReturns the result of the operation, if successful.\nThe alignment of pointer.\nAn atomic pointer that can be safely shared between …\nAn epoch-based garbage collector.\nThe error returned on failed compare-and-set operation.\nMemory orderings for compare-and-set operations.\nThe error returned on failed compare-and-swap operation.\nA guard that keeps the current thread pinned.\nThe type for initializers.\nA handle to a garbage collector.\nAn owned heap-allocated object.\nTypes that are pointed to by a single word.\nA trait for either <code>Owned</code> or <code>Shared</code> pointers.\nA pointer to an object protected by the epoch GC.\nConverts the pointer to a raw pointer (without the tag).\nConverts the pointer to a reference.\nReturns a copy of the atomic value.\nCreates another reference to the same garbage collector.\nReturns the <code>Collector</code> associated with this handle.\nReturns the <code>Collector</code> associated with this guard.\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nStores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …\nThe value in the atomic pointer at the time of the failed …\nThe value in the atomic pointer at the time of the failed …\nReturns the default global collector.\nStores a function so that it can be executed at some point …\nStores a destructor for an object so that it can be …\nStores a function so that it can be executed at some point …\nDereferences the given pointer.\nDereferences the pointer.\nMutably dereferences the given pointer.\nDereferences the pointer.\nDrops the object pointed to by the given pointer.\nChecks if both handles point to the same collector.\nThe ordering of the operation when it fails.\nBitwise “and” with the current tag.\nBitwise “or” with the current tag.\nFetches the pointer, and then applies a function to it …\nBitwise “xor” with the current tag.\nClears up the thread-local cache of deferred functions by …\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>owned</code>.\nReturns the argument unchanged.\nReturns a new atomic pointer pointing to <code>ptr</code>.\nReturns a new atomic pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns a new owned pointer pointing to <code>b</code>.\nReturns the argument unchanged.\nReturns a new pointer pointing to <code>raw</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new owned pointer pointing to <code>raw</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nReturns a new pointer pointing to the tagged pointer <code>data</code>.\nInitializes a with the given initializer.\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the owned pointer into a <code>Box</code>.\nTakes ownership of the pointee.\nTakes ownership of the pointee.\nConverts the owned pointer into a <code>Shared</code>.\nReturns the machine representation of the pointer.\nReturns <code>true</code> if the pointer is null.\nReturns <code>true</code> if the current thread is pinned.\nReturns <code>true</code> if the handle is pinned.\nLoads a <code>Shared</code> from the atomic pointer.\nLoads a <code>Shared</code> from the atomic pointer using a “consume…\nAllocates <code>value</code> on the heap and returns a new atomic …\nAllocates <code>value</code> on the heap and returns a new owned …\nCreates a new collector.\nThe new value, which the operation failed to store.\nThe new value, which the operation failed to store.\nReturns a new null atomic pointer.\nReturns a new null pointer.\nPins the current thread.\nPins the handle.\nRegisters a new handle for the collector.\nUnpins and then immediately re-pins the thread.\nTemporarily unpins the thread, executes the given function …\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.\nThe ordering of the operation when it succeeds.\nStores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …\nReturns the tag stored within the pointer.\nReturns the tag stored within the pointer.\nTakes ownership of the pointee if it is non-null.\nTakes ownership of the pointee if it is not null.\nReturns a reference to a dummy guard that allows …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nReturns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …\nA bounded multi-producer multi-consumer queue.\nAn unbounded multi-producer multi-consumer queue.\nReturns the capacity of the queue.\nPushes an element into the queue, replacing the oldest …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is empty.\nReturns <code>true</code> if the queue is full.\nReturns the number of elements in the queue.\nReturns the number of elements in the queue.\nCreates a new bounded queue with the given capacity.\nCreates a new unbounded queue.\nAttempts to pop an element from the queue.\nPops an element from the queue.\nAttempts to push an element into the queue.\nPushes an element into the queue.\nA thread parking primitive.\nA sharded reader-writer lock.\nA guard used to release the shared read access of a …\nA guard used to release the exclusive write access of a …\nUnparks a thread parked by the associated <code>Parker</code>.\nEnables threads to synchronize the beginning or end of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a raw pointer into a <code>Parker</code>.\nConverts a raw pointer into an <code>Unparker</code>.\nReturns a mutable reference to the underlying data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this lock, returning the underlying data.\nConverts a <code>Parker</code> into a raw pointer.\nConverts an <code>Unparker</code> into a raw pointer.\nReturns <code>true</code> if the lock is poisoned.\nCreates a new <code>Parker</code>.\nCreates a new sharded reader-writer lock.\nCreates a new wait group and returns the single reference …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nBlocks the current thread until the token is made …\nLocks with shared read access, blocking the current thread …\nAttempts to acquire this lock with shared read access.\nAttempts to acquire this lock with exclusive write access.\nAtomically makes the token available if it is not already.\nReturns a reference to an associated <code>Unparker</code>.\nDrops this reference and waits until all other references …\nLocks with exclusive write access, blocking the current …\nA scope for spawning threads.\nA handle that can be used to join its scoped thread.\nConfigures the properties of a new thread.\nCreates a builder that can configure a thread before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for the thread to finish and returns its result.\nSets the name for the new thread.\nCreates a new scope for spawning threads.\nSpawns a scoped thread.\nSpawns a scoped thread with this configuration.\nSets the size of the stack for the new thread.\nReturns a handle to the underlying thread.\nPerforms exponential backoff in spin loops.\nPads and aligns a value to the length of a cache line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value.\nReturns <code>true</code> if exponential backoff has completed and …\nCreates a new <code>Backoff</code>.\nPads and aligns a value to the length of a cache line.\nResets the <code>Backoff</code>.\nBacks off in a blocking loop.\nBacks off in a lock-free loop.\nThe “debug” level.\nCorresponds to the <code>Debug</code> log level.\nThe “error” level.\nCorresponds to the <code>Error</code> log level.\nThe “info” level.\nCorresponds to the <code>Info</code> log level.\nAn enum representing the available verbosity levels of the …\nAn enum representing the available verbosity level filters …\nA trait encapsulating the operations required of a logger.\nMetadata about a log message.\nBuilder for <code>Metadata</code>.\nA level lower than all log levels.\nThe type returned by <code>from_str</code> when the string doesn’t …\nThe “payload” of a log message.\nBuilder for <code>Record</code>.\nThe statically resolved maximum log level.\nThe type returned by <code>set_logger</code> if <code>set_logger</code> has already …\nThe “trace” level.\nCorresponds to the <code>Trace</code> log level.\nThe “warn” level.\nCorresponds to the <code>Warn</code> log level.\nThe message body.\nSet <code>args</code>.\nReturns the string representation of the <code>Level</code>.\nReturns the string representation of the <code>LevelFilter</code>.\nInvoke the builder and return a <code>Record</code>\nReturns a <code>Metadata</code> object.\nReturns a new builder.\nReturns a new builder.\nLogs a message at the debug level.\nDetermines if a log message with the specified metadata …\nLogs a message at the error level.\nThe source file containing the message.\nSet <code>file</code>\nThe source file containing the message, if it is a <code>&#39;static</code> …\nSet <code>file</code> to a <code>&#39;static</code> string.\nFlushes any buffered records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogs a message at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterate through all supported logging levels.\nIterate through all supported filtering levels.\nThe verbosity level of the message.\nSet <code>Metadata::level</code>.\nThe verbosity level of the message.\nSetter for <code>level</code>.\nThe line containing the message.\nSet <code>line</code>\nLogs the <code>Record</code>.\nThe standard logging macro.\nDetermines if a message logged at the specified level in …\nReturns a reference to the logger.\nReturns the most verbose logging level.\nReturns the most verbose logging level filter.\nReturns the current maximum log level.\nMetadata about the log directive.\nSet <code>metadata</code>. Construct a <code>Metadata</code> object with …\nThe module path of the message.\nSet <code>module_path</code>\nThe module path of the message, if it is a <code>&#39;static</code> string.\nSet <code>module_path</code> to a <code>&#39;static</code> string\nConstruct new <code>RecordBuilder</code>.\nConstruct a new <code>MetadataBuilder</code>.\nSets the global logger to a <code>Box&lt;Log&gt;</code>.\nSets the global logger to a <code>&amp;&#39;static Log</code>.\nA thread-unsafe version of <code>set_logger</code>.\nSets the global maximum log level.\nA thread-unsafe version of <code>set_max_level</code>.\nThe name of the target of the directive.\nSet <code>Metadata::target</code>\nThe name of the target of the directive.\nSetter for <code>target</code>.\nConverts <code>self</code> to the equivalent <code>Level</code>.\nConverts the <code>Level</code> to the equivalent <code>LevelFilter</code>.\nLogs a message at the trace level.\nLogs a message at the warn level.\nAn alias for <code>BuildHasherDefault</code> for use with <code>NoHashHasher</code>.\nA <code>HashMap</code> with an integer domain, using <code>NoHashHasher</code> to …\nA <code>HashSet</code> of integers, using <code>NoHashHasher</code> to perform no …\nTypes which are safe to use with <code>NoHashHasher</code>.\nFor an enabled type <code>T</code>, a <code>NoHashHasher&lt;T&gt;</code> implements …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nApproximations of stack and heap size for both internal …\nReturns the total size of <code>self</code> on the heap, in bytes.\nIs <code>Self</code> just plain old data?\nReturns the total size of <code>self</code> on the stack, in bytes.\nReturns the total size of <code>self</code> in bytes, accounting for …\nThe user-chosen name of the application doing the logging.\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nMessage containing an Arrow payload\nLog an entity using an <code>ArrowMsg</code>.\nData associated with the blueprint state.\nCommand used for activating a blueprint once it has been …\nSend after all messages in a blueprint to signal that the …\nThe official Rerun C Logging SDK\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nA signed duration represented as nanoseconds since unix …\nContains no time at all.\nContains all time.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nLoading a file via CLI, drag-and-drop, a file-dialog, etc.\nA unique numeric index for each individual instance within …\nThe most general log message sent from the SDK to the …\nValue used to represent the maximum temporal value a …\nValue used to represent the minimal temporal value a …\nSometimes used as the hash of <code>None</code>.\nAn integer that is known not to equal its minimum value.\nPerhaps from some manual data ingestion?\nThe official Rerun Python Logging SDK\nA recording of user-data.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\nLike <code>ResolvedTimeRange</code>, but using <code>TimeReal</code> for improved …\nThe official Rerun Rust Logging SDK\nSpecial value used to represent static data.\nUsed e.g. for frames in a film.\nA new recording has begun.\nA unique id per store.\nInformation about a recording or blueprint.\nWhat kind of Store this is.\nThe source of a recording or blueprint.\nA date-time represented as nanoseconds since unix epoch\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nEither nanoseconds or sequence numbers.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nSeconds since unix epoch\nThe user clicked on a recording URI in the viewer.\nExtends <code>VecDeque</code> with extra insertion routines.\nExtends <code>VecDeque</code> with extra removal routines.\nExtends <code>VecDeque</code> with extra sorting routines.\nGenerated from the viewer itself.\nThe amount of time or sequences covered by this range.\nThe union of all rules\nInclude this entity with subtree.\nInclude this path or variable expression, but not the …\nInclude this entity, but not the subtree.\nAdds a rule to this filter.\nAdds a rule to this filter.\nInclude this entity or variable expression with subtree.\nCreates a filter that accepts everything.\nThe user-chosen name of the application doing the logging.\n<code>ArrowMsg</code> is the <code>crate::LogMsg</code> sub-type containing an Arrow …\nReturns <code>f64::MIN</code> for <code>Self::STATIC</code>.\nReturns <code>i64::MIN</code> for <code>Self::STATIC</code>.\nThe blueprint this command refers to.\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>frame_nr</code> suitable …\nBuild a (<code>Timeline</code>, <code>TimeInt</code>) tuple from <code>log_time</code> suitable …\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nIf this store is the result of a clone, which store was it …\nMost specific last, which means recursive first.\n“color”\nInclusive\nDoes this range fully contain the other?\nIs there any rule for this entity path?\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nNo variable substitutions.\n<code>camera / &quot;left&quot; / points / #42</code>\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nBuild a <code>Vec&lt;EntityPathPart&gt;</code>:\nMatch this path or variable expression, but not children.\nMatch this path, but not children.\nMatch this path, but not children.\nExample components to be used for tests and docs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSaturating cast\nReturns the argument unchanged.\nSaturating cast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor time timelines.\nFor time timelines.\nBuild a filter from a list of query expressions.\nFor time timelines.\nFor sequence timelines.\nFor instance:\nFrom an existing u64. Use this only for data conversions.\nReturns the value as a primitive type.\nPrecomputed hash of the string.\nAlways returns <code>Self::STATIC</code> for <code>Self::STATIC</code>.\nWhether this rule includes a subtree.\nMatch this path and any entity in its subtree.\nMatch this path or variable expression and any entity in …\nMatch this path and any entity in its subtree.\nInserts multiple elements at <code>index</code> within the deque, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhere in the range is this value? Returns 0-1 if within …\nIs anything under this path included (including self)?\nWhether this <code>StoreInfo</code> is the default used when a user is …\nIs this entity path explicitly excluded?\nIs this entity path explicitly included?\nTrue if the recording is one of the official Rerun …\nCheck whether <code>self</code> is sorted.\nChecks whether this results of this filter “fully contain…\nIterates the expressions in alphabetical order.\nIterate over the raw expressions of the rules, displaying …\nThe amount of time or sequences covered by this range.\ne.g. 3\nImmediately make <code>blueprint_id</code> the active blueprint for its …\nImmediately make this the active blueprint for the …\nMake <code>blueprint_id</code> the default blueprint for its associated …\nMake this the default blueprint for the <code>app_id</code>.\nDoes this filter include the given entity path?\nWhether this rule matches the given path.\nIs there a rule for this exact entity path (ignoring …\ne.g. 11\nFind the most specific matching rule and return its effect.\nCreate a new <code>EntityPathRule</code> from a string.\nCreates a new non-min if the given value is not the …\nCreates a new temporal <code>ResolvedTimeRange</code>.\nCreates a new temporal <code>TimeInt</code>.\nCreates a new non-min without checking the value.\nCreate a new set of substitutions from a single origin.\nParse an entity path filter from a string, ignoring any …\nParse an entity path filter from a string.\ne.g. 0\nEvery logged entity in Rerun is logged to an <code>EntityPath</code>.\nThe returned range is guaranteed to never include …\nRemoves and returns the elements in the given <code>range</code> from …\nRemove any rule for the given entity path (ignoring …\nRemove a subtree and any existing rules that it would …\nResolve variables &amp; parse paths, ignoring any errors.\nResolve variables &amp; parse paths, returning an error if any …\nResolve variables &amp; parse paths, without any substitutions.\nThe resolved path, with all variables Resolved.\nA time-based UID that is only used to help keep track of …\nThe original rule, with unresolved variables.\nIterate over all rules in the filter.\nIterate over all rules in the filter.\nSchema for all control &amp; data columns.\nOverwrites the end bound of the range.\nOverwrites the start bound of the range.\nCreates a new entity path filter that includes only a …\nCreates a new entity path filter that includes only a …\nSorts <code>self</code>.\nSplits the deque into two at the given index.\nWhen the recording started.\nShould be unique for each recording.\nThe Rerun version used to encoded the RRD data.\nCreates a new entity path filter that includes a single …\nCreates a new entity path filter that includes a single …\ne.g. <code>a0</code> for alpha releases.\nThe union of all rules\nRemoves an element from anywhere in the deque and returns …\nThe maximum values for all timelines across the entire …\nTurns the resolved filter back into an unresolved filter.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>ApplicationId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nThe <code>StoreId</code> that the viewer heuristically recommends …\nLLVM version of the code compiling the Rust SDK\nRust version of the code compiling the Rust SDK\nAn arbitrary callback to be run when an <code>ArrowMsg</code>, and more …\nMessage containing an Arrow payload\nData for all control &amp; data columns.\nUnique identifier for the chunk in this message.\nSchema for all control &amp; data columns.\nThe maximum values for all timelines across the entire …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nExposes the object’s contents as a set of …\nThe component data.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nReturn early with an error.\nWrap the error value with additional context.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nWrap the error value with additional context that is …\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nComputes a placeholder for a given arrow datatype.\nIs this a required component?\nThe name of the field (i.e. same as …\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\n64-bit hash.\nReturns the argument unchanged.\nFrom an existing u64. Use this only for data conversions.\nCalls <code>U::from(self)</code>.\nA <code>EntityPath</code> plus a <code>ComponentName</code>.\nA general path to some data.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nError returned by <code>EntityPathFilter::resolve_strict</code> and …\nA 64 bit hash of <code>EntityPath</code> with very small risk of …\nThe different parts that make up an <code>EntityPath</code>.\nA single entity path rule.\nA set of substitutions for entity paths.\nAn <code>EntityPathFilter</code> with all variables Resolved.\nA path rule with all variables resolved to entity paths.\n“color”\n<code>camera / &quot;left&quot; / points / #42</code>\nThe resolved path, with all variables Resolved.\nThe original rule, with unresolved variables.\nAn integer that is known not to equal its minimum value.\nUsed e.g. for frames in a film.\nNormal wall time.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nThe type of a <code>TimeInt</code> or <code>Timeline</code>.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nAn error type returned when a checked integral type …\nAll ones.\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nThe serialized contents of a <code>ComponentBatch</code> with …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nFundamental <code>Archetype</code>s that are implemented in …\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nEasily iterate over arrow values that may contain nulls.\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nExposes the object’s contents as a set of …\nThe component data.\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nFundamental <code>Component</code>s that are implemented in …\nFundamental datatypes that are implemented in <code>re_types_core</code>…\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nSerializes the contents of this <code>ComponentBatch</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nUseful macro for statically asserting that a <code>struct</code> …\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes the batch into an Arrow2 array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nSerializes the contents of this <code>ComponentBatch</code>.\n<strong>Archetype</strong>: Empties all the components of an entity.\nThe total number of components in the archetype: 1 …\nReturns the <code>ComponentDescriptor</code> for the associated …\nReturns the <code>ComponentDescriptor</code> for <code>Self::is_recursive</code>.\nReturns a non-recursive clear.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Clear</code>.\nReturns a recursive clear.\nMove an arrow array into an <code>ArrayRef</code>.\nThere are null values\nThere are no null values\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<strong>Component</strong>: Configures how a clear operation should behave …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA range of zero length exactly at the time cursor.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\n<strong>Datatype</strong>: A single boolean.\nBoundary is a value relative to the time cursor.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime range to use for this timeline.\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nIterator of a chain of source errors.\nProvides the <code>context</code> method for <code>Result</code>.\nContains the error value\nThe <code>Error</code> type, a wrapper around a dynamic error type.\nEquivalent to Ok::&lt;_, anyhow::Error&gt;(value).\nContains the success value\n<code>Result&lt;T, Error&gt;</code>\nConstruct an ad-hoc error from a string or existing non-…\nGet the backtrace for this Error.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nWrap the error value with additional context.\nWrap the error value with additional context.\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nConstruct an ad-hoc error from a string or existing non-…\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if <code>E</code> is the type held by this error object.\nCreate a new error object from a printable error message.\nCreate a new error object from any error type.\nThe lowest level cause of this error — this error’s …\nWrap the error value with additional context that is …\nArrow crate version\nDefines the low-level <code>Allocation</code> API for shared memory …\nStatically typed implementations of Arrow Arrays\nTypes of shared memory region\nComputation kernels on Arrow Arrays\nDefines the logical data types of Arrow arrays.\nDowncast an <code>Array</code> to a <code>DictionaryArray</code> based on its …\nDowncast an <code>Array</code> to a <code>PrimitiveArray</code> based on its <code>DataType</code>\nDefines <code>ArrowError</code> for representing failures in various …\nPass Arrow objects from and to PyArrow, using Arrow’s C …\nContains the <code>RecordBatch</code> type and associated traits\nArrow Tensor Type, defined in <code>format/Tensor.fbs</code>.\nUtility functions for working with Arrow data\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\nConvert <code>&amp;mut Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code>.\nConvert <code>Pin&lt;&amp;mut Either&lt;L, R&gt;&gt;</code> to …\nConvert <code>Pin&lt;&amp;Either&lt;L, R&gt;&gt;</code> to <code>Either&lt;Pin&lt;&amp;L&gt;, Pin&lt;&amp;R&gt;&gt;</code>, …\nConvert <code>&amp;Either&lt;L, R&gt;</code> to <code>Either&lt;&amp;L, &amp;R&gt;</code>.\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by cloning the …\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\ncontains a wide range of compute operations (e.g. […\nMaps an <code>Either&lt;&amp;mut L, &amp;mut R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by …\nMaps an <code>Either&lt;&amp;L, &amp;R&gt;</code> to an <code>Either&lt;L, R&gt;</code> by copying the …\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nApply one of two functions depending on contents, unifying …\nConvert the contained value into <code>T</code>\nLike <code>either</code>, but provide some context to whichever of the …\nDefines <code>Error</code>, representing all errors returned by this …\nExecutes the given command directly.\nReturns the left value\nReturns the right value\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\nConverts an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>…\nBorrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> of <code>Either</code>s\nMutably borrows an <code>Either</code> of <code>Iterator</code>s to be an <code>Iterator</code> …\nFactors out <code>None</code> from an <code>Either</code> of <code>Option</code>.\nFactors out a homogenous type from an <code>Either</code> of <code>Result</code>.\nFactor out a homogeneous type from an either of pairs.\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nConvert <code>Either&lt;L, R&gt;</code> to <code>Either&lt;R, L&gt;</code>.\nReturns the argument unchanged.\nExamples\nReturns the argument unchanged.\nThis crates a hashmap from the provided iterator using …\nReturns a reference to the value corresponding to the key.\nReturns the key-value pair corresponding to the supplied …\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the value of an either over two equivalent types.\nConvert the inner value to an iterator.\nCreates a consuming iterator visiting all the keys in …\nCreates a consuming iterator visiting all the values in …\nContains modules to interface with other formats such as […\nReturn true if the value is the <code>Left</code> variant.\nReturn true if the value is the <code>Right</code> variant.\nBorrow the inner value as an iterator.\nMutably borrow the inner value as an iterator.\nConvert the left side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;L&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nReturn left value or given value\nReturn left or a default\nReturns left value or computes it from a closure\nMap <code>f</code> over the contained value and return the result in the\nApply the functions <code>f</code> and <code>g</code> to the <code>Left</code> and <code>Right</code> variants …\nSimilar to <code>map_either</code>, with an added context <code>ctx</code> …\nApply the function <code>f</code> on the value in the <code>Left</code> variant if …\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nMemory maps regions defined on the IPC format into <code>Array</code>.\nThis crates a hashmap using RandomState::new which obtains …\nContains the declaration of <code>Offset</code>\nQueues the given command for further execution.\nRemoves a key from the map, returning the value at the key …\nConvert the right side of <code>Either&lt;L, R&gt;</code> to an <code>Option&lt;R&gt;</code>.\nApply the function <code>f</code> on the value in the <code>Right</code> variant if …\nReturn right value or given value\nReturn right or a default\nReturns right value or computes it from a closure\ncontains the <code>Scalar</code> trait object representing individual …\nPerforms a set of actions within a synchronous update.\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nReturns the left value\nReturns the right value\nMisc utilities used in different places in the crate.\nThis crates a hashmap with the specified capacity using …\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the validity of this array.\nApplies a function <code>f</code> to the values of this array, cloning …\nApplies a function <code>f</code> to the values of this array, cloning …\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nArcs this array into a <code>std::sync::Arc&lt;dyn Array&gt;</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nBoxes this array into a <code>Box&lt;dyn Array&gt;</code>.\nReturns the capacity in number of items\nReturns the capacity of this array\nReturns the capacity of this <code>MutablePrimitiveArray</code>.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReturns the capacity in number of items\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nReturns the <code>DataType</code> of this array.\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this <code>DictionaryArray</code>\nReturns the arrays’ <code>DataType</code>.\nReturns the <code>DataType</code> of this array.\nReturns the default <code>DataType</code> of this container: …\nReturns the default <code>DataType</code>, <code>DataType::Binary</code> or …\nReturns the default <code>DataType</code> of this container: …\nReturns a default <code>DataType</code> of this array, which depends on …\nReturns a <code>DataType</code> consistent with <code>FixedSizeListArray</code>.\nReturns a default <code>DataType</code>: inner field is named “item”…\nLogically compares two <code>Array</code>s. Two arrays are logically …\nExtends the <code>MutablePrimitiveArray</code> with a constant\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtend with a fallible iterator\nExtends the <code>MutablePrimitiveArray</code> from a slice\nExtends the <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of trusted …\nExtends the <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nExtends <code>MutableBinaryValuesArray</code> from an iterator of …\nExtends the <code>MutableBinaryArray</code> from an iterator of …\nExtends the <code>MutableBooleanArray</code> from an iterator of …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends <code>MutableUtf8Array</code> from an iterator of trusted len.\nExtends <code>MutableUtf8ValuesArray</code> from an iterator of trusted …\nExtends the <code>MutableBinaryArray</code> from an iterator of trusted …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an <code>iterator</code> of values …\nExtends the <code>MutableBooleanArray</code> from an iterator of values …\nExtends the <code>MutablePrimitiveArray</code> from an iterator of …\nExtends the <code>MutableUtf8Array</code> from an iterator of values of …\nExtends the <code>MutableBinaryArray</code> from an iterator of values. …\nExtends the <code>MutableUtf8Array</code> from an iterator of values. …\nReturns the field (guaranteed to be a <code>Struct</code>)\nReturns the fields of this <code>StructArray</code>.\nThe fields.\nReturns the argument unchanged.\nCreates a new <code>MutableBinaryArray</code> from a slice of optional …\nReturns the argument unchanged.\nCreates a new <code>BinaryArray</code> from a slice of optional <code>&amp;[u8]</code>.\nReturns the argument unchanged.\nCreates a new <code>MutableBooleanArray</code> out of a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>FixedSizeBinaryArray</code> from a slice of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>MutableUtf8Array</code> from a slice of optional …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>arrow-rs</code> <code>PrimitiveArray</code>\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nCreate this array from <code>ArrayData</code>\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>[BooleanArray]</code> from its internal representation. …\nCreates a <code>[PrimitiveArray]</code> from its internal …\nCreates a <code>FixedSizeBinaryArray</code> from an iterator of …\nCreates a new <code>MutableBinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nReturns a new <code>BinaryArray</code> from a <code>Iterator</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableUtf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>Utf8Array</code> from a <code>Iterator</code> of <code>&amp;str</code>.\nCreates a new <code>BinaryArray</code> from slices of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from a slice of <code>bool</code>.\nCreates a new <code>BooleanArray</code> from a slice of <code>bool</code>.\nCreates a <code>FixedSizeBinaryArray</code> from a slice of arrays of …\nCreates a <code>MutablePrimitiveArray</code> from a slice of values.\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nReturns a <code>Utf8Array</code> from a slice of <code>&amp;str</code>.\nCreates a <code>MutableBinaryValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from a <code>TrustedLen</code>\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from a <code>TrustedLen</code>.\nCreates a <code>PrimitiveArray</code> from a <code>TrustedLen</code> of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates a <code>MutableUtf8ValuesArray</code> from a <code>TrustedLen</code>\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator of …\nCreates a <code>MutableBinaryArray</code> from an iterator of trusted …\nCreates a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>BooleanArray</code> from an iterator of trusted length. …\nCreates a <code>MutablePrimitiveArray</code> from an iterator of …\nCreates a <code>PrimitiveArray</code> from an iterator of optional …\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator of …\nCreates a <code>Utf8Array</code> from an iterator of trusted length.\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nReturns a <code>BinaryArray</code> from an iterator of trusted length.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>.\nCreates a new <code>MutablePrimitiveArray</code> out an iterator over …\nCreates a (non-null) <code>PrimitiveArray</code> from a <code>TrustedLen</code> of …\nCreates a new <code>MutableUtf8Array</code> from a <code>TrustedLen</code> of <code>&amp;str</code>.\nReturns a (non-null) <code>Utf8Array</code> created from a <code>TrustedLen</code> …\nCreates a new <code>BinaryArray</code> from a <code>TrustedLen</code> of <code>&amp;[u8]</code>.\nCreates a new <code>MutableBooleanArray</code> from an <code>TrustedLen</code> of …\nCreates a new <code>BooleanArray</code> from an <code>TrustedLen</code> of <code>bool</code>. Use …\nCreates a new <code>MutablePrimitiveArray</code> from an iterator over …\nCreates a new <code>PrimitiveArray</code> from an iterator over values\nCreates a <code>MutableUtf8Array</code> from an iterator of trusted …\nCreates an empty <code>MutableDictionaryArray</code> preloaded with a …\nCreates a (non-null) <code>PrimitiveArray</code> from an iterator of …\nCreates a (non-null) <code>MutablePrimitiveArray</code> from a vector …\nCreates a (non-null) <code>PrimitiveArray</code> from a vector of …\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns the element at index <code>i</code> or <code>None</code> if it is null\nReturns a the inner <code>Field</code>\nReturns a the inner <code>DataType</code>\nReturns a function that writes the element of <code>array</code> at …\nReturns the fields the <code>DataType::Struct</code>.\nReturns all fields from <code>DataType::Union</code>.\nReturns an option of a mutable reference to the values of …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nReturns the index and slot of the field to select from …\nReturns the index and slot of the field to select from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Arc&lt;dyn Array&gt;</code>\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nConverts itself into an <code>Array</code>.\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nconverts itself into <code>Box&lt;dyn Array&gt;</code>\nDeconstructs the <code>StructArray</code> into its individual …\nExtract the low-end APIs from the <code>MutableUtf8Array</code>.\nCreates an empty <code>MutableDictionaryArray</code> retaining the same …\nExtract the low-end APIs from the <code>MutableBinaryValuesArray</code>.\nReturns its internal representation\nReturns its internal representation\nExtract the low-end APIs from the <code>MutablePrimitiveArray</code>.\nReturns its internal representation\nExtract the low-end APIs from the <code>MutableStructArray</code>.\nExtract the low-end APIs from the <code>MutableUtf8ValuesArray</code>.\nReturns its internal representation\nTry to convert this <code>BinaryArray</code> to a <code>MutableBinaryArray</code>\nTry to convert this <code>BooleanArray</code> to a <code>MutableBooleanArray</code>\nTry to convert this <code>PrimitiveArray</code> to a …\nTry to convert this <code>Utf8Array</code> to a <code>MutableUtf8Array</code>\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether the values of this <code>DictionaryArray</code> are …\nReturns whether the <code>DataType::Union</code> is sparse or not.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nReturns an iterator of <code>&amp;[u8]</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code>\nReturns an iterator of <code>Option&lt;&amp;[u8]&gt;</code> over every element of …\nReturns an iterator over the optional values of this …\nReturns an iterator over the optional values of this …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Scalar&gt;&gt;</code>.\nconstructs a new iterator\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nReturns an iterator over <code>Option&lt;T&gt;</code>\nReturns an iterator over the values and validity, …\nReturns an iterator of <code>Option&lt;Box&lt;dyn Array&gt;&gt;</code>\nconstructs a new iterator\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>Option&lt;&amp;str&gt;</code>\nReturns an iterator over the the optional values of  …\nReturns iterator over the values of …\nReturns the keys’ value of the <code>DictionaryArray</code> as <code>usize</code>\nReturns the dictionary keys\nReturns the keys of the <code>DictionaryArray</code>. These keys can be …\nReturns an iterator of the keys’ of the <code>DictionaryArray</code> …\nReturns an iterator of the keys’ values of the …\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nReturns the length of this array\nThe values as a mutable reference\nThe values\nThe mutable values\nReturns an empty <code>MutableBinaryValuesArray</code>.\nCreates a new empty <code>MutableBinaryArray</code>.\nAlias for unwrapping <code>Self::try_new</code>\nCreates an new empty <code>MutableBooleanArray</code>.\nAlias to <code>Self::try_new().unwrap()</code>\nCreates an empty <code>MutableDictionaryArray</code>.\nCreates a new empty <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nAlias to <code>Self::try_new(...).unwrap()</code>\nCreates a new empty <code>MutableListArray</code>.\nCreates a new <code>ListArray</code>.\nCreates a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>MutableNullArray</code>.\nCreates a new empty <code>MutablePrimitiveArray</code>.\nAlias for <code>Self::try_new(..).unwrap()</code>.\nCreates a new <code>MutableStructArray</code>.\nReturns a new <code>StructArray</code>\nReturns a new <code>UnionArray</code>.\nInitializes a new empty <code>MutableUtf8Array</code>.\nReturns an empty <code>MutableUtf8ValuesArray</code>.\nCreates a new <code>Utf8Array</code>.\nCreates a new <code>ArrayValuesIter</code>\nCreates an empty <code>BinaryArray</code>, i.e. whose <code>.len</code> is zero.\nReturns a new empty <code>BooleanArray</code>.\nReturns a new empty <code>DictionaryArray</code>.\nReturns a new empty <code>FixedSizeBinaryArray</code>.\nReturns a new empty <code>FixedSizeListArray</code>.\nReturns a new empty <code>ListArray</code>.\nReturns a new empty <code>MapArray</code>.\nReturns a new empty <code>NullArray</code>.\nReturns a new empty (zero-length) <code>PrimitiveArray</code>.\nCreates an empty <code>StructArray</code>.\nCreates a new empty <code>UnionArray</code>.\nReturns a new empty <code>Utf8Array</code>.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>, <code>Offsets</code>…\nCreates an null <code>BinaryArray</code>, i.e. whose …\nReturns a new <code>BooleanArray</code> whose all slots are null / <code>None</code>.\nReturns an <code>DictionaryArray</code> whose all elements are null\nReturns a new null <code>FixedSizeBinaryArray</code>.\nReturns a new null <code>FixedSizeListArray</code>.\nReturns a new null <code>ListArray</code>.\nReturns a new null <code>MapArray</code> of <code>length</code>.\nReturns a new <code>NullArray</code>.\nReturns a new <code>PrimitiveArray</code> where all slots are null / …\nCreates a null <code>StructArray</code> of length <code>length</code>.\nCreates a new null <code>UnionArray</code>.\nReturns a new <code>Utf8Array</code> whose all slots are null / <code>None</code>.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nCreate a <code>MutableUtf8Array</code> out of low-end APIs.\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nCreates a new <code>Utf8Array</code> without checking for offsets …\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code> and …\nCreates a new <code>MutableFixedSizeListArray</code> from a <code>MutableArray</code>…\nCreates a new <code>MutableListArray</code> from a <code>MutableArray</code>.\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>BinaryArray</code>.\nThe offsets\nThe offsets [<code>Buffer</code>].\nreturns the offsets\nThe optional offsets.\nreturns its offsets.\nreturns its offsets.\nReturns the offsets of this <code>Utf8Array</code>.\nContains functions and function factories to order values …\nPop the last entry from <code>MutableBinaryValuesArray</code>. This …\nPop the last entry from <code>MutableBinaryArray</code>. This function …\nPop an entry from <code>MutableBooleanArray</code>. Note If the values …\nPop the last entry from <code>MutableFixedSizeBinaryArray</code>. This …\nPop a value from the array. Note if the values is empty, …\nPop the last entry from <code>MutableUtf8Array</code>. This function …\nPop the last entry from <code>MutableUtf8ValuesArray</code>. This …\nPushes a new item to the array.\nPushes a new element to the array.\nPushes a new entry to <code>MutableBooleanArray</code>.\npushes a new entry to <code>MutableFixedSizeBinaryArray</code>.\nAdds a new value to the array.\nCall this once for each “row” of children you push.\nPushes a new element to the array.\nPushes a new item to the array.\nAdds a new null element to the array.\npushes a null value\nPush a new element that holds the invariants of the struct.\nSafety\nNeeds to be called when a valid value was extended to this …\nReserves additional slots to its capacity.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> slots.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> entries.\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nReserves <code>additional</code> elements and <code>additional_values</code> on the …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets position <code>index</code> to <code>value</code>. Note that if it is the first …\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of the keys of this <code>DictionaryArray</code>.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the validity of this array.\nSets the validity.\nSets the validity of this array.\nSets the values of this <code>BooleanArray</code>.\nSets values.\nUpdate the values of this <code>PrimitiveArray</code>.\nShrink the array to fit its length.\nShrinks the capacity of the <code>MutableBinaryValuesArray</code> to …\nShrinks the capacity of the <code>MutableBinaryArray</code> to fit its …\nShrinks the capacity of the <code>MutableBooleanArray</code> to fit its …\nShrinks the capacity of the <code>MutableDictionaryArray</code> to fit …\nShrinks the capacity of the <code>MutableFixedSizeBinaryArray</code> to …\nShrinks the capacity of the <code>MutableFixedSizeListArray</code> to …\nShrinks the capacity of the <code>MutableListArray</code> to fit its …\nShrinks the capacity of the <code>MutablePrimitiveArray</code> to fit …\nShrinks the capacity of the <code>MutableStructArray</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8Array</code> to fit its …\nShrinks the capacity of the <code>MutableUtf8ValuesArray</code> to fit …\nreturns the (fixed) size of the <code>MutableFixedSizeBinaryArray</code>…\nReturns the size\nReturns the size (number of elements per slot) of this …\nReturns the size (number of elements per slot) of this …\nSlices this <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nSlices the <code>Array</code>.\nSlices this <code>BinaryArray</code>.\nSlices this <code>BooleanArray</code>.\nSlices this <code>DictionaryArray</code>.\nSlices this <code>FixedSizeBinaryArray</code>.\nSlices this <code>FixedSizeListArray</code>.\nSlices this <code>ListArray</code>.\nReturns a slice of this <code>MapArray</code>.\nReturns a slice of the <code>NullArray</code>.\nSlices this <code>PrimitiveArray</code> by an offset and length.\nSlices this <code>StructArray</code>.\nReturns a slice of this <code>UnionArray</code>.\nSlices this <code>Utf8Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a slice of this <code>Array</code>.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns this array sliced.\nReturns a new <code>FixedSizeBinaryArray</code> with a different …\nChanges the arrays’ <code>DataType</code>, returning a new …\nReturns a new <code>PrimitiveArray</code> with a different logical type.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nConvert this array into <code>arrow_data::ArrayData</code>\nSame as <code>into_empty</code> but clones the inner value map instead …\nCreates an empty <code>MutableDictionaryArray</code> from a given empty …\nFallible version of <code>Extend::extend</code>.\nThis is infalible and is implemented for consistency with …\nThis is infalible and is implemented for consistency with …\nExpand this array, using elements from the underlying …\nTries to extend itself with elements from <code>other</code>, failing …\nReturns a new <code>MutableBinaryValuesArray</code> from an iterator.\nCreates a new <code>MutableFixedSizeBinaryArray</code> from an iterator …\nCreates a <code>FixedSizeBinaryArray</code> from an fallible iterator …\nReturns a new <code>MutableUtf8ValuesArray</code> from an iterator.\nReturns a new <code>DictionaryArray</code>.\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an fallible iterator of trusted …\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>BooleanArray</code> from a <code>TrustedLen</code>.\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an fallible iterator of trusted …\nCreates a <code>MutableBinaryArray</code> from an falible iterator of …\nCreates a <code>BinaryArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>BooleanArray</code> from an falible iterator of trusted …\nCreates a <code>MutablePrimitiveArray</code> from an fallible iterator …\nCreates a <code>MutableUtf8Array</code> from an falible iterator of …\nCreates a <code>Utf8Array</code> from an falible iterator of trusted …\nReturns a the inner <code>Field</code>\nReturns a <code>MutableBinaryValuesArray</code> created from its …\nReturns a <code>MutableBinaryArray</code> created from its internal …\nReturns a <code>BinaryArray</code> created from its internal …\nThe canonical method to create a <code>MutableBooleanArray</code> out …\nThe canonical method to create a <code>BooleanArray</code> out of …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>MutableFixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeBinaryArray</code>.\nCreates a new <code>FixedSizeListArray</code>.\nCreates a new <code>ListArray</code>.\nReturns a new <code>MapArray</code>.\nReturns a new <code>NullArray</code>.\nThe canonical method to create a <code>MutablePrimitiveArray</code> out …\nThe canonical method to create a <code>PrimitiveArray</code> out of its …\nCreate a <code>MutableStructArray</code> out of low-end APIs.\nReturns a new <code>StructArray</code>.\nReturns a new <code>UnionArray</code>.\nReturns a <code>MutableUtf8Array</code> created from its internal …\nReturns a <code>MutableUtf8ValuesArray</code> created from its internal …\nReturns a <code>Utf8Array</code> created from its internal …\nReturns a new <code>DictionaryArray</code>.\nCreates a new <code>Utf8Array</code> without checking for offsets …\nTries to push a new element.\nThis is infalible and is implemented for consistency with …\ntries to push a new entry to <code>MutableFixedSizeBinaryArray</code>.\nThis is infalible and is implemented for consistency with …\nNeeds to be called when a valid value was extended to this …\nNeeds to be called when a valid value was extended to this …\nThe types.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe optional validity.\nReturns the optional validity.\nThe optional validity. Equivalent to <code>self.keys().validity()</code>…\nThe optional validity.\nThe optional validity.\nThe optional validity.\nReturns the optional validity.\nThe optional validity.\nThe optional validity.\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the value at index <code>i</code>\nReturns the value of the <code>DictionaryArray</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns value at position <code>i</code>.\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code>.\nReturns the value at slot <code>i</code>.\nReturn the <code>i</code>th child array.\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the element at index <code>i</code>\nReturns the element at index <code>i</code> as bool\nReturns the element at index <code>i</code> as <code>&amp;[u8]</code>\nReturns the element at index <code>i</code> as &amp;str\nReturns the <code>Vec&lt;T&gt;</code> at position <code>i</code>.\nReturns the element at index <code>i</code> as &amp;str\nReturns the element at index <code>i</code>.\nReturns the value at index <code>i</code>. The value on null slots is …\nReturns the slot <code>index</code> as a <code>Scalar</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nReturns the value of the element at index <code>i</code>.\nReturns the value of the element at index <code>i</code>, ignoring the …\nThe values of the array\nreturns its values.\nreturns its values.\nReturns the values of this <code>BinaryArray</code>.\nReturns its values.\nThe values <code>Bitmap</code>. Values on null slots are undetermined …\nreturns a reference to the inner values.\nReturns the values of the <code>DictionaryArray</code>.\nReturns its values.\nReturns the values allocated on this <code>FixedSizeBinaryArray</code>.\nThe inner values\nReturns the inner array.\nThe values\nThe values.\nReturns its values.\nThe values <code>Buffer</code>. Values on null slots are undetermined …\nThe values\nReturns the values of this <code>StructArray</code>.\nreturns its values.\nreturns its values.\nReturns the values of this <code>Utf8Array</code>.\nReturns an iterator over the values of this array\nReturns an iterator of <code>&amp;[u8]</code> over every element of this …\nReturns an iterator over the values of this …\nReturns an iterator over the values of this <code>BooleanArray</code>.\nReturns an iterator of <code>Box&lt;dyn Scalar&gt;</code>\nReturns iterator over the values of <code>FixedSizeBinaryArray</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>T</code>\nReturns an iterator of the values, <code>&amp;T</code>, ignoring the arrays…\nReturns an iterator of <code>Box&lt;dyn Array&gt;</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator of <code>&amp;str</code>\nReturns an iterator over the the values [<code>V::IterValue</code>].\nReturns a mutable slice of values.\nReturns a mutable slice of values.\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nInitializes a new <code>MutableBinaryValuesArray</code> with a …\nInitializes a new <code>MutableBinaryArray</code> with a pre-allocated …\nCreates an new <code>MutableBooleanArray</code> with a capacity of …\nCreates a new <code>MutableFixedSizeBinaryArray</code> with capacity …\nCreates a new <code>MutableListArray</code> with a capacity.\nCreates a new <code>MutablePrimitiveArray</code> with a capacity.\nInitializes a new <code>MutableUtf8Array</code> with a pre-allocated …\nInitializes a new <code>MutableUtf8ValuesArray</code> with a …\nCreates a new <code>MutablePrimitiveArray</code> from a capacity and …\nClones this <code>Array</code> with a new new assigned bitmap.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this <code>DictionaryArray</code> with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns this array with a new validity.\nReturns a clone of this <code>BooleanArray</code> with new values.\nReturns this <code>PrimitiveArray</code> with new values.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCreates a new <code>GrowableBinary</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUnion</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableBoolean</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeBinary</code> bound to <code>arrays</code> with …\nCreates a new <code>GrowableNull</code>.\nCreates a new <code>GrowablePrimitive</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableMap</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableStruct</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableFixedSizeList</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableUtf8</code> bound to <code>arrays</code> with a …\nCreates a new <code>GrowableDictionary</code> bound to <code>arrays</code> with a …\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nReturns the byte slice of this <code>Bitmap</code>.\nReturns the slice of bytes of this <code>MutableBitmap</code>. Note …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nReturns the capacity of <code>MutableBitmap</code> in number of bits.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nReturns an iterator over bits in bit chunks <code>BitChunk</code>.\nEmpties the <code>MutableBitmap</code>.\nExtends <code>MutableBitmap</code> by <code>additional</code> values of constant …\nExtends the <code>MutableBitmap</code> from a <code>Bitmap</code>.\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends the <code>MutableBitmap</code> from a slice of bytes with …\nExtends <code>self</code> from a <code>TrustedLen</code> iterator.\nExtends <code>self</code> from an iterator of trusted len.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>arrow-rs</code> <code>NullBuffer</code>\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nInitializes a <code>MutableBitmap</code> with all values set to valid/ …\nInitializes a zeroed <code>MutableBitmap</code>.\nCreate a new <code>Bitmap</code> from an arrow <code>NullBuffer</code>\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from an iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a slice and length.\nAlias for <code>Bitmap::try_new().unwrap()</code> This function is <code>O(1)</code>\nInitializes a <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a length. …\nReturns whether the bit at position <code>i</code> is set.\nReturns whether the position <code>index</code> is set.\nReturns whether the bit at position <code>i</code> is set.\nUnsafely returns whether the bit at position <code>i</code> is set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nConverts this <code>Bitmap</code> to <code>MutableBitmap</code>, returning itself if …\nReturns whether <code>Bitmap</code> is empty\nReturns whether <code>MutableBitmap</code> is empty.\nReturns a new iterator of <code>bool</code> over this bitmap\nconstructs a new iterator over the bits of <code>MutableBitmap</code>.\nReturns the length of the <code>Bitmap</code>.\nReturns the length of the <code>MutableBitmap</code>.\nConverts this <code>Bitmap</code> into a <code>MutableBitmap</code>, cloning its …\nInitializes an empty <code>Bitmap</code>.\nCreates a new <code>IntoIter</code> from a <code>Bitmap</code>\nInitializes an empty <code>MutableBitmap</code>.\nInitializes an new <code>Bitmap</code> filled with set/unset values.\nInitializes an new <code>Bitmap</code> filled with set values.\nInitializes an new <code>Bitmap</code> filled with unset values.\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nCounts the nulls (unset bits) starting from <code>offset</code> bits …\nCompute bitwise OR operation\nPop the last bit from the <code>MutableBitmap</code>. Note if the …\nPushes a new bit to the <code>MutableBitmap</code>, re-sizing it if …\nPushes a new bit to the <code>MutableBitmap</code>\nApply a bitwise operation <code>op</code> to four inputs and return the …\nReserves <code>additional</code> bits in the <code>MutableBitmap</code>, potentially …\nSets the position <code>index</code> to <code>value</code>\nSets the position <code>index</code> to <code>value</code>\nShrinks the capacity of the <code>MutableBitmap</code> to fit its …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offsetting by <code>offset</code> and truncating up to …\nSlices <code>self</code>, offseting by <code>offset</code> and truncating up to …\nApply a bitwise operation <code>op</code> to three inputs and return …\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an iterator of booleans.\nCreates a new <code>Bitmap</code> from a fallible iterator of booleans.\nCreates a new <code>MutableBitmap</code> from an falible iterator of …\nInitializes a new <code>Bitmap</code> from vector of bytes and a length.\nInitializes a new <code>MutableBitmap</code> from a <code>Vec&lt;u8&gt;</code> and a …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nReturns the number of unset bits on this <code>Bitmap</code>.\nReturns the number of unset bits on this <code>MutableBitmap</code>.\nGeneral utilities for bitmaps representing items where LSB …\nInitializes a pre-allocated <code>MutableBitmap</code> with capacity …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether there are still elements in this iterator\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nReturns the number of chunks of this iterator\nCreates a new <code>BitChunksExact</code>.\nCreates a <code>BitChunks</code>.\nReturns a new <code>BitChunksExactMut</code>\nCreates a new <code>BitmapIter</code>.\nCreates a new <code>SlicesIterator</code>\nCreates a new <code>ZipValidityIter</code>.\nReturns a new <code>ZipValidity</code>\nReturns a new <code>ZipValidity</code> and drops the <code>validity</code> if all …\nThe remainder of the iterator.\nReturns the remaining <code>BitChunk</code>. It is zero iff <code>len / 8 == 0</code>…\nReturns the remainder <code>BitChunk</code>.\nThe remainder slice\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nReturns the remainder bits in <code>BitChunks::remainder</code>.\nThe length of the remainder slice in bits.\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nReturns the total number of slots. It corresponds to the …\nconvert itself into bytes.\nUnwrap into an iterator that has null values.\nUnwrap into an iterator that has no null values.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nReturns the byte slice stored in this buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>[Bitmap]</code> from its internal representation. This …\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns a mutable reference to its slice, if possible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns its internal representation\nReturns a mutable reference to its underlying <code>Vec</code>, if …\nReturns whether the buffer is empty.\nReturns whether underlying data is sliced. If sliced the …\nReturns the number of bytes in the buffer\nCreates an empty <code>Buffer</code>.\nReturns the offset of this buffer.\nSafety\nGet the strong count of underlying <code>Arc</code> data buffer.\nGet the weak count of underlying <code>Arc</code> data buffer.\nSlices this buffer starting at <code>offset</code>.\nSlices this buffer starting at <code>offset</code>.\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nReturns a new <code>Buffer</code> that is a slice of this buffer …\nA vector of trait objects of <code>Array</code> where every item has …\nreturns the <code>Array</code>s in <code>Chunk</code>\nreturns the <code>Array</code>s in <code>Chunk</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes <code>Chunk</code> into its underlying arrays. The arrays are …\nreturns whether the columns have any rows\nreturns the number of rows of every array\nCreates a new <code>Chunk</code>.\nCreates a new <code>Chunk</code>.\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nContains operators to filter arrays such as <code>filter</code>.\nDefines take kernel for <code>Array</code>\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nFunction that can filter arbitrary arrays\nReturns a prepared function optimized to filter multiple …\nFilters an Array, returning elements matching the filter …\nReturns a new Chunk with arrays containing only values …\nChecks if an array of type <code>datatype</code> can perform take …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nReturns the <code>Field</code>’s <code>DataType</code>.\nIts logical <code>DataType</code>\nWhether this physical type equals <code>PhysicalType::Primitive</code> …\nThe fields composing this schema.\nReturns a new <code>Schema</code> with a subset of all fields whose …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nsupport get extension for metadata\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the mode is dense\nIts nullability\nReturns whether the mode is sparse\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nCreates a new <code>Field</code>.\nConstructs a <code>UnionMode::Sparse</code> if the input bool is true, …\nReturns <code>&amp;self</code> for all but <code>DataType::Extension</code>. For …\nthe <code>PhysicalType</code> of this <code>DataType</code>.\nIf we have the only reference to <code>T</code> then unwrap it. …\nCreates a new <code>Field</code> with metadata.\nAttaches a <code>Metadata</code> to <code>Schema</code>\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nReturns the argument unchanged.\nWraps an external error in an <code>Error</code>.\nCalls <code>U::from(self)</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\ncreate an empty ArrowSchema\ncreates an empty <code>ArrowArray</code>, which can be used to import …\nCreates an empty <code>ArrowArrayStream</code> used to import from a …\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nReturns the field provided by the stream\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality to mmap in-memory data regions.\nAdvances this iterator by one array\nReturns a new <code>ArrowArrayStreamReader</code>\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this FileReader, returning the underlying reader\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nCheck if the stream is finished\nReturns the <code>FileMetadata</code>\nReturn the schema of the stream\nCreates a new <code>FileReader</code>. Use <code>projection</code> to only take …\nTry to create a new stream reader\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nReturn the schema of the file\nReturn the schema of the file\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nSet the inner memory scratches so they can be reused in a …\nThe total size of the file in bytes\nReturn the data inside this wrapper.\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nGet the Arrow columns in this record.\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nGet the IPC fields for this record.\nWrite continuation bytes, and mark the stream as done\nWrite footer and closing tag, then mark the writer as done\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the inner memory scratches so they can be reused in a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes itself, returning the inner writer.\nConsumes itself into the inner writer\nCreates a new <code>StreamWriter</code>\nCreates a new <code>FileWriter</code>.\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nSet the inner memory scratches so they can be reused in a …\nStarts the stream by writing a Schema message to it. Use …\nWrites the header and first (schema) message to the file.\nCreates a new <code>FileWriter</code> from an existing file, seeking to …\nCreates a new <code>FileWriter</code> and writes the header to <code>writer</code>\nWrites an <code>Array</code> to <code>arrow_data</code>\nWrites <code>Chunk</code> to the stream\nWrites <code>Chunk</code> to the file\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nReturns the byte slice stored in this buffer\nReturns the byte slice stored in this buffer\nReturns a reference to its internal <code>Buffer</code>.\nReturns the capacity of <code>Offsets</code>.\nExtends itself with <code>additional</code> elements equal to the last …\nReturns the first offset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Vec</code>.\nReturns the inner <code>Buffer</code>.")