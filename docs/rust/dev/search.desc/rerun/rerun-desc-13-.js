searchState.loadedDescShard("rerun", 13, "Returns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a slice\nReturns the current null buffer as a mutable slice\nReturns the current null buffer as a mutable slice\n<code>Field</code> name for map value\nReturns the length of the list\nReturns the child array builder as a mutable reference.\nReturns the child array builder as a mutable reference.\nReturns the value array builder of the map\nReturns the child array builder as an immutable reference\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current values buffer as a slice\nReturns the current dictionary values buffer as a slice\nReturns the current values buffer as a mutable slice\nReturns the current dictionary values buffer as a mutable …\nOverride the size of buffers to allocate for holding …\nCreates a new <code>GenericByteBuilder</code>.\nCreates a new <code>GenericByteViewBuilder</code> with space for …\nCreates a new boolean builder with space for <code>capacity</code> …\nCreates a new <code>FixedSizeBinaryBuilder</code>, <code>capacity</code> is the …\nCreates a new <code>FixedSizeListBuilder</code> from a given values …\nCreates a new <code>GenericListBuilder</code> from a given values array …\nCreates a new <code>MapBuilder</code> with capacity\nCreates a new null builder with space for <code>capacity</code> …\nCreates a new primitive array builder with capacity no of …\nCreates a new <code>PrimitiveDictionaryBuilder</code> with the provided …\nCreates a new <code>PrimitiveRunBuilder</code> with the provided …\nCreates a new <code>GenericByteDictionaryBuilder</code> with the …\nCreates a new <code>GenericByteRunBuilder</code> with the provided …\nCreates a new dense array builder with capacity.\nCreates a new sparse array builder  with capacity.\nBy default <code>PrimitiveBuilder</code> uses …\nDeduplicate strings while building the array\nOverride the field passed to <code>FixedSizeListArray::new</code>\nOverride the field passed to <code>GenericListArray::new</code>\nSet a fixed buffer size for variable length strings\nSets the precision and scale\nSets the timezone\nSets an optional timezone\nOverride the field passed to <code>MapBuilder::new</code>\nAn extension trait for <code>dyn Array</code> that provides ergonomic …\nDowncasts this to a <code>AnyDictionaryArray</code> panicking if not …\nDowncasts this to a <code>AnyDictionaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericBinaryArray</code> panicking if not …\nDowncast this to a <code>GenericBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BinaryViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>BooleanArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>BooleanArray</code> returning <code>None</code> if not …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteViewArray</code> returning <code>None</code> if …\nDowncast this to a <code>GenericByteArray</code> panicking if not …\nDowncast this to a <code>GenericByteArray</code> returning <code>None</code> if not …\nForce downcast of an Array, such as an ArrayRef to …\nDowncast this to a <code>DictionaryArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>DictionaryArray</code> returning <code>None</code> if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> panicking if not …\nDowncast this to a <code>FixedSizeBinaryArray</code> returning <code>None</code> if …\nDowncast this to a <code>FixedSizeListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>FixedSizeListArray</code> returning <code>None</code> if …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …\nDowncast this to a <code>GenericListArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericListArray</code> returning <code>None</code> if not …\nDowncast this to a <code>MapArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …\nDowncast this to a <code>MapArray</code> returning <code>None</code> if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …\nDowncast this to a <code>PrimitiveArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code>, to …\nDowncast this to a <code>PrimitiveArray</code> returning <code>None</code> if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> panicking if not …\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to …\nDowncast this to a <code>GenericStringArray</code> returning <code>None</code> if …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StringViewArray</code> returning <code>None</code> if not …\nDowncast this to a <code>StructArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …\nDowncast this to a <code>StructArray</code> returning <code>None</code> if not …\nDowncast this to a <code>UnionArray</code> panicking if not possible\nForce downcast of an <code>Array</code>, such as an <code>ArrayRef</code> to  …\nDowncast this to a <code>UnionArray</code> returning <code>None</code> if not …\nDowncasts a <code>dyn Array</code> to a concrete type\nABI-compatible struct for ArrowArray from C Data Interface …\nABI-compatible struct for <code>ArrowSchema</code> from C Data Interface\nReturns the buffer at the provided index\nReturns the child at the provided index\nReturns the child of this schema at <code>index</code>.\nReturns an iterator to the schema’s children.\nReturns the dictionary if any\nReturns the reference to the underlying dictionary of the …\nFor dictionary-encoded types, returns whether the ordering …\ncreate an empty <code>FFI_ArrowArray</code>, which can be used to …\nCreate an empty <code>FFI_ArrowSchema</code>\nExports an array to raw pointers of the C Data Interface …\nReturns the flags of this schema.\nReturns the format of this schema.\nReturns the argument unchanged.\nReturns the argument unchanged.\nImport ArrayData from the C Data Interface\nImport ArrayData from the C Data Interface\nTakes ownership of the pointed to <code>FFI_ArrowArray</code>\nTakes ownership of the pointed to <code>FFI_ArrowSchema</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwhether the array is empty\nWhether the array has been released\nthe length of the array\nFor map types, returns whether the keys within each map …\nReturns the metadata in the schema as <code>Key-Value</code> pairs\nReturns the name of this schema.\ncreates a new <code>FFI_ArrowArray</code> from existing data.\nthe null count of the array\nReturns if the field is semantically nullable, regardless …\nReturns the number of buffers\nReturns the number of children\nthe offset of the array\nExport to the C Data Interface\nSee CDataInterface docs\ncreate a new <code>FFI_ArrowSchema</code>. This fails if the fields’ …\nSet the flags of the schema\nAdd metadata to the schema\nSet the name of the schema\nA <code>RecordBatchReader</code> which imports Arrays from …\nABI-compatible struct for <code>ArrayStream</code> from C Stream …\nCreates a new empty FFI_ArrowArrayStream. Used to import …\nExports a record batch reader to raw pointer of the C …\nReturns the argument unchanged.\nReturns the argument unchanged.\nTakes ownership of the pointed to <code>FFI_ArrowArrayStream</code>\nCreates a new <code>ArrowArrayStreamReader</code> from a raw pointer of …\nC function to get the error from last operation on the …\nC function to get next array from the stream\nC function to get schema from the stream\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>FFI_ArrowArrayStream</code>.\nPrivate data used by the stream\nC function to release the stream\nCreates a new <code>ArrowArrayStreamReader</code> from a …\nAn iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nan iterator that returns Some(T) or None, that can be used …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nThe <code>RunArrayIter</code> provides an idiomatic way to iterate over …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new iterator\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of microseconds in a day\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of nanoseconds in a day\nNumber of seconds in a day\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDate</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveDateTime</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>DateTime&lt;Tz&gt;</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>Duration</code>\nConverts an <code>ArrowPrimitiveType</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveDateTime</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(ms)</code>\nconverts <code>NaiveTime</code> to a <code>i32</code> representing a <code>time32(s)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(ns)</code>\nconverts <code>NaiveTime</code> to a <code>i64</code> representing a <code>time64(us)</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(us)</code> to …\nAn Arrow <code>TimeZone</code>\nAn <code>Offset</code> for <code>Tz</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA subtype of primitive type that represents legal …\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nAn arrow binary array with i32 offsets\n<code>BinaryViewType</code> for string arrays\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nDefault values for <code>DataType</code>\n32-bit date type: the elapsed time since UNIX epoch in …\n64-bit date type: the elapsed time since UNIX epoch in …\nThe decimal type for a Decimal128Array\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\n16-bit floating point number type.\n32-bit floating point number type.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nSigned 16-bit integer type.\nSigned 32-bit integer type.\nSigned 64-bit integer type.\nA signed 8-bit integer type.\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\n32-bit “calendar” interval type: the number of whole …\nAn arrow binary array with i64 offsets\nAn arrow utf8 array with i64 offsets\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA subtype of primitive type that is used as run-ends index …\n<code>ByteViewType</code> for string arrays\nfn to create its <code>DataType</code>\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nUnsigned 16-bit integer type.\nUnsigned 32-bit integer type.\nUnsigned 64-bit integer type.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nAn arrow utf8 array with i32 offsets\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nFormats the decimal value with the provided precision and …\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nCreates a ArrowTimestampType::Native from the provided …\nNumber of milliseconds\nNumber of months\nNumber of nanoseconds\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nA slice-able <code>Buffer</code> containing bit-packed booleans\nBuffer represents a contiguous memory region that can be …\nA <code>MutableBuffer</code> is Arrow’s interface to build a <code>Buffer</code> …\nA <code>BooleanBuffer</code> used to encode validity for arrow arrays\nA non-empty buffer of monotonically increasing, positive …\nA slice-able buffer of monotonically increasing, positive …\nA strongly-typed <code>Buffer</code> supporting zero-copy cloning and …\nIncreases the offset of this buffer by <code>offset</code>\nReturns a mutable raw pointer to this buffer’s internal …\nReturns a pointer to the start of this buffer.\nReturns a raw pointer to this buffer’s internal memory …\nReturns the byte slice stored in this buffer\nReturns the data stored in this buffer as a slice.\nReturns the data stored in this buffer as a mutable slice.\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a <code>BitChunks</code> instance which can be used to iterate …\nReturns a slice of this buffer starting at a certain bit …\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to one input and return the …\nReturns the underlying <code>Buffer</code>\nApply a bitwise and to two inputs and return the result as …\nApply a bitwise and_not to two inputs and return the …\nApply a bitwise or to two inputs and return the result as …\nApply a bitwise xor to two inputs and return the result as …\nApply a bitwise not to one input and return the result as …\nReturns the capacity of this buffer. For externally owned …\nReturns the total capacity in this buffer. The invariant …\nClear all existing data from this buffer.\nInvokes <code>f</code> with values <code>0..len</code> collecting the boolean …\nInvokes <code>f</code> with indexes <code>0..len</code> collecting the boolean …\nReturns true if all nulls in <code>other</code> also exist in self\nReturns the number of 1-bits in this buffer.\nReturns the number of set bits in this buffer\nReturns the number of 1-bits in this buffer, starting from …\nReturns the pointer to the start of the buffer without the …\nReturns a new <code>NullBuffer</code> where each bit in the current …\nExtends this buffer from a slice of items that can be …\nExtends the buffer by <code>additional</code> bytes equal to <code>0u8</code>, …\nFreezes this buffer and return an immutable version of it.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAuxiliary method to create a new Buffer\nCreates a buffer from an existing memory region. Ownership …\nAllocates a new MutableBuffer with <code>len</code> and capacity to be …\nCreate a new <code>OffsetBuffer</code> from the iterator of slice …\nCreates a buffer from an existing aligned memory region …\nInitializes a Buffer from a slice of items.\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nCreates a <code>MutableBuffer</code> from a boolean <code>Iterator</code> with a …\nCreate a <code>Buffer</code> from the provided <code>Vec</code> without copying\nCreate a <code>MutableBuffer</code> from the provided <code>Vec</code> without …\nReturns the physical index at which the logical array ends\nPerforms a binary search to find the physical index for …\nReturns the physical index at which the logical array …\nReturns the inner <code>ScalarBuffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>Buffer</code>\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>Buffer</code>, consuming self\nReturns the inner <code>BooleanBuffer</code>\nReturns the inner <code>ScalarBuffer</code>, consuming self\nReturns <code>MutableBuffer</code> for mutating the buffer if this …\nReturns <code>Vec</code> for mutating the buffer\nReturns whether the buffer is empty.\nReturns whether this buffer is empty or not.\nReturns true if this <code>BooleanBuffer</code> is empty\nReturns true if this <code>NullBuffer</code> is empty\nReturns true if this buffer is empty\nReturns <code>true</code> if the value at <code>idx</code> is null\nReturns <code>true</code> if the bit at index <code>i</code> is set\nReturns <code>true</code> if the value at <code>idx</code> is not null\nReturns an iterator over the bits in this <code>BooleanBuffer</code>\nReturns an iterator over the bits in this <code>NullBuffer</code>\nReturns the number of bytes in the buffer\nReturns the length (the number of bytes written) in this …\nReturns the length of this <code>BooleanBuffer</code> in bits\nReturns the length of this <code>NullBuffer</code>\nReturns the logical length of the run-ends stored by this …\nReturns the maximum run-end encoded in the underlying …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nAllocate a new MutableBuffer with initial capacity to be …\nCreate a new <code>ScalarBuffer</code> from a <code>Buffer</code>, and an <code>offset</code> and …\nCreate a new <code>BooleanBuffer</code> from a <code>Buffer</code>, an <code>offset</code> and …\nCreate a new <code>NullBuffer</code> computing the null count\nCreate a new <code>RunEndBuffer</code> from a <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>OffsetBuffer</code> containing a single 0 value\ncreates a new MutableBuffer with capacity and length …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>OffsetBuffer</code> from the provided <code>ScalarBuffer</code>\nCreate a new <code>NullBuffer</code> with the provided <code>buffer</code> and …\nCreate a new <code>RunEndBuffer</code> from an <code>ScalarBuffer</code>, an <code>offset</code> …\nCreate a new <code>BooleanBuffer</code> of <code>length</code> where all values are …\nCreate a new <code>NullBuffer</code> of length <code>len</code> where all values are …\nCreate a new <code>OffsetBuffer</code> containing <code>len + 1</code> <code>0</code> values\nReturns the null count for this <code>NullBuffer</code>\nReturns the offset of this <code>BooleanBuffer</code> in bits\nReturns the offset of this <code>NullBuffer</code> in bits\nReturns the logical offset into the run-ends stored by …\nReturns true if this <code>OffsetBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>Buffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>ScalarBuffer</code> is equal to <code>other</code>, using …\nReturns true if this <code>BooleanBuffer</code> is equal to <code>other</code>, …\nReturns the offset, in bytes, of <code>Self::ptr</code> to <code>Self::data</code>\nExtends the buffer with a new item, increasing its …\nExtends the buffer with a new item, without checking for …\nEnsures that this buffer has at least <code>self.len + additional</code>…\nResizes the buffer, either truncating its contents (with …\nReturns an iterator over the set bit positions in this …\nSafety\nEnsure that <code>count</code> bytes from <code>start</code> contain zero bits\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nShrinks the capacity of the buffer as much as possible. …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nReturns a new Buffer that is a slice of this buffer …\nReturns a zero-copy slice of this buffer with length <code>len</code> …\nSlices this <code>BooleanBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>NullBuffer</code> by the provided <code>offset</code> and <code>length</code>\nSlices this <code>RunEndBuffer</code> by the provided <code>offset</code> and <code>length</code>\nReturns a new Buffer that is a slice of this buffer …\nReturns a <code>Buffer</code> containing the sliced contents of this …\nTruncates this buffer to <code>len</code> bytes\nCalls the provided closure for each index in this null …\nCreates a <code>Buffer</code> from an <code>Iterator</code> with a trusted (upper) …\nCreates a <code>MutableBuffer</code> from an <code>Iterator</code> with a trusted …\nView buffer as a slice of a specific type.\nView buffer as a immutable slice of a specific type.\nView this buffer as a mutable slice of a specific type.\nComputes the union of the nulls in two optional <code>NullBuffer</code>\nReturns a <code>BitIndexIterator</code> over the valid indices in this …\nReturns a <code>BitSliceIterator</code> yielding contiguous ranges of …\nReturns the packed validity of this <code>NullBuffer</code> not …\nReturns the boolean value at index <code>i</code>.\nReturns the boolean value at index <code>i</code>.\nReturns the packed values of this <code>BooleanBuffer</code> not …\nReturns the values of this <code>RunEndBuffer</code> not including any …\nSet the bits in the range of <code>[0, end)</code> to 0 (if <code>val</code> is …\nAllocate a new MutableBuffer with initial capacity to be …\nCastOptions provides a way to override the default cast …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nHour of the day, in range <code>0..=23</code>\nA lexicographical comparator that wraps given array data …\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nA computed set of partitions, see <code>partition</code>\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nA trait for Arrow String Arrays, currently three types are …\nOptions that define how <code>take</code> should behave\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nSet this sort options to sort in ascending order\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nConstruct the final <code>FilterPredicate</code>\nReturns a prepared function optimized to filter multiple …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nPerform bounds check before taking indices from values. If …\nlexicographically compare values at the wrapped columns …\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nPerform SQL <code>CONTAINS(left, right)</code>\nNumber of rows being selected based on this <code>FilterPredicate</code>\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nSet this sort options to sort in descending order\nWhether to sort in descending order\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nPerform SQL <code>ENDSWITH(left, right)</code>\nReturns a filtered <code>values</code> Array where the corresponding …\nSelects rows from <code>values</code> based on this <code>FilterPredicate</code>\nReturns a filtered RecordBatch where the corresponding …\nFormatting options when casting from temporal types to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nTakes elements by index from a list of <code>Array</code>, creating a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if all data within this string array is ASCII\nReturns true if this contains no partitions\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nConstructs a new iterator\nComputation kernels on Arrow Arrays\nReturns the number of partitions\nUse <code>partition</code> instead. Given a list of already sorted …\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nPerform SQL <code>left LIKE right</code>\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nPerform <code>left * right</code> operation on two decimal arrays. If …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nCreates a new iterator from a BooleanArray\nCreate a new <code>FilterBuilder</code> that can be used to construct a …\nCreate a new <code>SortOptions</code> struct\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nCopies original array, setting validity bit to false if a …\nSet this sort options to sort nulls first\nWhether to sort nulls first\nSet this sort options to sort nulls last\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nCompute an optimised representation of the provided <code>filter</code> …\nSort options for this column\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nIt’s unstable_sort, may not preserve the order of equal …\nGiven a list of lexicographically sorted columns, computes …\nRemove null values by do a bitmask AND operation with null …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nReturns the range of each partition\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nhow to handle cast failures, either return NULL …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nShifts array by defined number of items (to left or right) …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nPerform SQL <code>STARTSWITH(left, right)</code>\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nCreate a new lex comparator that will wrap the given sort …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nReturns the value of the target field when selected, or …\nParse the given string into a string representing …\nThe column to sort\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nSet this sort options to sort descending if argument is …\nSet this sort options to sort nulls first if argument is …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nDefines aggregations over Arrow arrays.\nKernels for operating on <code>PrimitiveArray</code>s\nModule contains bitwise operations on arrays\nDefines boolean kernels on Arrow <code>BooleanArray</code>’s, e.g. <code>AND</code>…\nCast kernels to convert <code>ArrayRef</code>  between supported …\nCast <code>array</code> to the provided data type and return a new …\n<code>Parser</code> implementations for converting strings to Arrow …\nComparison kernels for <code>Array</code>s.\nComparison kernels for <code>Array</code>s.\nDefines concat kernel for <code>ArrayRef</code>\nProvides utility functions for concatenation of elements …\nDefines filter kernels\nInterleave elements from multiple arrays\nDefines kernel for length of string arrays and binary …\nImplements the <code>nullif</code> function for Arrow arrays.\nDefines numeric arithmetic kernels on <code>PrimitiveArray</code>, such …\nDefines partition kernel for <code>ArrayRef</code>\nProvides <code>rank</code> function to assign a rank to each value in …\nDefines kernel to extract substrings based on a regular …\nDefines sort kernel for <code>ArrayRef</code>\nDefines kernel to extract a substring of an Array …\nDefines take kernel for Array\nDefines temporal kernels for time and date related …\nDefines union_extract kernel for UnionArray\nDefines windowing functions, like <code>shift</code>ing\nZip two arrays by some boolean mask. Where the mask …\nReturns the bitwise and of all non-null input values.\nReturns the bitwise or of all non-null input values.\nReturns the bitwise xor of all non-null input values.\nReturns true if all non-null input values are true, …\nReturns true if any non-null input value is true, …\nReturns the maximum value in the array, according to the …\nReturns the max of values in the array of <code>ArrowNumericType</code> …\nReturns the maximum value in the binary array, according …\nReturns the maximum value in the binary view array, …\nReturns the maximum value in the boolean array\nReturns the maximum value in the string array, according …\nReturns the maximum value in the string view array, …\nReturns the minimum value in the array, according to the …\nReturns the min of values in the array of <code>ArrowNumericType</code> …\nReturns the minimum value in the binary array, according …\nReturns the minimum value in the binary view array, …\nReturns the minimum value in the boolean array.\nReturns the minimum value in the string array, according …\nReturns the minimum value in the string view array, …\nReturns the sum of values in the primitive array.\nReturns the sum of values in the array.\nReturns the sum of values in the array.\nReturns the sum of values in the primitive array.\nAllies a binary infallable function to two <code>PrimitiveArray</code>s,\nApplies a binary and infallible function to values in two …\nApplies the provided fallible binary operation across <code>a</code> …\nApplies the provided fallible binary operation across <code>a</code> …\nSee <code>PrimitiveArray::try_unary</code>\nApplies a fallible unary function to an array with …\nSee <code>PrimitiveArray::try_unary_mut</code>\nSee <code>PrimitiveArray::unary</code>\nApplies an infallible unary function to an array with …\nSee <code>PrimitiveArray::unary_mut</code>\nPerform <code>left &amp; right</code> operation on two arrays. If either …\nPerform <code>left &amp; !right</code> operation on two arrays. If either …\nPerform bitwise <code>and</code> every value in an array with the …\nPerform <code>!array</code> operation on array. If array value is null …\nPerform <code>left | right</code> operation on two arrays. If either …\nPerform bitwise <code>or</code> every value in an array with the …\nPerform bitwise <code>left &lt;&lt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &lt;&lt; right</code> every value in an array with …\nPerform bitwise <code>left &gt;&gt; right</code> operation on two arrays. If …\nPerform bitwise <code>left &gt;&gt; right</code> every value in an array with …\nPerform <code>left ^ right</code> operation on two arrays. If either …\nPerform bitwise <code>xor</code> every value in an array with the …\nPerforms <code>AND</code> operation on two arrays. If either left or …\nLogical ‘and’ boolean values with Kleene logic\nPerforms <code>AND_NOT</code> operation on two arrays. If either left …\nReturns a non-null BooleanArray with whether each value of …\nReturns a non-null BooleanArray with whether each value of …\nPerforms unary <code>NOT</code> operation on an arrays. If value is …\nPerforms <code>OR</code> operation on two arrays. If either left or …\nLogical ‘or’ boolean values with Kleene logic\nCastOptions provides a way to override the default cast …\nReturn true if a value of type <code>from_type</code> can be cast into …\nCast <code>array</code> to the provided data type and return a new …\nTry to cast <code>array</code> to <code>to_type</code> if possible.\nFormatting options when casting from temporal types to …\nhow to handle cast failures, either return NULL …\nA Century\nA Day\nA Decade\nAn Hour\nConfig to parse interval strings\nRepresents the units of an interval, with each variant …\nA Microsecond\nA Millisecond\nA Minute\nA Month\nA tuple representing (months, days, nanoseconds) in an …\nA Nanosecond\nSpecialized parsing implementations to convert strings to …\nA Second\nA Week\nA Year\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new IntervalParseConfig with the given default …\nParse a string to the native type\nParse the string format decimal value to i128/i256 format …\nParse a string to the native type with a format string\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nParse human-readable interval string to Arrow …\nAccepts a string and parses it relative to the provided …\nAccepts a string in ISO8601 standard format and some …\nAccepts a string in RFC3339 / ISO8601 standard format and …\nCompares two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nComparing two <code>GenericByteViewArray</code> at index <code>left_idx</code> and …\nPerform <code>left IS DISTINCT FROM right</code> operation on two <code>Datum</code>\nPerform <code>left == right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &gt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt; right</code> operation on two <code>Datum</code>.\nPerform <code>left &lt;= right</code> operation on two <code>Datum</code>.\nPerform <code>left != right</code> operation on two <code>Datum</code>.\nPerform <code>left IS NOT DISTINCT FROM right</code> operation on two …\nA trait for Arrow String Arrays, currently three types are …\nPerform SQL <code>CONTAINS(left, right)</code>\nPerform SQL <code>ENDSWITH(left, right)</code>\nPerform SQL <code>left ILIKE right</code>\nChecks if a <code>GenericListArray</code> contains a value in the …\nChecks if a <code>GenericListArray</code> contains a value in the …\nReturns true if all data within this string array is ASCII\nConstructs a new iterator\nPerform SQL <code>left LIKE right</code>\nPerform SQL <code>left NOT ILIKE right</code>\nPerform SQL <code>left NOT LIKE right</code>\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>STARTSWITH(left, right)</code>\nConcatenate multiple Array of the same type into a single …\nConcatenates <code>batches</code> together into a single <code>RecordBatch</code>.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of a <code>GenericByteArray</code>…\nReturns the elementwise concatenation of <code>Array</code>s.\nReturns the elementwise concatenation of a …\nReturns the elementwise concatenation of <code>StringArray</code>.\nFunction that can filter arbitrary arrays\nA builder to construct <code>FilterPredicate</code>\nA filtering predicate that can be applied to an <code>Array</code>\nAn iterator of <code>(usize, usize)</code> each representing an interval\nReturns a prepared function optimized to filter multiple …\nReturns a filtered <code>values</code> Array where the corresponding …\nReturns a filtered RecordBatch where the corresponding …\nRemove null values by do a bitmask AND operation with null …\nTakes elements by index from a list of <code>Array</code>, creating a …\nReturns an array of Int32/Int64 denoting the number of …\nReturns an array of Int32/Int64 denoting the length of …\nCopies original array, setting validity bit to false if a …\nPerform <code>lhs + rhs</code>, returning an error on overflow\nPerform <code>lhs + rhs</code>, wrapping on overflow for …\nPerform <code>lhs / rhs</code>\nPerform <code>lhs * rhs</code>, returning an error on overflow\nPerform <code>lhs * rhs</code>, wrapping on overflow for …\nNegates each element of  <code>array</code>, returning an error on …\nNegates each element of  <code>array</code>, wrapping on overflow for …\nPerform <code>lhs % rhs</code>\nPerform <code>lhs - rhs</code>, returning an error on overflow\nPerform <code>lhs - rhs</code>, wrapping on overflow for …\nA computed set of partitions, see <code>partition</code>\nUse <code>partition</code> instead. Given a list of already sorted …\nGiven a list of lexicographically sorted columns, computes …\nAssigns a rank to each value in <code>array</code> based on its …\nReturn BooleanArray indicating which strings in an array …\nReturn BooleanArray indicating which strings in an array …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nPerform SQL <code>array ~ regex_array</code> operation on <code>StringArray</code> / …\nExtract all groups matched by a regular expression for a …\nA lexicographical comparator that wraps given array data …\nOne column to be used in lexicographical sort\nOptions that define the sort order of a given column\nWhether to sort in descending order\nSort a list of <code>ArrayRef</code> using <code>SortOptions</code> provided for …\nSort elements lexicographically from a list of <code>ArrayRef</code> …\nWhether to sort nulls first\nSort options for this column\nIt’s unstable_sort, may not preserve the order of equal …\nSort the <code>ArrayRef</code> using <code>SortOptions</code>.\nSort the <code>ArrayRef</code> partially.\nSort elements from <code>ArrayRef</code> into an unsigned integer (…\nThe column to sort\nReturns an <code>ArrayRef</code> with substrings of all the elements in …\nSubstrings based on character index\nOptions that define how <code>take</code> should behave\nPerform bounds check before taking indices from values. If …\nTake elements by index from Array, creating a new Array …\nFor each ArrayRef in the <code>Vec&lt;ArrayRef&gt;</code>, take elements by …\nTake rows by index from <code>RecordBatch</code> and returns a new …\nValid parts to extract from date/time/timestamp arrays.\nDay of the month, in range <code>1..=31</code>\nDay of the week, in range <code>0..=6</code>, where Monday is <code>0</code>\nDay of the week, in range <code>0..=6</code>, where Sunday is <code>0</code>\nDay of year, in range <code>1..=366</code>\nHour of the day, in range <code>0..=23</code>\nMicrosecond of the second\nMillisecond of the second\nMinute of the hour, in range <code>0..=59</code>\nMonth in the year, in range <code>1..=12</code>\nNanosecond of the second\nQuarter of the year, in range <code>1..=4</code>\nSecond of the minute, in range <code>0..=59</code>\nISO week of the year, in range <code>1..=53</code>\nCalendar year\nGiven an array, return a new array with the extracted …\nExtracts the day of a given temporal primitive array as an …\nExtracts the day of a given temporal array as an array of …\nExtracts the day of year of a given temporal primitive …\nExtracts the day of year of a given temporal array as an …\nExtracts the hours of a given temporal primitive array as …\nExtracts the hours of a given array as an array of …\nExtracts the microseconds of a given temporal primitive …\nExtracts the microseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the milliseconds of a given temporal primitive …\nExtracts the minutes of a given temporal primitive array …\nExtracts the minutes of a given temporal array as an array …\nExtracts the month of a given temporal primitive array as …\nExtracts the month of a given temporal array as an array …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the nanoseconds of a given temporal primitive …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the day of week of a given temporal primitive …\nExtracts the day of week of a given temporal array as an …\nExtracts the quarter of a given temporal primitive array …\nExtracts the quarter of a given temporal array as an array …\nExtracts the seconds of a given temporal primitive array …\nExtracts the seconds of a given temporal array as an array …\nParse the given string into a string representing …\nExtracts the week of a given temporal primitive array as …\nExtracts the week of a given temporal array as an array of …\nExtracts the years of a given temporal primitive array as …\nExtracts the years of a given temporal array as an array …\nReturns the value of the target field when selected, or …\nShifts array by defined number of items (to left or right) …\nZip two arrays by some boolean mask. Where the mask …\nA subtype of primitive type that represents legal …\nTrait expressing a Rust type that has the same in-memory …\nTrait for <code>ArrowNativeType</code> that adds checked and unchecked …\nA subtype of primitive type that represents numeric values.\nTrait for primitive values.\nA subtype of primitive type that represents temporal …\nA timestamp type allows us to create array builders that …\nWidth of the type\nOpaque binary data of variable length.\nAn arrow binary array with i32 offsets\nOpaque binary data of variable length.\n<code>BinaryViewType</code> for string arrays\nA boolean datatype representing the values <code>true</code> and <code>false</code>.\nA boolean datatype\nA trait over the variable-size byte array types\nA trait over the variable length bytes view array types\nthe corresponding Arrow data type of this primitive type.\nDatatype of array elements\nDatatype of array elements\nThe corresponding Arrow data type\nThe maximum precision for DataType::Decimal128 values\nThe maximum scale for DataType::Decimal128 values\nThe maximum precision for DataType::Decimal256 values\nThe maximum scale for DataType::Decimal256 values\nThe default scale for DataType::Decimal128 and …\nDefault values for <code>DataType</code>\nDatatypes supported by this implementation of Apache Arrow.\nA signed 32-bit date representing the elapsed time since …\n32-bit date type: the elapsed time since UNIX epoch in …\nA signed 64-bit date representing the elapsed time since …\n64-bit date type: the elapsed time since UNIX epoch in …\nIndicates the number of elapsed days and milliseconds, …\nExact 128-bit width decimal value with precision and scale\nThe decimal type for a Decimal128Array\nExact 256-bit width decimal value with precision and scale\nThe decimal type for a Decimal256Array\nA trait over the decimal types, used by <code>PrimitiveArray</code> to …\nDense union layout\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time in either seconds, milliseconds, …\nElapsed time type: microseconds.\nElapsed time type: milliseconds.\nElapsed time type: nanoseconds.\nElapsed time type: seconds.\nDescribes a single column in a <code>Schema</code>.\nA reference counted <code>Field</code>\nA cheaply cloneable, owned slice of <code>FieldRef</code>\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some logical data type with fixed length.\nA 16-bit floating point number.\n16-bit floating point number type.\nA 32-bit floating point number.\n32-bit floating point number type.\nA 64-bit floating point number.\n64-bit floating point number type.\n<code>ByteArrayType</code> for binary arrays\n<code>ByteArrayType</code> for string arrays\nIf element in array is utf8 encoded string.\nA signed 16-bit integer.\nSigned 16-bit integer type.\nA signed 32-bit integer.\nSigned 32-bit integer type.\nA signed 64-bit integer.\nSigned 64-bit integer type.\nA signed 8-bit integer.\nA signed 8-bit integer type.\nA “calendar” interval which models types that don’t …\nValue of an IntervalDayTime array\n“Calendar” interval type: days and milliseconds. See …\nValue of an IntervalMonthDayNano array\n“Calendar” interval type: months, days, and …\nYEAR_MONTH, DAY_TIME, MONTH_DAY_NANO interval in SQL style.\n32-bit “calendar” interval type: the number of whole …\nOpaque binary data of variable length and 64-bit offsets.\nAn arrow binary array with i64 offsets\nA list of some logical data type with variable length and …\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nA variable-length string in Unicode with UFT-8 encoding …\nAn arrow utf8 array with i64 offsets\nA list of some logical data type with variable length.\n(NOT YET FULLY SUPPORTED)  A list of some logical data …\nThe maximum value that can be represented by this integer …\nThe maximum value that can be represented\nThe maximum value that can be represented\n<code>MAX_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the maximum <code>i128</code> …\nMaximum number of significant digits\nMaximum no of digits after the decimal point (note the …\nThe maximum value and identity for the <code>min</code> aggregation. …\nThe minimum value that can be represented by this integer …\nThe minimum value that can be represented\nThe minimum value that can be represented\nThe multiplicative inverse for this integer type, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\nThe multiplicative inverse, i.e. <code>-1</code>.\n<code>MIN_DECIMAL_FOR_EACH_PRECISION[p-1]</code> holds the minimum <code>i128</code> …\nThe minimum value and identity for the <code>max</code> aggregation. …\nA Map is a logical nested type that is represented as\nTime in microseconds.\nTime in milliseconds.\nA triple of the number of elapsed months, days, and …\nTime in nanoseconds.\nCorresponding Rust native type for the primitive type.\nType for representing its equivalent rust type i.e …\nType for representing its equivalent rust type i.e …\nNull type\nThe multiplicative identity for this integer type, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity, i.e. <code>1</code>.\nThe multiplicative identity\nType of offset i.e i32/i64\nType for owned corresponding to <code>Native</code>\n“Decimal128” or “Decimal256”, for use in error …\n“Binary” or “String”, for use in error messages\n“Binary” or “String”, for use in displayed or …\nA run-end encoding (REE) is a variation of run-length …\nA subtype of primitive type that is used as run-ends index …\nDescribes the meta-data of an ordered sequence of relative …\nA builder to facilitate building a <code>Schema</code> from iteratively …\nA reference-counted reference to a <code>Schema</code>.\nTime in seconds.\nSparse union layout\n<code>ByteViewType</code> for string arrays\nA nested datatype that contains a number of sub-fields.\nfn to create its <code>DataType</code>\nA signed 32-bit time representing the elapsed time since …\n32-bit time type: the elapsed time since midnight in …\n32-bit time type: the elapsed time since midnight in …\nA signed 64-bit time representing the elapsed time since …\n64-bit time type: the elapsed time since midnight in …\n64-bit time type: the elapsed time since midnight in …\nAn absolute length of time in seconds, milliseconds, …\nA timestamp with an optional timezone.\nTimestamp microsecond type with an optional timezone.\nTimestamp millisecond type with an optional timezone.\nTimestamp nanosecond type with an optional timezone.\nTimestamp second type with an optional timezone.\nAllows conversion from supported Arrow types to a byte …\nAn unsigned 16-bit integer.\nUnsigned 16-bit integer type.\nAn unsigned 32-bit integer.\nUnsigned 32-bit integer type.\nAn unsigned 64-bit integer.\nUnsigned 64-bit integer type.\nAn unsigned 8-bit integer.\nUnsigned 8-bit integer type.\nThe <code>TimeUnit</code> of this timestamp.\nA nested datatype that can represent slots of differing …\nA cheaply cloneable, owned collection of <code>FieldRef</code> and …\nSparse or Dense union layouts\nA variable-length string in Unicode with UTF-8 encoding.\nAn arrow utf8 array with i32 offsets\nA variable-length string in Unicode with UTF-8 encoding\nIndicates the number of elapsed whole months, stored as …\nThe additive identity for this integer type, i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity i.e. <code>0</code>.\nThe additive identity\nChecked addition operation\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow …\nAdds the given IntervalDayTimeType to an arrow Date32Type\nAdds the given IntervalDayTimeType to an arrow Date64Type\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nAdds the given IntervalMonthDayNanoType to an arrow …\nWrapping addition operation\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow …\nAdds the given IntervalYearMonthType to an arrow Date32Type\nAdds the given IntervalYearMonthType to an arrow Date64Type\nReturns a vector with references to all fields (including …\nWraps this <code>i256</code> into an <code>i128</code>\nConvert to usize according to the <code>as</code> operator\nComputes the absolute value of this i256 returning <code>None</code> if …\nComputes the absolute value\nComputes the absolute value\nPerforms checked addition\nPerforms checked addition\nPerforms checked addition\nPerforms checked division\nPerforms checked division\nPerforms checked division\nPerforms checked multiplication\nPerforms checked multiplication\nPerforms checked multiplication\nNegates this i256 returning <code>None</code> if <code>Self == Self::MIN</code>\nNegates the value\nNegates the value\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked exponentiation\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked remainder\nPerforms checked subtraction\nPerforms checked subtraction\nPerforms checked subtraction\nLook up a column by name and return a immutable reference …\nCompare operation\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> field. …\nCheck to see if <code>self</code> is a superset of <code>other</code>\nCheck to see if <code>self</code> is a superset of <code>other</code> schema.\nReturns an immutable reference to the <code>Field</code>’s  <code>DataType</code>.\nNumber of days\nNumber of days\nReturns a default value of this primitive type.\nReturns the dictionary ID, if this is a dictionary type.\nReturns whether this <code>Field</code>’s dictionary is ordered, if …\nChecked division operation\nWrapping division operation\nReturns a new empty <code>Fields</code>\nCreate a new <code>UnionFields</code> with no fields\nCreates an empty <code>Schema</code>\nCompares the datatype with another, ignoring nested field …\nReturns an immutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns a mutable reference to the <code>FieldRef</code> at index <code>idx</code>\nReturns an immutable reference of a specific <code>Field</code> …\nReturns an immutable reference of the vector of <code>Field</code> …\nA sequence of fields that describe the schema.\nReturns a vector of immutable references to all <code>Field</code> …\nReturns a copy of this <code>Fields</code> containing only those …\nSearches for a field by name, returning it along with its …\nConsume this <code>SchemaBuilder</code> yielding the final <code>Schema</code>\nReturns a vector with references to all fields (including …\nFormats the decimal value with the provided precision and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an integer value from its representation as a byte …\nCreate an optional i256 from the provided <code>f64</code>. Returning …\nConvert native type from i128.\nCreate an <code>i256</code> value from a 128-bit value.\nConvert native type from i32.\nConvert native type from i64.\nCreate an integer value from its representation as a byte …\nConverts a chrono::NaiveDate into an arrow Date32Type\nConverts a chrono::NaiveDate into an arrow Date64Type\nCreate an i256 from the provided low u128 and high i128\nCreate an integer value from its representation as string.\nConvert native integer type from usize\nReturns the byte width of this native type.\nReturns the byte width of this primitive type.\nReturns the <code>TimeUnit</code> of this timestamp.\nA signed 256-bit integer\nFind the index of the column with the given name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this type is valid as a dictionary key\nReturns <code>true</code> if this is empty\nEquality operation\nReturns true if this type is floating: (Float*).\nGreater than equals operation\nGreater than operation\nReturns true if this type is integer: (Int*, UInt*).\nLess than equals operation\nLess than operation\nNot equal operation\nReturns <code>true</code> if this <code>i256</code> is negative\nReturns true if this type is nested (List, FixedSizeList, …\nReturns true if this type is DataType::Null.\nIndicates whether this <code>Field</code> supports null values.\nReturns true if this type is numeric: (UInt*, Int*, Float*…\nReturns <code>true</code> if this <code>i256</code> is positive\nReturns true if the type is primitive: (numeric, temporal).\nReturns true if this type is valid for run-ends array in …\nReturns true if this type is signed integer: (Int*).\nReturns true if this type is temporal: (Date*, Time*, …\nReturns true if this type is unsigned integer: (UInt*).\nDetermines whether <code>value</code> contains no more than <code>precision</code> …\nDetermines whether the specified <code>i256</code> value can be properly\nDetermines whether the specified <code>i128</code> value can be properly\nReturns true if zero else false\nReturns an iterator over the fields and type ids in this …\nReturns the number of fields in this <code>UnionFields</code>\nCreates a ArrowTimestampType::Native from the provided …\nCreates a IntervalYearMonthType::Native\nCreates a IntervalDayTimeType::Native\nCreates a IntervalMonthDayNanoType::Native\nReturns the immutable reference to the <code>Field</code>’s optional …\nReturns an immutable reference to the Map of custom …\nReturns an immutable reference to the Map of custom …\nA map of key-value pairs containing additional meta data.\nReturns a mutable reference to the Map of custom metadata …\nNumber of milliseconds\nChecked remainder operation\nWrapping remainder operation\nNumber of months\nChecked multiplication operation\nWrapping multiplication operation\nReturns an immutable reference to the <code>Field</code>’s name.\nNumber of nanoseconds\nChecked negation operation\nWrapping negation operation\nCreates a new field with the given name, type, and …\nCreate a new <code>UnionFields</code> from a <code>Fields</code> and array of …\nCreates a new empty <code>SchemaBuilder</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values.\nCreate a new <code>IntervalMonthDayNano</code>\nCreate a new <code>IntervalDayTime</code>\nCreates a new field that has additional dictionary …\nCreate a new <code>Field</code> with <code>DataType::Dictionary</code>\nCreate a <code>DataType::FixedSizeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::FixedSizeList</code>\nCreate a <code>DataType::LargeList</code> with elements of the …\nCreate a new <code>Field</code> with <code>DataType::LargeList</code>\nCreate a <code>DataType::List</code> with elements of the specified type\nCreate a new <code>Field</code> with <code>DataType::List</code>\nCreates a new <code>Field</code> suitable for <code>DataType::List</code> and …\nCreate a new <code>Field</code> with <code>DataType::Map</code>\nCreate a new <code>Field</code> with <code>DataType::Struct</code>\nCreate a new <code>Field</code> with <code>DataType::Union</code>\nCreates a new <code>Schema</code> from a sequence of <code>Field</code> values and …\nChecked exponentiation operation\nWrapping exponentiation operation\nReturns the byte width of this type if it is a primitive …\nReturns a new schema with only the specified columns in …\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> without checking …\nRemoves and returns the <code>FieldRef</code> as index <code>idx</code>\nReverse the fileds\nSets the <code>Field</code>’s optional custom metadata.\nReturns a number <code>i256</code> representing sign of this <code>i256</code>.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nReturn size of this instance in bytes.\nChecked subtraction operation\nWrapping subtraction operation\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtract the given IntervalDayTimeType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtract the given IntervalMonthDayNanoType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtracts the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nSubtract the given IntervalYearMonthType to an arrow …\nReturn the memory representation of this integer as a byte …\nConverts this instance into a byte slice\nConverts this <code>i256</code> into an <code>i128</code> returning <code>None</code> if this …\nConvert native type to i64.\nConvert native type to isize.\nReturn the memory representation of this integer as a byte …\nTurns a IntervalYearMonthType type into an i32 of months.\nConverts an arrow Date32Type into a chrono::NaiveDate\nConverts an arrow Date64Type into a chrono::NaiveDate\nReturns this <code>i256</code> as a low u128 and high i128\nTurns a IntervalDayTimeType into a tuple of (days, …\nTurns a IntervalMonthDayNanoType into a tuple of (months, …\nConvert native type to usize.\nReturns a copy of this <code>Fields</code> containing only those …\nSee CDataInterface docs\nMerge this field into self if it is compatible.\nAppends a <code>FieldRef</code> to this <code>SchemaBuilder</code> checking for …\nMerge schema into self if it is compatible. Struct fields …\nConvert from usize according to the <code>as</code> operator\nVerifies that every consecutive pair of <code>offsets</code> denotes a …\nVerifies that the provided buffers are valid for this …\nValidates that the specified <code>i256</code> of value can be properly …\nValidates that the specified <code>i128</code> value can be properly …\nValidates that <code>value</code> contains no more than <code>precision</code> …\nValidate that <code>precision</code> and <code>scale</code> are valid for <code>T</code>\nCreates a new empty <code>SchemaBuilder</code> with space for <code>capacity</code> …\nSet <code>DataType</code> of the <code>Field</code> and returns self.\nSets the metadata of this <code>Field</code> to be <code>metadata</code> and returns …\nSets the metadata of this <code>Schema</code> to be <code>metadata</code> and …\nSet the name of the <code>Field</code> and returns self.\nSet <code>nullable</code> of the <code>Field</code> and returns self.\nComputes the absolute value of this i256\nComputes the absolute value\nComputes the absolute value\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping addition\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping division\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nPerforms wrapping multiplication\nNegates this i256\nNegates the value\nNegates the value\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping exponentiation\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping remainder\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nPerforms wrapping subtraction\nError when an arithmetic operation overflows.\nMany different operations in the <code>arrow</code> crate return this …\nError during import or export to/from the C Data Interface\nError during casting from one type to another.\nError during computation.\nError during CSV-related operations.\nError when a dictionary key is bigger than the key type\nError during division by zero.\nContains the error value\nWraps an external error.\nError indicating that an unexpected or bad argument was …\nError during IO operations.\nError during IPC operations in <code>arrow-ipc</code> or <code>arrow-flight</code>.\nError during JSON-related operations.\nMemory or buffer error.\nReturned when functionality is not yet available.\nContains the success value\nError during Parquet operations.\nError during parsing from a string.\nA specialized <code>Result</code> type for Arrow operations.\nError when the run end index in a REE array is bigger than …\nError during schema-related operations.\nReturns the argument unchanged.\nWraps an external error in an <code>ArrowError</code>.\nCalls <code>U::from(self)</code>.\nA Rust type representing an exception defined in Python …\nTrait for converting Python objects to arrow-rs types.\nConvert an arrow-rs type into a PyArrow object.\nRepresents an exception raised by PyArrow.\nA newtype wrapper for types implementing <code>FromPyArrow</code> or …\nCreate a new PyArrow object from a arrow-rs type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a Python object to an arrow-rs type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the implemented type into a Python object while …\nCreates a new <code>PyErr</code> of this type.\nConvert the implemented type into a Python object without …\nA two-dimensional batch of column-oriented data with a …\nGeneric implementation of RecordBatchReader that wraps an …\nOptions that control the behaviour used when creating a …\nTrait for types that can read <code>RecordBatch</code>’s.\nTrait for types that can write <code>RecordBatch</code>’s.\nWrite footer or termination data, then mark the writer as …\nGet a reference to a column’s array by index.\nGet a reference to a column’s array by name.\nGet a reference to all columns in the record batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the total number of bytes of memory occupied …\nGet a reference to a column’s array by name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMatch field names of structs and lists. If set to <code>true</code>, …\nCreate a new RecordBatchIterator.\nCreates a new <code>RecordBatchOptions</code>\nCreates a new empty <code>RecordBatch</code>.\nReads the next <code>RecordBatch</code>.\nReturns the number of columns in the record batch.\nReturns the number of rows in each column.\nProjects the schema onto the specified columns\nRemove column by index and return it.\nOptional row count, useful for specifying a row count for …\nReturns the schema of this <code>RecordBatchReader</code>.\nReturns the <code>Schema</code> of the record batch.\nReturns a reference to the <code>Schema</code> of the record batch.\nReturn a new RecordBatch where each column is sliced …\nCreate a <code>RecordBatch</code> from an iterable list of pairs of the …\nCreate a <code>RecordBatch</code> from an iterable list of tuples of the\nCreates a <code>RecordBatch</code> from a schema and columns.\nCreates a <code>RecordBatch</code> from a schema and columns, with …\nSets the match_field_names of RecordBatchOptions and …\nSets the row_count of RecordBatchOptions and returns self\nOverride the schema of this <code>RecordBatch</code>\nWrite a single batch to the writer.\nOwned version of a <code>Row</code> that can be moved/cloned freely.\nA comparable representation of a row.\nConverts <code>ArrayRef</code> columns into a row-oriented format.\nA <code>RowParser</code> can be created from a <code>RowConverter</code> and used to …\nA row-oriented representation of arrow data, that is …\nAn iterator over <code>Rows</code>\nConfigure the data type and sort order for a given column\nConvert <code>ArrayRef</code> columns appending to an existing <code>Rows</code>\nSets the length of this <code>Rows</code> to 0\nConvert <code>ArrayRef</code> columns into <code>Rows</code>\nConvert <code>Rows</code> columns into <code>ArrayRef</code>\nThe row’s bytes, with the lifetime of the underlying …\nReturns an empty <code>Rows</code> with capacity for <code>row_capacity</code> rows …\nEncode dictionary values not preserving the dictionary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Rows instance from the given binary data.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the <code>Row</code> in this <code>Rows</code>\nCreate a new <code>RowConverter</code> with the provided schema\nCreate a new column with the given data type\nCreate a new column with the given data type and …\nReturns the number of <code>Row</code> in this <code>Rows</code>\nCreate owned version of the row to detach it from the …\nCreates a <code>Row</code> from the provided <code>bytes</code>.\nReturns a <code>RowParser</code> that can be used to parse <code>Row</code> from …\nAppend a <code>Row</code> to this <code>Rows</code>\nReturns the row at index <code>row</code>\nGet borrowed <code>Row</code> from owned version.\nReturns the row at <code>index</code> without bounds checking\nReturns the size of this instance in bytes\nReturn size of this instance in bytes.\nReturns the size of this instance in bytes\nCheck if the given fields are supported by the row format.\nCreate a BinaryArray from the Rows data without …\nTensor of type BooleanType\nTensor of type Int8Type\nTensor of type Int16Type\nTensor of type Decimal128Type\nTensor of type Decimal256Type\nTensor of type DurationMicrosecondType\nTensor of type DurationMillisecondType\nTensor of type DurationNanosecondType\nTensor of type DurationSecondType\nTensor of type Float16Type\nTensor of type Float32Type\nTensor of type Float64Type\nTensor of type Int16Type\nTensor of type Int32Type\nTensor of type Int64Type\nTensor of type Int8Type\nTensor of type IntervalDayTimeType\nTensor of type IntervalMonthDayNanoType\nTensor of type IntervalYearMonthType\nTensor of primitive types\nTensor of type Time32MillisecondType\nTensor of type Time32SecondType\nTensor of type Time64MicrosecondType\nTensor of type Time64NanosecondType\nTensor of type TimestampMicrosecondType\nTensor of type TimestampMillisecondType\nTensor of type TimestampNanosecondType\nTensor of type TimestampSecondType\nTensor of type UInt16Type\nTensor of type UInt32Type\nTensor of type UInt64Type\nTensor of type UInt8Type\nReturns a reference to the underlying <code>Buffer</code>\nThe data type of the <code>Tensor</code>\nThe name of dimension i\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIndicates if the memory layout column major\nIndicates if the data is laid out contiguously in memory\nIndicates if the memory layout row major\nThe names of the dimensions\nThe number of dimensions\nCreates a new Tensor using column major memory layout\nCreates a new Tensor using row major memory layout\nThe sizes of the dimensions\nThe total number of elements in the <code>Tensor</code>\nThe number of bytes between elements in each dimension\nCreates a new <code>Tensor</code>\nTypes for iterating over bitmasks in 64-bit chunks\nTypes for iterating over packed bitmasks\nUtils for working with packed bit masks\nUtils for working with bits\nFunctions for printing array values as human-readable …\nString Writer This string writer encapsulates …\nIterator over chunks of 64 bits represented as an u64\nIterates over an arbitrarily aligned byte buffer\nIterates over an arbitrarily aligned byte buffer\nIterator over an <code>UnalignedBitChunk</code>\nReturns the number of chunks\nReturns reference to the chunks\nCounts the number of ones\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator over the chunks\nReturns an iterator over chunks of 64 bits represented as …\nReturns an iterator over chunks of 64 bits, with the …\nReturns the number of leading padding bits\nCreate a from a byte array, and and an offset and length …\nCreate a new <code>BitChunks</code> from a byte array, and an offset …\nReturns the prefix, if any\nReturns the bitmask of remaining bits\nReturns the number of remaining bits, guaranteed to be …\nReturns the suffix, if any\nReturns the number of trailing padding bits\nAn iterator of <code>usize</code> whose index in a provided bitmask is …\nIterator over the bits within a packed bitmask\nIterator of contiguous ranges of set bits within a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BitIterator</code> from the provided <code>buffer</code>, and …\nCreate a new <code>BitSliceIterator</code> from the provided <code>buffer</code>, …\nCreate a new <code>BitIndexIterator</code> from the provide <code>buffer</code>, and …\nCalls the provided closure for each index in the provided …\nUtil function to set bits in a slice of bytes.\nReturns the ceil of <code>value</code>/<code>divisor</code>\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns the nearest number that is <code>&gt;=</code> than <code>num</code> and is a …\nReturns the nearest multiple of <code>factor</code> that is <code>&gt;=</code> than <code>num</code>…\nSets bit at position <code>i</code> for <code>data</code> to 1\nSets bit at position <code>i</code> for <code>data</code>\nSets bit at position <code>i</code> for <code>data</code> to 0\nSets bit at position <code>i</code> for <code>data</code> to 0\nA string formatter for an <code>Array</code>\nFormat for displaying durations\nOptions for formatting arrays\nISO 8601 - <code>P198DT72932.972880S</code>\nA human readable representation - …\nImplements <code>Display</code> for a specific array value\nGet the value at the given row in an array as a String.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts numeric type to a <code>String</code>\nCreates a new set of format options\nReturns an <code>ArrayFormatter</code> that can be used to format <code>array</code>\nFallibly converts this to a string\nReturns a <code>ValueFormatter</code> that implements <code>Display</code> for the …\nOverrides the format used for <code>DataType::Date32</code> columns\nOverrides the format used for <code>DataType::Date64</code> columns\nIf set to <code>true</code> any formatting errors will be written to …\nOverrides the format used for duration columns\nOverrides the string used to represent a null\nOverrides the format used for <code>DataType::Time32</code> and …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nOverrides the format used for <code>DataType::Timestamp</code> columns …\nWrites this value to the provided <code>Write</code>\nA writer that allows writing to a <code>String</code> like an …\nExecutes the given command directly.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>StringWriter</code>\nQueues the given command for further execution.\nPerforms a set of actions within a synchronous update.\nAll ones.\nWe give an actual name to <code>Tuid</code>, and inject that name into …\nAll zeroes.\nReturns the argument unchanged.\nConstruct a <code>Tuid</code> from the upper and lower halves of a …\nReturns the total size of <code>self</code> on the heap, in bytes.\nThe increment part of the <code>Tuid</code>.\nReturns the <code>n</code>-next logical <code>Tuid</code>.\nCalls <code>U::from(self)</code>.\nApproximate nanoseconds since unix epoch.\nCreate a new unique <code>Tuid</code> based on the current time.\nReturns the next logical <code>Tuid</code>.\nA shortened string representation of the <code>Tuid</code>.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nIf true, we hide the native window decoration (the top bar …\nA token representing a color in the global color table.\nExtension trait for <code>egui::Context</code>.\nThe look and feel of the UI.\nIf true, we fill the entire window, except for the …\nA hue for a <code>ColorToken</code>.\nNewtype over <code>egui::Key</code> which provides a <code>Display</code> …\nThe style of a label.\nNewtype over <code>egui::Modifiers</code> which provides a <code>Display</code> …\nNewtype over <code>egui::PointerButton</code> which provides a <code>Display</code> …\nIf true, we show the native window decorations/chrome with …\nRegular style for a label.\nA color scale for a <code>ColorToken</code>.\nA collapsible section header, with support for optional …\nAll the commands we support.\nInterface for sending <code>UICommand</code> messages.\nRerun custom extensions to <code>egui::Ui</code>.\nLabel displaying the placeholder text for a yet unnamed …\nApply the Rerun design tokens to the given egui context …\nFor the streams view (time panel)\nDraw a bullet (for text lists).\nSet the button to be shown in the header.\nCenter the content within <code>egui::Ui::max_rect()</code>.\nReplacement for <code>egui::CollapsingHeader</code> that respect our …\nLayout area to allocate for the collapsing triangle.\nGet the <code>egui::Color32</code> corresponding to the provided …\nSet the default open state of the section header.\nReturn a reference to the global design tokens structure.\nHelpers for drag and drop support for reordering …\nDraws a shadow into the given rect with the shadow …\nA drop-down menu with a list of options.\nStroke used to indicate that a UI element is a container …\nShows an error label with the entire error text and copies …\nText colored to indicate an error.\nShows a small error label with the given text on hover and …\nAdd e.g. “ (Ctrl+F11)“ as a suffix\nReturn the keyboard shortcut for this command, nicely …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the current full-span scope.\nUse the provided range as full span for the nested content.\nCreate a separator similar to <code>egui::Separator</code> but with the …\nWorkaround for putting a label into a grid at the top left …\nHeight of the top bar\nSet the help markdown tooltip to be shown in the header.\nSet the help text tooltip to be shown in the header.\nSet the help UI closure to be shown in the header.\nHovered UI and spatial primitives should have this outline.\nHuman readable unique id\nExtra horizontal space in the top left corner to make room …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll keyboard shortcuts, with the primary first.\nSecond-generation list item.\nConvenience function to create a <code>list_item::ListItem</code>.\nConvenience to create a non-interactive, collapsible …\nConvenience for adding a flat non-interactive …\nPopup similar to <code>egui::popup_below_widget</code> but suitable for …\nLoad design tokens from <code>data/design_tokens.json</code>.\nThe color we use to mean “loop all the data”\nThe color we use to mean “loop this selection”\nShow some markdown\nConditionally collapsing header.\nShow this command as a menu-button.\nShow some close/maximize/minimize buttons for the native …\nCreate a new <code>Self</code>.\nPaint a collapsing triangle in the Rerun’s style.\nPaints a time cursor for indicating the time on a time …\nPaint a watermark\nStatic title bar used to separate panels into section.\nStatic title bar used to separate panels into section with …\nHelper for adding a list-item hyperlink.\nConvenience function to create a …\nThe color for the background of …\nStyle <code>egui::Ui::selectable_value</code>s and friends into a …\nTwo-column grid to be used in selection view.\nSelected UI and spatial primitives should have this …\nDisplay the header.\nShow the command palette, if it is visible.\nAdds a non-interactive, optionally tinted small icon.\nShows a success label with a large border.\nText colored to indicate success.\nText format used for regular body.\nText format used for labels referring to keys and buttons.\nUsed by the “add view or container” modal.\nHeight of the title row in the blueprint view and …\nA toast notification system for egui, roughly based on …\nBinary toggle switch.\nHeight of the top-most bar.\nMargin on all sides of views.\nShows a warning label with a large border.\nText colored to indicate a warning.\nA small, self-container pan-and-zoom area for <code>egui</code>.\nContainer item.\nDrop target information, including where to draw the drop …\nContext information about the hovered item.\nLeaf item.\nRoot container item.\nCompute the geometry of the drag cursor and where the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the item being hovered during drag\nY coordinate for drag target indicator\nRange of X coordinates for the drag target indicator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat kind of item is this?\nID of the container just before this item within the …\nDestination container ID\nDestination position within the container\n<code>&gt;</code>\nUsed for HTTP URLs that lead out of the app.\nLink within the viewer\nHuman readable unique id\nThe content needs at least this width for display, but …\nSimple <code>ListItemContent</code> to easily display a button in a …\nContext provided to <code>ListItemContent</code> implementations\n<code>ListItemContent</code> that delegates to a closure.\n<code>ListItemContent</code> that displays the content rect.\nThe content needs exactly this width for display.\nAn <code>super::ItemButton</code> that acts as an action button.\nA button that can be used by a list item.\nAn <code>super::ItemButton</code> that acts as a popup menu.\n<code>ListItemContent</code> that displays a simple label with optional …\nLayout information prepared by <code>list_item_scope</code> to be used …\nContent-generic list item.\n<code>ListItemContent</code> to display property-like, two-column …\nResponses returned by …\nHelper to add an <code>super::ItemActionButton</code> to the right of …\nHelper to add an enabled/disabled <code>super::ItemActionButton</code> …\nAlways show the buttons.\nBackground area\nResponse from the body, if it was displayed.\nAdd a right-aligned <code>super::ItemButton</code>.\nThe desired width of the content.\nSets text shown when the button is disabled and hovered.\nSets text shown when the button is disabled and hovered.\nMake the item draggable.\nHighlight the item as the current drop target.\nSets whether the button is enabled.\nSets enable/disable state of the button.\nSets enable/disable state of the button.\nOverride the background color for the item.\nOverride the hovered state even if the item is not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the hover text of the button.\nSets text shown when the button hovered.\nSets text shown when the button hovered.\nCan the user click and interact with it?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender text in italic.\nResponse from the item itself.\nStyle the label for an unnamed items.\nLayout information to use for rendering.\nThe current list item.\nCreate a scope in which <code>[ListItem]</code>s can be created.\nHelper to add a <code>super::ItemMenuButton</code> to the right of the …\nSet the minimum desired for the content.\nSet the minimum desired width for the entire content.\nCreate a new <code>ListItem</code> with the given label.\nCalled when the button is clicked.\n0.0 if fully closed, 1.0 if fully open, and something …\nArea available for the content to draw in.\nRegister the desired width of the left column.\nIndicate whether right-aligned space should be reserved …\nList item response.\nSet the selected state of the item.\nDraw the item as part of a flat list.\nDraw the item as a leaf node from a hierarchical list.\nDraw the item as a non-leaf node from a hierarchical list.\nDraw the item with unindented child content.\nDisplay value only for leaf or collapsed items.\nSet the subdued state of the item.\nShould we truncate text if it is too long?\nUI for everything that is after the indent and the …\nDraw the button.\nShow a read-only boolean in the value column.\nShow an editable boolean in the value column.\nShow a read-only color in the value column.\nShow an editable color in the value column.\nProvide a closure to draw the content of the right column.\nShow a static text in the value column.\nShow an editable text in the value column.\nSet the weak state of the item.\nProvide a closure to display on-hover buttons on the right …\nSet the item height.\nProvide an <code>Icon</code> to be displayed on the left of the item.\nProvide an <code>Icon</code> to be displayed on the left of the label.\nProvide a custom closure to draw an icon on the left of …\nProvide a custom closure to draw an icon on the left of …\nHelper object to handle a <code>ModalWrapper</code> window.\nShow a modal window with Rerun style using <code>egui::Modal</code>.\nResponse returned by <code>ModalWrapper::ui</code>.\nSet the default height of the modal window.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConfigure the content area of the modal for full span …\nWhat the content closure returned if it was actually run.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the minimum height of the modal window.\nSet the minimum width of the modal window.\nCreate a new modal with the given title.\nOpen the model the next time the <code>ModalHandler::ui</code> method …\nWhether the modal should remain open.\nEnclose the contents in a scroll area.\nShow the modal window.\nDraw the modal window, creating/destroying it as required.\nFormats an instance number enclosed in square brackets: …\nEasily build syntax-highlighted text.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds a new toast\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShows and updates all toasts\nThis can be used to show or hide the toast type icon.\nTime to live in seconds.\nCreates a transformation that fits a given scene rectangle …\nProvides a zoom-pan area for a given view.\nThe payload type is acceptable and could successfully be …\nMake this the active application.\nIf this is a recording, switch to it.\nWe are looping the entire recording.\nSelect a specific application, to see which recordings and …\nGlobal options for the viewer.\nList of entities that are <em>applicable</em> to a given visualizer.\nSelection and hover state.\nA unique id for a type of Blueprint contents.\nThe stream tree from the blueprint debug time panel\nBlueprint tree from the blueprint panel (left panel)\nWe store the entire edit history of a blueprint in its …\nA cache for memoizing things in order to speed up …\nDoes memoization of different objects for the immediate …\nReset the <code>Blueprint</code> to the default state\nClear the blueprint and generate a new one\nClear everything that came from this source, and close the …\nHandles interfacing with the OS clipboard.\nClose all stores and show the welcome screen again.\nClose this app and all its recordings.\nClose a recording or blueprint (free its memory).\nThe various kinds of items that may be represented and for …\nThe various scopes for which we want to track collapsed …\nA collapsed identifier.\nColormap together with the range of image values that is …\nReceiver for the <code>CommandSender</code>\nSender that queues up the execution of commands.\nError type for a fallback request.\nProvides fallback values for components, implemented …\nResult for a fallback request to a provider.\nThe fallback provider is not able to handle the given …\nA component of an entity from the chunk store.\nHow to display components in a Ui.\nSpecifies which UI callbacks are available for a component.\nA viewport container.\nThe dragged content is made only of <code>Contents</code>.\nThe name of a <code>Contents</code>.\nThe screenshot will be copied to the clipboard.\nThe result of executing a single data query for a specific …\nThis is the primary mechanism through which data is passed …\nAn entity or instance in the context of a view’s data …\nIdentifier for a <code>DataResultNode</code>\nA single node in the <code>DataResultTree</code>\nA hierarchical tree of <code>DataResult</code>s\nA place where data comes from, e.g. the path to a .rrd or …\nDisplay the component in a read-only way.\nHelper to handle drag-and-drop operations.\nDrop a specific entity from a store.\nShow a timeline of the blueprint data.\nThe dragged content is made of entities.\nAdd a task, run on a background thread, that saves …\nFollow the latest available data\nGive this view lots of space. Used for spatial views …\nHover highlight, sorted from weakest to strongest.\nApply hover highlight, does <em>not</em> exclude a selection …\nTrait for naming/identifying <code>crate::VisualizerSystem</code>s &amp; …\nThe payload type is irrelevant to me.\nCaches the results of decoding …\nRepresents the contents of an <code>Image</code>, <code>SegmentationImage</code> or …\nStats about an image.\nList of entities that match the indicator components of a …\nAn entity or instance from the chunk store.\nCombination of selection &amp; hover highlight which can occur …\nThe dragged content is made of a collection of <code>Item</code>s we do …\nOne “thing” in the UI.\nAn ordered collection of <code>Item</code> and optional associated …\nContext information that a view might attach to an item …\nUse latest-at semantics.\nDisplay a short summary. Used in lists.\nLoad some data.\nThis view can share space with others\nAll different\nA reference to a value that is <em>maybe</em> mutable.\nEdit the component over multiple <code>re_ui::list_item::ListItem</code>…\nThis <code>Contents</code> has been given a name by the user.\nNo selection highlight at all.\nNo hover highlight.\nLooping is off.\nPath to a specific entity in a specific store used for …\nTime doesn’t move\nThis <code>Contents</code> is unnamed and should be displayed with this …\nTime move steadily\nInformation about a view that is published each frame by …\nContext for a latest-at query in a specific view.\nRange &amp; type of chunk store query.\nProperties of a view that as recommended to be spawned by …\nUI config for the current recording (found in <code>EntityDb</code>).\nThe payload type is correct, but it’s content cannot be …\nReset the <code>Viewer</code> to the default state\nMany <code>ResolvedAnnotationInfo</code>, with optimization for a …\nAll the same\nThe screenshot will be saved to disk.\nInfo given to egui when taking a screenshot.\nWhere to put the screenshot.\nShould apply selection highlight (i.e. the exact selection …\nWe are looping within the current loop selection.\nSelection highlight, sorted from weakest to strongest.\nDisplay everything as wide as available, without height …\nArrow serialization failed.\nSet the active timeline for the given recording.\nSets the focus to the given item.\nSet the item selection.\nA closely related object is selected, should apply similar …\nEdit the component in a single <code>re_ui::list_item::ListItem</code> …\nThe current Blueprint and Recording being displayed by the …\nInterface for accessing all blueprints and recordings\nA recording (or blueprint)\nStream tree from the time panel\nCommands used by internal system components\nInterface for sending <code>SystemCommand</code> messages.\nOutput of view system execution.\nStats about a tensor or image.\nCaches tensor stats using a <code>RowId</code>, i.e. a specific …\nHovering/Selecting in a 3D space.\nControls the global view and progress of the time.\nDrag value widget for editing time values for both …\nUse a time range on the currently active timeline.\nThe time range we are currently zoomed in on.\nDisplay as much information as possible in a compact way. …\nHovering/Selecting in a 2D space.\nProvides a fallback value for a given component with known …\nSpecifies the context in which the UI is used and the …\nNot directly returned by the fallback provider, but useful …\nUpdate the blueprint with additional data\nA fallback value was successfully provided.\nCaches meshes based on media type &amp; row id.\nA viwport view.\nDefines a class of view without any concrete types making …\nRegistry of all known view types.\nThe context associated with a view.\nView context that can be used by view parts and ui methods …\nHighlights of a specific entity path in a specific view.\nHighlights in a specific view.\nUsed to publish info aboutr each view.\nHeuristics for spawning views of a given class.\nUnserialized frame to frame state of a view.\nState for the <code>View</code>s that persists across frames but …\nUnique name for a system within a given <code>crate::ViewClass</code>.\nUtility for registering view systems, passed on to …\nCommon things needed by many parts of the viewer.\nList of entities that can be visualized at some point in …\nContext object returned by …\nAdditional filter for applicability on top of the default …\nElement of a scene derived from a single archetype query.\nWhat is the active blueprint for the active application?\nDirectly access the <code>Caches</code> for the active recording.\nThe current loop range, iff selection looping is turned on.\nDirectly access the <code>EntityDb</code> for the active recording.\nDirectly access the <code>EntityDb</code> for the active recording.\nAdds a new highlight to the entity highlight, combining it …\nAdd a new outline mask to this entity path, combining it …\nAdds a new view class.\nAdds a new hover highlight to the entity highlight, …\nRegisters how to show a given component in the UI.\nRegisters how to view, and maybe edit, a given component …\nAdds a new selection highlight to the entity highlight, …\nRegisters how to view, and maybe edit, a given component …\nGet a flags value with all known bits set.\nThe <code>app_id</code> of the current recording.\nGlobal options for the whole viewer.\nAdditional filter for applicability.\nFor each visualizer, return the set of entities that is …\nMapping from class and system to entities for the store\nArchetype name in which context the component is needed.\nChecks if items are draggable based on the list of …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nConverts itself to a mutable reference of <code>Any</code>, which …\nConverts itself to a reference of <code>std::any::Any</code>, which …\nReturns the mutable reference, if possible.\nCalled once per frame to potentially flush the cache.\nCall once per frame to potentially flush the cache(s).\nSee <code>re_viewer_context::Cache::begin_frame</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current active blueprint.\nOptional archetype of the View’s blueprint properties.\nUI config for the current blueprint.\nThe active blueprint.\nThe active blueprint.\nThe <code>StorageEngine</code> for the active blueprint.\nDisable garbage collection of the blueprint.\nThe blueprint query used for resolving blueprint in this …\nThe timepoint to use when writing an update to the …\nThe timepoint to use when writing an update to the …\nThe image data, row-wise, with stride=width.\nThe row id that contained the blob.\nAll the loaded recordings and blueprints.\nThings that need caching and are shared across the whole …\nPath to the directory suitable for storing cache data.\nThings that need caching.\nChoose the default visualizers to enable for this entity.\nClear the currently active blueprint\nCloned blueprints are the ones the user has edited, i.e. …\nClears a component in the blueprint store by logging an …\nClears a component in the blueprint store by logging an …\nClear the current default blueprint\nRemove all open recordings and applications, and go to the …\nAfter calling this, there is no way to redo what was once …\nClears the current selection out.\nClose this application and all its recordings.\nReturns <code>ColorModel::L</code> for depth and segmentation images.\nCreates a new command channel.\nInterface for sending commands back to the app\nReturns all the component sets that the system is …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nLatest-at results for all component defaults in this view.\nReturns from which entity path an override originates from.\nHow to display components.\nCreate a <code>CollapsedId</code> for a container in this scope.\nWhether all set bits in a source flags value are also set …\nReturns true if the exact selection is part of the current …\nThe style to use for displaying this view name in the UI.\nExecuted context systems, may hold state that the ui …\nThe current time query, based on the current time control.\nThe current time query, based on the current time control.\nQuery for latest value at the currently selected time on …\nOptionally retrieves a chunk store reference from the …\nShow data while respecting the given UI layout.\nCreate a <code>CollapsedId</code> for a data result in this scope.\nThe default blueprint (i.e. the one logged from code), if …\nDefault cache directory\nDefault latest-at query\nDefault query range for this view.\nDetermines the set of visible entities for a given view.\nThe intersection of a source flags value with the …\nUser-facing name of this view class.\nReturns the user-facing name for the given view class.\nDowncasts this state to a mutable reference of a concrete …\nDowncasts this state to a reference of a concrete type.\nHelper object to manage drag-and-drop operations.\nDraw data gathered during execution of the view part …\nThe <code>egui::Context</code>.\nConvert to an <code>egui::Id</code>.\nGet a flags value with all bits unset.\nCreate a <code>CollapsedId</code> for an entity in this scope.\nMutable access to a <code>EntityDb</code> by id\nWhere to retrieve the data from.\nAccesses a cache for reading and writing.\nDecode some image data and cache the result.\nThe key should be the <code>RowId</code> of the <code>TensorData</code>. NOTE: …\nRead in some video data and cache the result.\nQueries the chunk store and performs data conversions to …\nQueries the chunk store and performs data conversions to …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nExtend the selection with more items.\nExtend the selection with the provided items.\nAdditional UI displayed in the tab title bar, between the …\nProvides a fallback value for a given component, first …\nReturns the fallback provider for this visualizer.\nFilters a set of applicable entities (entities that have …\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nLike <code>range</code>, but ignoring all <code>NaN</code>/inf values.\nThe first selected object if any.\nItem that got focused on the last frame if any.\nDescribes the format of <code>Self::buffer</code>.\nplayback fps\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe full range of times for the current timeline\nQueries a View type by class name and logs if it fails, …\nGet the value of the element at the given index.\nBridge to <code>re_renderer</code>\nConsistently handle the selection, hover, drag start …\nPrecomputed hash of the string.\nHelp text describing how to interact with this view in the …\nRange with special highlight.\nHover/select highlighting information for this view.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nReturns the currently hovered objects.\nThe store hub, which keeps track of all the default and …\nIcon used to identify this view class.\nDetermines the icon to use for a given container kind.\nUnique name for a system within a given <code>crate::ViewClass</code>.\nIdentifier string of this view class.\nImplements the <code>ComponentFallbackProvider</code> trait for a given …\nInclude the “Welcome screen” application in the …\nFor each visualizer, the set of entities that have at …\nFor each visualizer, the set of entities that have at …\nThese are not required, but if <em>any</em> of these are found, it …\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert a new recording or blueprint into the <code>StoreHub</code>.\nInspect the blueprint timeline.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFor each item in this selection, if it refers to the first …\nIs the given blueprint id the active blueprint for any app …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nCheck if the selection is empty.\nReturns true if the current component’s value was …\nShorthand for checking for interactivity on data overrides.\nCheck the collapsed state for the given <code>CollapsedId</code>.\nDo we have a lot of vertical space?\nShould the UI fit on one line?\nIs the current time in the selection range (if any), or at …\nShorthand for checking for visibility on data overrides.\nYield a set of contained flags values.\nReturns an iterator over the items and their selected …\nIterates over all <code>DataResult</code>s of the <code>ViewQuery</code>.\nIterates over all entities of the <code>ViewQuery</code>.\nReturns a mutable iterator over the items and their …\nYield a set of contained named flags values.\nIterates over all registered View class types, sorted by …\nIter over all of the currently visible <code>DataResult</code>s for a …\nIterate over all visualizer data that can be downcast to …\nColor, Depth, or Segmentation?\nShow a label while respecting the given UI layout.\nThe time on the timeline we’re currently at.\nControls how likely this view will get a large tile in the …\nReturns the number of items in the selection.\nFor each passed <code>EntityPath</code>, walk up the tree and find the …\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResultNode</code> in the tree based on an <code>EntityPath</code>…\nLook up a <code>DataResultNode</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on its handle.\nLook up a <code>DataResult</code> in the tree based on an <code>EntityPath</code>.\nThe selected slice of time that is called the “loop …\nMapbox API key (used to enable Mapbox-based map view …\nPicks the stronger selection &amp; hover highlight from two …\nReturn the maximum time set for this drag value.\nWhere start of the range.\nReturn the minimum time set for this drag value.\nFast access to an <code>Arc</code> sharing the same <code>Annotations::missing</code>…\nShow a multi-line editor for this instance of this …\nName of the screenshot (e.g. view name), excluding file …\nHuman-readable name of the view.\nCreate a <code>DragAndDropManager</code> by providing a list of …\nCreate a new <code>StoreHub</code>.\nCalled once for every new view instance of this class.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe number of entities that matched the query, including …\nOf the matched queries, the number of entities that are …\nHow far back in time can we undo?\nCalled at the start of each frame\nCalled once upon registration of the class\nReact to the chunk store’s changelog, if needed.\nReact to the chunk store’s changelog, if needed.\nDisplay the currently dragged payload as a pill in the UI.\nAll <code>DataResult</code>s that are queried by active visualizers.\nReturns a placeholder value for a given component, solely …\nPreferred aspect ratio for the ui tiles of this view.\nThe accumulated property overrides for this <code>DataResult</code>.\nRemove any empty <code>EntityDb</code>s from the hub\nCall <code>EntityDb::purge_fraction_of_ram</code> on every recording\nAttempt to free up memory.\nAttempt to free up memory.\nReturns the list of components that the system <em>queries</em>.\nQuery which didn’t yield a result for the component at …\nReturns the query range for this data result.\nWhat range is queried on the chunk store.\nAll the query results for this frame.\nThe range of values, ignoring <code>NaN</code>s.\nThe range of values, ignoring <code>NaN</code>s.\nAllowed range for value.\nQueries a raw component from the default blueprint.\nGet a read-only <code>StoreContext</code> from the <code>StoreHub</code> if one is …\nUI config for the current recording (found in <code>EntityDb</code>).\nHash together with the View class id to the …\nDetermines a suitable origin given the provided set of …\nThe active recording.\nThe active recording.\nThe current active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StorageEngine</code> for the active recording.\nThe <code>StoreId</code> of the active recording.\nThe <code>StoreId</code> of the active recording.\nWhere on screen (in ui coords).\n<code>EntityPath</code> in the Blueprint store where updated overrides …\nReceive a <code>SystemCommand</code> to be executed if any is queued.\nReceive a <code>UICommand</code> to be executed if any is queued.\nIf set, everything after this time is in “redo-space” …\nRuntime info about components and archetypes.\nRegisters a new <code>ViewContextSystem</code> type for a view class …\nRegisters a new <code>VisualizerSystem</code> type for a view class …\nQueries which UI types are registered for a component.\nThe intersection of a source flags value with the …\nRemoves a view class from the registry.\nRemove the current loop selection.\nRemove any recordings with a network source pointing at …\nThe global <code>re_renderer</code> context, holds on to all GPU …\nReturns the minimal set of components that the system …\nResets a blueprint component to the value it had in the …\nThe range of time we are currently zoomed in on.\nAn alternative store and entity path to use for the …\nRetains elements that fulfill a certain condition.\nReplace “dangerous” characters by a safe one.\nPersist any in-use blueprints to durable storage.\nHelper to save a component to the blueprint store.\nSave some bytes to disk, after first showing a save dialog.\nSaves a recursive override OR clears both (!) individual &amp; …\nMake sure the selected timeline is a valid one\nReturns the current selection.\nReturns the current selection.\nReturns the current selection.\nSelection &amp; hovering state.\nUi shown when the user selects a view of this class.\nSend a command to be executed.\nSend a command to be executed.\nShow a sequence drag value widget.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nActivate a recording by its <code>StoreId</code>.\nChange the active <code>ApplicationId</code>\nChange the active/visible recording id.\nMake blueprint active for a given <code>ApplicationId</code>\nChange which blueprint is the default for a given …\nSet the feedback to display to the user based on drop …\nplayback fps\nSet the hovered objects. Will be in <code>Self::hovered_items</code> on …\nSet the current loop selection without enabling looping.\nSet the collapsed state for the given <code>CollapsedId</code>.\nSet the collapsed state for the given item in every …\nSets several objects to be selected, updating history as …\nplayback speed\nThe range of time we are currently zoomed in on.\nShow milliseconds, RAM usage, etc.\nDisplays an overlay for debugging picking.\nCheck if the selection contains a single item and returns …\nShow a single-line editor for this instance of this …\nThe root of the space in which context the query happens.\nDetermines which views should be spawned by default for …\nplayback speed\nPopulate a <code>StoreHubStats</code> based on the active app.\nAll the loaded recordings and blueprints.\nThe current view of the store\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nControls whether the visible time range UI should be …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBuild an egui table and configure it for the given UI …\nWhere to put the screenshot.\nTarget entity path which is lacking the component and …\nShow a temporal drag value widget.\nUsed only for tests\nThe current time.\nThe current time of the time panel, how fast it is moving, …\nThe current time.\nThe current time.\nHow much time the full view covers.\nThe time type of the currently selected timeline\nThe range of time we are currently zoomed in on.\nWhat time zone to display timestamps in.\nThe currently selected timeline\nThe timeline we’re on.\nBest-effort.\nConvert this image to an encoded PNG\nSee <code>Self::to_dynamic_image</code>.\nCast the buffer to the given type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nSelect passed objects unless already selected in which …\nThe <code>DataResultTree</code> for the query\nIf true, this path is not actually included in the query …\nTries to provide a fallback value for a given component.\nTries to show a UI for editing a component.\nDraws the ui for this view class and handles ui events.\nShow a UI for a component instance.\nShow a UI for a single raw component.\nWhat portion of the UI to take a screenshot of (in ui …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMove the time forward (if playing), and perhaps pause if we…\nUpdates the internal applicability filter state based on …\nCustom path to the FFmpeg binary.\nPreferred method for video decoding on web.\nOverride the path to the FFmpeg binary.\nGet the video decoder settings.\nCreate a <code>CollapsedId</code> for a view in this scope.\nRegistry of all known classes of views.\nThe view context, if available.\nThe id of the space in which context the query happens.\nThe view state of the view in which the query is executed.\nExecuted view systems, may hold state that the ui method …\nDepth-first traversal of the tree, calling <code>visitor</code> on each …\nCreate context object that is passed to all of this …\nInformation about which components are queried by the …\nWhich <code>ViewSystems</code>s to pass the <code>DataResult</code> to.\nApp ID used as a marker to display the welcome screen.\nGet access to the thread-local <code>Clipboard</code>.\nCorresponding 2D spaces and pixel coordinates (with …\nWhere in this 2D space (+ depth)?\nThe point in 3D space that is hovered, if any.\nThe 3D space with the camera(s)\nPath to an entity that is currently tracked by the …\nGet a valid, finite range for the gpu to use.\n<code>colormap</code> is currently only used for depth images.\nRender the given image, respecting the clip rectangle of …\nDetermines if and how the shader needs to decode the image.\nReturn whether a tensor should be assumed to be encoded in …\nCreates a <code>ImageDataDesc</code> for creating a texture from an …\nLoad a blueprint from persisted storage, e.g. disk. …\nHow to save and load blueprints\nSave a blueprint to persisted storage, e.g. disk.\nValidate a blueprint against the current blueprint schema …\nInterface for accessing all blueprints and recordings\nConvenient information used for <code>MemoryPanel</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")