searchState.loadedDescShard("rerun", 0, "Rerun - Visualize streams of multimodal data.\nRefer to all instances in a batch.\nAll features disabled.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Datatype</strong>: Angle in radians.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nThe user-chosen name of the application doing the logging.\nAn archetype is a high-level construct that represents a …\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nE.g. too many values (overflows i32).\nE.g. too many values (overflows i32).\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\nDescribes the interface for interpreting an object as a …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\nRotation defined with an axis and an angle.\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nBlue, Green, Red\nBlue, Green, Red, Alpha\nBlack and opaque.\nBlack and opaque.\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\n<strong>Archetype</strong>: A bar chart.\nData associated with the blueprint state.\nData associated with the blueprint state.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<code>Self::DEFAULT</code>, but with changelog disabled.\n<code>Self::DEFAULT</code>, but with compaction entirely disabled.\nDesignates catastrophic failures.\nWhere are we calling <code>run</code> from?\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Datatype</strong>: The innermost datatype of an image.\nThe transform describes how to transform into the child …\nError within the underlying chunk batcher.\nError within the underlying chunk batcher.\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. A …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s.\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. A …\nEverything needed to build custom <code>ChunkStoreSubscriber</code>s. A …\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Archetype</strong>: Empties all the components of an entity.\nCalled from a command-line-input (the terminal).\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: Specified what color components are present in …\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nDesignates lower priority information.\nDefault configuration, applicable to most use cases, …\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\nA <code>DataLoader</code> loads data from a file path and/or a file’s …\nErrors that might happen when loading data through a …\nAn error occurred while attempting to use a …\nRecommended settings for the <code>DataLoader</code>.\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nCreate a new angle from degrees.\nMany lines are drawn to represent the surface of the shape …\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\nEnvironment variable to configure <code>Self::chunk_max_bytes</code>.\nEnvironment variable to configure <code>Self::chunk_max_rows</code>.\nEnvironment variable to configure …\nEnvironment variable to configure <code>Self::enable_changelog</code>.\nDesignates very serious errors.\nWhen an external <code>DataLoader</code> is asked to load some data …\nTo register a new external data loader, simply add an …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nThe different parts that make up an <code>EntityPath</code>.\nContains the error value\nContains the error value\nContains the error value\nReturn an error if the versions aren’t compatible.\nFailed to find Rerun Viewer executable at explicit path.\nFailed to find Rerun Viewer executable in PATH.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\nError within the underlying file sink.\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\nBinary <code>glTF</code>.\n<code>glTF</code>.\nA generic indicator component that can be specialized for …\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\nThe identity transform.\nThe identity matrix.\nThe identity quaternion representing no rotation.\nThe identity rotation, representing no rotation.\nThe identity rotation, expressed as a quaternion\nDesignates useful information.\nA quaternion that represents an invalid transform.\nA rotation that represents an invalid transform.\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Component</strong>: The metadata describing the contents of a …\nThe associated indicator component, whose presence …\nA unique numeric index for each individual instance within …\n<strong>Archetype</strong>: One or more transforms between the current …\nOther I/O error.\nJPEG image: <code>image/jpeg</code>.\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nWhat <code>DataLoader</code>s load.\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nMarkdown.\nMP4 video: <code>video/mp4</code>.\nA token that (almost) proves we are on the main thread.\nLines are drawn around the parts of the shape which …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nRepresents a limit in how much RAM to use for the entire …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 2 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 0 …\nThe total number of components in the archetype: 1 …\nThe total number of components in the archetype: 1 …\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\nAn arbitrary named indicator component.\nWavefront .obj.\n<code>[1, 1]</code>, i.e. the multiplicative identity.\n<code>[1, 1, 1]</code>, i.e. the multiplicative identity.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\n<code>[1, 1, 1]</code>, i.e. the multiplicative identity.\nRadius of length 1 in ui points.\nContains the success value\nContains the success value\nContains the success value\nPNG image: <code>image/png</code>.\nThe transform describes how to transform into the parent …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRotation defined by a quaternion.\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nRed, Green, Blue\nRed, Green, Blue, Alpha\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\nCreate a new angle from radians.\n<strong>Component</strong>: The radius of something, e.g. a point.\nA recording of user-data.\nA recording of user-data.\nA <code>RecordingStream</code> handles everything related to logging …\nConstruct a <code>RecordingStream</code>.\nErrors that can occur when creating/manipulating a …\nResults that can occur when creating/manipulating a …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nA 3D rotation.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nStereolithography Model <code>stl</code>: <code>model/stl</code>.\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\nError within the underlying serializer.\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\nApproximations of stack and heap size for both internal …\nThe surface of the shape is filled in with a solid color. …\nErrors that can occur when <code>spawn</code>ing a Rerun Viewer.\nOptions to control the behavior of <code>spawn</code>.\nError spawning one of the background threads.\nError spawning a Rerun Viewer process.\nA unique id per store.\nWhat kind of Store this is.\nWhat kind of Store this is.\nPlain text.\nDesignates very low priority, often extremely verbose, …\nFully transparent (invisible).\nFully transparent (invisible).\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: A single dimension within a multi-dimensional …\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Component</strong>: The severity level of a text log message.\nScale individually along each axis.\nA date-time represented as nanoseconds since unix epoch\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: The three indices of a triangle in a triangle …\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nNo limit.\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nScale the same amount along all axis.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\nHow to handle version mismatches during decoding.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nDesignates hazardous situations.\nWhite and opaque.\nWhite and opaque.\nWarn if the versions don’t match, but continue loading.\nFailure to host a web viewer and/or Rerun server.\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nThe origin.\nThe origin.\nZero radius.\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nZero angle, often used for representing no rotation.\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nThe zero vector, i.e. the additive identity.\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nReturns all component descriptors that must, should and …\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all the <code>ComponentName</code>s that have been written to …\nRetrieve all <code>ComponentName</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>EntityPath</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nRetrieve all <code>Timeline</code>s in the store.\nHow much to rotate around the axis.\nThe recommended <code>re_log_types::ApplicationId</code> to log the …\nReturns a copy of <code>self</code>, overriding existing fields with …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nWorkaround for downcasting support, simply return <code>self</code>:\nWorkaround for downcasting support, simply return <code>self</code>:\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nReturns the media type as a string slice, e.g. “…\nThe text as a string slice.\nThe log level as a string slice, e.g. “INFO”.\nWidth/height ratio of the camera sensor.\nAxis to rotate around.\nVisual length of the 3 axes.\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nThe component data.\nSpecifies the configuration of the internal data batching …\nSwaps the underlying sink for a …\nNumber of bits used to represent this element type.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nReturns the maximum of a box with these half-extents and a …\nReturns the maximum of a box with these half-extents and a …\nReturns the min position of a box with these half-extents …\nReturns the min position of a box with these half-extents …\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nThe content/data.\nCreates a new <code>RecordingStream</code> that starts in a buffering …\nThe version of the Rerun SDK.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nGet a chunk based on its ID.\nThe chunk that was added or removed.\nWhat is the threshold, in bytes, after which a <code>Chunk</code> …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nIntegration with integration with the <code>clap</code> command line …\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nCheck whether we are the child of a fork.\nCreate a new <code>Transform3D</code> which when logged will clear the …\nClones the <code>RecordingStream</code> without incrementing the …\nReturns the matrix column for the given <code>index</code>.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nThe color that will be applied to the annotated entity.\nThe color model represented by this image format.\nThe color model derived from this pixel format.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nReturns the first common ancestor of two paths.\nReturns the first common ancestor of a list of entity …\nReports which <code>Chunk</code>s were merged into a new <code>Chunk</code> during a …\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nSee <code>ChunkStoreConfig</code> for more information about …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSwaps the underlying sink for a <code>crate::log_sink::TcpSink</code> …\nResolves the final connect address value.\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSwaps the underlying sink for a <code>crate::log_sink::TcpSink</code> …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nList of class descriptions, mapping class indices to class …\nCoordinate system helpers, for use with …\nAccessor to the underlying <code>TensorData</code>.\nThe tensor data\nReturns the name of the <code>DataLoader</code> that generated this …\nAll the types required by the dataframe API.\nReturns the appropriate arrow datatype to represent this …\nThe datatype represented by this image format.\nThe datatype that this decodes into.\nThe low-level datatypes that <code>components</code> are built from.\nChecks the <code>RERUN</code> environment variable. If not found, …\nRandom-access decoding of a specific pixel of an image.\nRandom-access decoding of a specific pixel of an image.\nSet whether or not Rerun is enabled by default.\nThe default amount of time to wait for the TCP connection …\nGet <code>RUST_LOG</code> environment variable or <code>info</code>, if not set.\nThe default address of a Rerun TCP server which an SDK …\nAngle in degrees (converts from radians).\n<code>-1</code> for deletions, <code>+1</code> for additions.\nThis module contains utilities to support Rerun examples.\nHeight of a box using this half-extent.\nCreate a new depth image format with the given resolution …\nCreate a new dimension with a given size, and the name “…\nThe expected range of depth values.\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nWhat actually changed?\nClears out the current time of the recording for the …\nCreates a new no-op <code>RecordingStream</code> that drops all logging …\nSwaps the underlying sink for a <code>crate::sink::BufferedSink</code>.\nWhether the entity path at which this is logged is …\nReadable name for displaying in UI.\nWeb URL to the Rerun documentation for this component.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nUnconditionally drops all the data for a given <code>entity_path</code>.\nDrop all events that are in the given range on the given …\nThe underlying data type of the buffer.\nThe datatype of the tensor.\nA list of node tuples.\nIf <code>true</code> (the default), the store will emit events when its …\nSet whether or not Rerun is enabled.\nCheck whether an entity has a static component or a …\nCheck whether an entity has a static component or a …\nCheck whether an entity has any static data or any …\nCheck whether an entity has any data on a specific …\nCheck whether an entity has a specific static component.\nCheck whether an entity has any static data.\nCheck whether an entity has a temporal component on any …\nCheck whether an entity has a temporal component on a …\nCheck whether an entity has any temporal data.\nCheck whether an entity has any temporal data.\nFind the earliest time at which something was logged for a …\nBuild an <code>EntityPath</code> from parts that are <em>not</em> escaped:\nWhat should the logged entity paths be prefixed with?\nStats about all the chunks that has data for an entity on …\nStats about all chunks with static data for an entity.\nReturns the min and max times at which data was logged for …\nUse this when it is part of a full entity path.\nMonotonically increasing ID of the event.\nSpecifies the name of the Rerun executable.\nResolves the final executable path.\nEnforce a specific executable to use instead of searching …\nRe-exports of other crates.\nExtra arguments that will be passed as-is to the Rerun …\nExtra environment variables that will be passed as-is to …\nReturn e.g. “jpg” for <code>image/jpeg</code>.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nReturns a non-recursive clear.\nInitiates a flush of the pipeline and returns immediately.\nInitiates a flush the batching pipeline and waits for it …\nX &amp; Y focal length in pixels.\nWhether <code>SetStoreInfo</code>s should be sent, regardless of the …\nReturns path for force sink if private environment …\nForgets the currently active recording of the specified …\nForgets the currently active recording of the specified …\nHuman-readable formatting\nThe format of the image.\nThe format of the image.\nThe format of the image.\nUseful when showing dates/times on a timeline and you want …\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nReturns a formatted string of <code>time_range</code> on this <code>Timeline</code>.\nField of View on the Y axis, i.e. the angle between top …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>Instance</code> that identifies a 2D coordinate.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nSet the limit to some number of bytes.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates a new <code>Ellipsoids3D</code> with <code>Self::centers</code> and …\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nConstruct an image from a byte buffer given its …\nTry to construct an <code>Image</code> from a color model (L, RGB, …\nConstruct a depth image from a byte buffer given its …\nCreate a new angle from degrees.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from <code>image::DynamicImage</code>.\nWe <em>should</em> only create an <code>egui::Ui</code> on the main thread, so …\nConstruct an image from a byte buffer given its …\nCreates a new <code>Capsules3D</code> where each capsule extends …\nCreates a new <code>ChunkStoreConfig</code> using the default values, …\nCreates a new <code>Asset3D</code> from the file contents at <code>path</code>.\nCreates a new image from the file contents at <code>path</code>.\nCreates a new <code>Asset3D</code> from the given <code>contents</code>.\nCreates a new <code>AssetVideo</code> from the given <code>contents</code>.\nConstruct an image given the encoded content of some image …\nCreates a new <code>Image</code> from the contents of a file.\nCreates a new <code>Points3D</code> from the contents of a <code>.ply</code> file.\nCreates a new <code>TextDocument</code> from the contents of a utf8 …\nTreat the file path as an entity path hierarchy.\nCreates a new <code>AssetVideo</code> from the file contents at <code>path</code>.\nCreates a new <code>Image</code> from a file.\nCreates a new <code>Points3D</code> from a <code>.ply</code> file.\nCreates a new <code>TextDocument</code> from a utf8 file.\nTreat the file path as one opaque string.\nCreates a pinhole from the camera focal length and …\nCreates a pinhole from the camera vertical field of view …\nSet the limit to some fraction (0-1) of the total …\nFrom an 16-bit grayscale image.\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> centered around …\nCreates a new <code>Ellipsoids3D</code> with <code>Self::half_sizes</code>.\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from the contents of an image file.\nConstruct a tensor from the contents of an image file.\nConstruct a tensor from the contents of an image file on …\nCreate a new line strip from a list of positions.\nConstruct a line strip from a sequence of points.\nFrom an 8-bit grayscale image.\nCreate a new <code>GeoLineStrings</code> from EPSG:4326 latitude and …\nCreate a new <code>GeoPoints</code> from EPSG:4326 latitude and …\nCreates a new <code>Capsules3D</code> with the given axis-aligned …\nFrom linear-space sRGB values in 0-1 range, with a …\nInstantiate a new <code>ChunkStore</code> with the given …\nCreates a new <code>TextDocument</code> containing Markdown.\nFrom a translation.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nIndicate that this transform is from parent to child.\nConstruct an image from a byte buffer given its resolution …\nFrom a speicifc pixel format.\nCreate a new angle from radians.\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nFrom gamma-space sRGB values.\nFrom gamma-space sRGB values.\nAssumes RGB, 8-bit per channel, interleaved as <code>RGBRGBRGB</code>.\nAssumes RGBA, 8-bit per channel, with separate alpha.\nFrom a rotation\nFrom a rotation &amp; scale\nInstantiate a new <code>ChunkStore</code> with the given …\nFrom a scale\nTreat the string as one opaque string, NOT splitting on …\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> created from …\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> created from …\nFrom a translation.\nFrom a translation applied after a 3x3 matrix.\nFrom a translation applied after a rotation, known as a …\nFrom a translation, applied after a rotation &amp; scale, …\nFrom a translation applied after a scale.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nCreates new 2D arrows pointing in the given directions, …\nCreates new 3D arrows pointing in the given directions, …\nFrom WXYZ.\nFrom XYZW.\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nTriggers a garbage collection according to the desired …\nReturn the current <code>ChunkStoreGeneration</code>. This can be used …\nReturns <code>overrides</code> if it exists, otherwise returns the most …\nGet a specific element.\nGet the value of the element at the given index.\n<code>model/gltf-binary</code>\nReturns the currently active recording of the specified …\n<code>model/gltf+json</code>\nSpecifies if the graph is directed or undirected.\nTries to guess the media type of the file at <code>path</code> based on …\nTries to guess the media type of the file at <code>path</code> based on …\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nInstantiate a new <code>ChunkStore</code> with the given …\nDetermine if the image format has an alpha channel.\nDo we have an alpha channel?\nDo we have an alpha channel?\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed 64-bit hash.\nReturns the total size of <code>self</code> on the heap, in bytes.\nHeight of a box using this half-extent.\nHeight of a box using this half-extent.\nCreate a new dimension with a given size, and the name “…\nHide the welcome screen.\nOnly call this from <code>fn main</code>, or you may get weird runtime …\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nHelper function to iterate over all incremental <code>EntityPath</code>…\nColumn-major order matrix coefficients.\nCreates a <code>ComponentBatch</code> out of the associated …\nIf this is an indicator component, for which archetype?\nThe <code>datatypes::AnnotationInfo</code> for the class.\nInserts a <code>Chunk</code> in the store.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not logging is enabled, a <code>StoreInfo</code> and …\nPack the data into a <code>LogMsg</code>.\nIf true, this time is likely relative to unix epoch.\nAre we referring to all instances of the entity (e.g. all …\nIs this a direct child of the other path.\nIs this a strict descendant of the given path.\nIs this buffer empty?\nCheck if logging is enabled on this <code>RecordingStream</code>.\nReturns how large fraction of memory we should free to go …\nDetermine if the image format represents floating point …\nIs this datatype a floating point number?\nIs this pixel format floating point?\nDetermine whether a fork has happened since creating this …\nReturns <code>true</code> if this is an image media type.\nIs this an indicator component for an archetype?\nIs this datatype an integer?\nReturns true if the format is a YUV format using limited …\nIs <code>Self</code> just plain old data?\nAre we referring to a specific instance of the entity …\nReturns true if either all dimensions have size 1 or only …\nReturns <code>true</code> if this is an video media type.\nIterate over all chunks in the store, in ascending <code>ChunkId</code> …\n<code>image/jpeg</code>\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nAddition or deletion?\nThe label that will be shown in the UI.\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nReturns the most-relevant chunk(s) for the given …\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nNumber of parts\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nResolves the final listen address value.\nLoads data from in-memory file contents and sends it to <code>tx</code>.\nLoads data from a file on the local filesystem and sends …\nThings directly related to logging.\nLog data to Rerun.\nLogs a single <code>Chunk</code>.\nLogs a set of <code>re_types_core::ComponentBatch</code>es into Rerun.\nLogs the given <code>contents</code> using all …\nLogs the file at the given <code>path</code> using all …\nIntegrates the Rerun SDK with the <code>log</code> crate.\nLog data to Rerun.\nThe log tick timeline to which all API functions will …\nThe log time timeline to which all API functions will …\nLogs the contents of a component bundle into Rerun.\nLookup the <code>ColumnMetadata</code> for a specific <code>EntityPath</code> and …\nLookup the <em>latest</em> arrow <code>Arrow2DataType</code> used by a specific …\n<code>text/markdown</code>\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nDetermine if component matches a string\nLimit in bytes.\nWhat is the maximum finite value representable by this …\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSwaps the underlying sink for a <code>crate::sink::MemorySink</code> …\nAn upper limit on how much memory the Rerun Viewer should …\nAn optional floating point value that specifies how long a …\nWhat is the minimum finite value representable by this …\n<code>video/mp4</code>\nThe fully-qualified name of this archetype, e.g. …\nName of the <code>DataLoader</code>.\nArbitrary name for the subscriber.\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nDisplay name of the series.\nDisplay name of the series.\nThe name of this dimension, e.g. “width”, “height”…\nCreate a named dimension.\nMethods for spawning the native viewer and streaming the …\nCreate a new <code>RecordingStreamBuilder</code> with the given …\nCreates a new <code>RecordingStream</code> with a given <code>StoreInfo</code> and …\nInstantiate a new empty <code>ChunkStore</code> with the given …\nThe given string is expected to be unescaped, i.e. any <code>\\</code> …\nCreate a new <code>Clear</code>.\nCreate a new <code>AnnotationContext</code>.\nCreate a new <code>Asset3D</code>.\nCreate a new <code>AssetVideo</code>.\nCreate a new <code>BarChart</code>.\nCreate a new <code>DepthImage</code>.\nCreate a new <code>DisconnectedSpace</code>.\nCreate a new <code>EncodedImage</code>.\nCreate a new <code>GraphEdges</code>.\nCreate a new <code>GraphNodes</code>.\nCreate a new <code>Image</code>.\nCreate a new <code>InstancePoses3D</code>.\nCreate a new <code>LineStrips2D</code>.\nCreate a new <code>LineStrips3D</code>.\nCreate a new <code>Mesh3D</code>.\nCreate a new <code>Pinhole</code>.\nCreate a new <code>Points2D</code>.\nCreate a new <code>Points3D</code>.\nCreate a new <code>Scalar</code>.\nCreate a new <code>SegmentationImage</code>.\nCreate a new <code>SeriesLine</code>.\nCreate a new <code>SeriesPoint</code>.\nCreate a new <code>Tensor</code>.\nCreate a new <code>TextDocument</code>.\nCreate a new <code>TextLog</code>.\nCreate a new <code>VideoFrameReference</code>.\nCreate a new <code>ViewCoordinates</code>.\nCreate a new color.\nCreate a new half-extent from half-width and half-height.\nCreate a new half-extent from half-width, half-height, …\nCreate a new position.\nCreate a new position.\nCreate a new rotation from an axis and an angle.\nCreate a new tensor.\nCreate a new vector.\nCreate a new vector.\nCreate a new vector.\nCreate an array of indicator components of this type with …\nInstantiate a new empty <code>ChunkStore</code> with the given …\nCreates a new radius in scene units.\nFor things like camera frames or iteration count.\nCreates a new <code>re_log_types::StoreInfo</code> which can be used …\nFor absolute or relative time.\nCreates a new radius in ui points.\nA list of node IDs.\nReturns the current time of the recording on the current …\nNumber of bytes for the whole image.\nNumber of bytes needed to represent an image of the given …\n1 for grayscale, 3 for RGB, etc.\nGet the number of chunks.\nThe number of dimensions of the tensor.\nReturns the number of static events logged for an entity …\nReturns the number of temporal events logged for an entity …\nReturns the number of temporal events logged for an entity …\nThe total number of triangles.\nThe total number of vertices.\n<code>model/obj</code>\nThe core of this trait: get notified of changes happening …\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nThe <code>re_log_types::ApplicationId</code> that is currently opened …\nThe <code>re_log_types::StoreId</code> that is currently opened in the …\nReturns all component descriptors that <em>may</em> be provided by …\nReturns <code>opt</code> if not <code>None</code>, otherwise tries to guess a media …\nReturns <code>opt</code> if not <code>None</code>, otherwise tries to guess a media …\nSets <code>Self::archetype_field_name</code> to the given one iff it’…\nSets <code>Self::archetype_name</code> to the given one iff it’s not …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nReturn <code>None</code> if root.\nThe limit can either be absolute (e.g. “16GB”) or …\nParses an entity path, handling any malformed input with a …\nUnescape the string, forgiving any syntax error with a …\nUnescape the string, forgiving any syntax error with a …\nParse an entity path from a string, with strict checks for …\nUnescape the string, returning errors on wrongly escaped …\n<code>text/plain</code>\n<code>image/png</code>\nScale the radii of the points in the point cloud generated …\nThe port to listen on.\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nAngle in radians.\nAngle in radians. One turn is equal to 2π (or τ) radians.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nReturns the most-relevant chunk(s) for the given <code>RangeQuery</code>…\nReturns the most-relevant <em>temporal</em> chunk(s) for the given …\nDetermines the presentation timestamps of all frames …\nReturns all component descriptors that <em>should</em> be provided …\nRecords an arbitrary <code>LogMsg</code>.\nRecords a single <code>PendingRow</code>.\nSet the <code>RecordingId</code> for this context.\nReturns a recursive clear.\nRegisters a <code>PerStoreChunkSubscriber</code> type so it gets …\nRegisters a <code>ChunkStoreSubscriber</code> so it gets automatically …\nSpecifies the relation this transform establishes between …\nReturns all component descriptors that <em>must</em> be provided by …\nClears out the current time of the recording, for the …\nThe resolution of the camera sensor in pixels.\nPixel resolution (usually integers) of child image space. …\nGiven a <code>ComponentColumnSelector</code>, returns the corresponding …\nGiven a set of <code>ColumnSelector</code>s, returns the corresponding …\nGiven a <code>TimeColumnSelector</code>, returns the corresponding …\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRun the Rerun application and return an exit code.\nCheck that this is a valid mesh, e.g. that the vertex …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSwaps the underlying sink for a <code>crate::sink::FileSink</code> at …\nSwaps the underlying sink for a <code>crate::sink::FileSink</code> at …\nThe scalar value to log.\nScaling factor.\nScaling factors.\nIf this radius is in scene units, returns the radius in …\nReturns the full schema of the store.\nReturns the filtered schema for the given <code>QueryExpression</code>.\nCreate a new segmentation image format with the given …\nSend a blueprint through this recording stream\nRecords a single <code>Chunk</code>.\nLower-level logging API to provide data spanning multiple …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSet a specific element.\nReplaces the currently active recording of the specified …\nSwaps the underlying sink for a new one.\nReplaces the currently active recording of the specified …\nSet the current time of the recording, for the current …\nSet the current time of the recording, for the current …\nSet the current time of the recording, for the current …\nSet the current time of the recording, for the current …\nThe shape of the tensor, including optional dimension …\nThe shape of the tensor, including optional names for each …\nReturns the shape of the tensor with all leading &amp; …\nReturns the unqualified name, e.g. <code>Points3D</code>.\nReturns the unqualified name, e.g. …\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nReturns short names for a collection of entities based on …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nDifferent destinations for log messages.\nThe length of this dimension.\nThe size of the buffer in bytes.\nThe size of the tensor data, in bytes.\nSpawns a new Rerun Viewer process ready to listen for TCP …\nSpawns a new Rerun Viewer process from an executable …\nSpawns a new Rerun Viewer process from an executable …\nSpawns a new Rerun Viewer process from an executable …\nSpawns a new Rerun Viewer process from an executable …\nReturns <code>None</code> if <code>ALL</code>, otherwise the index.\nCreate a new half-extent with all the same sizes (a …\nReturns the total size of <code>self</code> on the stack, in bytes.\nIs this equals to, or a descendant of, the given path.\nCreates a new <code>RecordingStream</code> that is pre-configured to …\nSwaps the underlying sink for a <code>crate::sink::FileSink</code> …\nSwaps the underlying sink for a <code>crate::sink::FileSink</code> …\n<code>model/stl</code>\nWhat was the store’s generation when it sent that event?\nSet the <code>StoreId</code> for this context.\nThe recommended <code>re_log_types::StoreId</code> to log the data to, …\nWhich <code>ChunkStore</code> sent this event?\nThe <code>StoreInfo</code> associated with this <code>RecordingStream</code>.\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReturns the currently active recording of the specified …\nTime-related types.\nReturns the min and max times at which data was logged on …\nAt what time(s) should the data be logged to?\nReferences the closest video frame to this timestamp.\nRetrieves 2D image coordinates (x, y) encoded in an …\n<code>[r, g, b, a]</code>\n<code>[r, g, b, a]</code>\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nGenerates CLI flags from these settings, for external data …\nReturns the absolute datetime if applicable.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nReturns the total size of <code>self</code> in bytes, accounting for …\nTransform helpers, for use with <code>archetypes::Transform3D</code>.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nTry to construct a <code>DepthImage</code> from anything that can be …\nTry to construct a <code>SegmentationImage</code> from anything that …\nTry to construct a <code>Tensor</code> from anything that can be …\nIf this radius is in ui points, returns the radius in ui …\nThe style of string to use in a UI\nThe unescaped string.\nScale the same amount along all axis.\nComputes the union of two <code>TimePoint</code>s, keeping the maximum …\nThe default <code>ApplicationId</code> if the user hasn’t set one.\nCreate an unnamed dimension.\nGiven pixel coordinates and a world-space depth, return a …\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nCreate a vector of <code>KeypointPair</code> from an array of tuples.\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nThe w-coordinate, i.e. index 3.\nIf <code>true</code>, the call to <code>spawn</code> will block until the Rerun …\nMethods for spawning the web viewer and streaming the SDK …\nWidth of a box using this half-extent.\nWidth of a box using this half-extent.\nCreate a new dimension with a given size, and the name “…\nStroke width for the corresponding series.\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nUse this image as the albedo texture.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nUse this image as the albedo texture.\nUnconditionally sets <code>Self::archetype_field_name</code> to the …\nUnconditionally sets <code>Self::archetype_name</code> to the given one.\nVisual length of the 3 axes.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nThe expected range of depth values.\nUpdate the <code>names</code> of the contained <code>TensorData</code> dimensions.\nCreates a graph with directed edges.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nSpecifies if the graph is directed or undirected.\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nPasses a reference to the downcasted per-store subscriber …\nPasses a mutable reference to the downcasted per-store …\nPasses a reference to the downcasted per-store subscriber …\nScale the radii of the points in the point cloud generated …\nOptional center positions of the nodes.\nPrincipal point of the pinhole camera, i.e. the …\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nConvenience method that takes any kind of (single) …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nPasses a reference to the downcasted subscriber to the …\nPasses a mutable reference to the downcasted subscriber to …\nPasses a reference to the downcasted subscriber to the …\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nCreates a graph with undirected edges.\nThe expected range of values.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe x coordinate, i.e. index 0\nThe x coordinate, i.e. index 0\nThe x-coordinate, i.e. index 0.\nThe x-coordinate, i.e. index 0.\nThe x-coordinate, i.e. index 0.\nThe directions of the [x, y, z] axes.\nThe components of the quaternion in X,Y,Z,W order.\nThe y coordinate, i.e. index 1\nThe y coordinate, i.e. index 1\nThe y-coordinate, i.e. index 1.\nThe y-coordinate, i.e. index 1.\nThe y-coordinate, i.e. index 1.\nYuv matrix coefficients used by this format.\nThe z coordinate, i.e. index 2\nThe z-coordinate, i.e. index 2.\nThe z-coordinate, i.e. index 2.\nInner error explaining why the thread failed to spawn.\nName of the thread\nName used for the executable search.\nExplicit path of the executable (specified by the caller).\nHigh-level error message meant to be printed to the user …\nValue of the <code>PATH</code> environment variable, if any.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nWhether the entity path at which this is logged is …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nThe format of the image.\nThe format of the image.\nThe format of the image.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\nThis struct implements a <code>clap::Parser</code> that defines all the …\nWhat bind address IP to use.\nConnects and sends the logged data to a remote Rerun …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RecordingStream</code> according to the CLI …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves the data to an rrd file rather than visualizing it …\nConnects and sends the logged data to a web-based Rerun …\nAn upper limit on how much memory the WebSocket server …\nStart a new Rerun Viewer process and feed it data in …\nLog data to standard output, to be piped into a Rerun …\nWhere are we calling <code>run</code> from?\nCalled from a command-line-input (the terminal).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeletes everything related to analytics.\nPrints the current configuration.\nPrints extra information about analytics.\nDisable analytics.\nAssociate an email address with the current user.\nEnable analytics.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigure the behavior of our analytics.\nGenerates the Rerun CLI manual (markdown).\nReset the memory of the Rerun Viewer.\nWhat bind address IP to use.\nSet a maximum input latency, e.g. “200ms” or “10s”.\nThis is a hint that we expect a recording to stream in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nHide the normal Rerun welcome screen.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat TCP port do we listen to (for SDKs to connect to)?\nStart with the puffin profiler running.\nOverride the default graphics backend and for a specific …\nRun the Rerun application and return an exit code.\nStream incoming log events to an .rrd file at the given …\nTake a screenshot of the app and quit. We use this to …\nDeprecated: use <code>--serve-web</code> instead.\nServe the recordings over WebSocket to one or more Rerun …\nIngest data and then quit once the goodbye message has …\nThe number of compute threads to use.\nPrint version and quit\nOverwrites hardware acceleration option for video decoding.\nStart the viewer in the browser (instead of locally).\nWhat port do we listen to for hosting the web viewer over …\nSet the screen resolution (in logical points), e.g. “…\nWhat port do we listen to for incoming websocket …\nCompacts the contents of one or more .rrd/.rbl …\nCompares the data between 2 .rrd files, returning a …\nFilters out data from .rrd/.rbl files/streams, and writes …\nMerges the contents of multiple .rrd/.rbl files/streams, …\nPrint the contents of one or more .rrd/.rbl files/streams.\nManipulate the contents of .rrd and .rbl files.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGiven a path to an rrd file, builds up a <code>ChunkStore</code> and …\nReturns the argument unchanged.\nIf specified, dumps both .rrd files as tables.\nCalls <code>U::from(self)</code>.\nChecks whether two .rrd files are <em>similar</em>, i.e. not equal …\nIf set, will try to proceed even in the face of IO and/or …\nPaths of the entities to be filtered out.\nNames of the timelines to be filtered out.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPaths to read from. Reads from standard input if none are …\nPath to write to. Writes to standard output if unspecified.\nIf set, will try to proceed even in the face of IO and/or …\nIf set, will try to proceed even in the face of IO and/or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhat is the threshold, in bytes, after which a Chunk …\nWhat is the threshold, in rows, after which a Chunk cannot …\nWhat is the threshold, in rows, after which a Chunk cannot …\nPaths to read from. Reads from standard input if none are …\nPaths to read from. Reads from standard input if none are …\nPath to write to. Writes to standard output if unspecified.\nPath to write to. Writes to standard output if unspecified.\nIf set, will try to proceed even in the face of IO and/or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPaths to read from. Reads from standard input if none are …\nIf set, print out table contents.\nAsynchronously decodes potentially multiplexed RRD streams …\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nDraw order used for 2D boxes if no draw order was …\nDraw order used for depth image when they’re not shown …\nDraw order used for images if no draw order was specified.\nDraw order used for 2D lines if no draw order was …\nDraw order used for 2D points if no draw order was …\nDraw order used for segmentation images if no draw order …\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\nThe graph has directed edges.\n<strong>Component</strong>: Spatially disconnect this entity from its …\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\n<strong>Component</strong>: An edge in a graph connecting two nodes.\n<strong>Component</strong>: A string-based ID representing a node in a …\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\nThe identity rotation, representing no rotation.\nThe identity rotation, representing no rotation.\nThe identity rotation, representing no rotation.\nThe identity rotation, representing no rotation.\nA rotation that represents an invalid transform.\nA rotation that represents an invalid transform.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\n<code>◀</code>\n<strong>Component</strong>: Length, or one-dimensional size.\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nThe corner opposite the origin.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nThe graph has undirected edges.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nThe X^Y plane with normal = +Z.\nThe Y^Z plane with normal = +X.\nNo translation.\nThe origin.\nNo translation.\nThe Z^X plane with normal = +Y.\nReturns the string slice of the graph node.\nReturns the name as a string slice.\nA long description of the coordinate system, explicitly …\nDescribe using three letters, e.g. <code>RDF</code> for X=Right, …\nThe end of the range.\nThe end of the range.\nThe end of the range.\nThe end of the range.\nX &amp; Y focal length in pixels.\nThe forward-axis.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new pinhole projection matrix from a focal length …\nCreate a new line string from a list of positions.\nCreate new timestamp from milliseconds since video start.\nCreate new timestamp from nanoseconds since video start.\nReturns a matrix that transforms from another coordinate …\nReturns a matrix that transforms from RDF to this …\nReturns a matrix that transforms from RUB to this …\nReturns a quaternion that rotates from RUB to this …\nCreate new timestamp from seconds since video start.\nChooses a coordinate system based on just an up-axis.\nReturns whether or not this coordinate system is left or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe latitude.\nThe longitude.\nCreate a new position.\nCreate a new plane from a normal and distance.\nCreate a new rotation from an axis and an angle.\nCreate a new translation.\nCreate a new range.\nCreate a new rotation from an axis and an angle.\nCreates a new <code>TensorDimensionIndexSelection</code> from the given …\nCreate a new texture coordinate.\nCreate a new translation.\nCreate a new range.\nConstruct a new <code>ViewCoordinates</code> from an array of <code>ViewDir</code>s.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nThe right-axis.\nReturns an error if this does not span all three …\nThe start of the range.\nThe start of the range.\nThe start of the range.\nThe start of the range.\nReturns a matrix that transforms this coordinate system to …\nReturns a matrix that transforms this coordinate system to …\nThe first coordinate, i.e. index 0.\nScale the same amount along all axis.\nGiven pixel coordinates and a world-space depth, return a …\nThe up-axis.\nReturn the Recording URI contained in this component.\nThe second coordinate, i.e. index 1.\nPrincipal point of the pinhole camera, i.e. the …\nThe x coordinate, i.e. index 0\nThe x coordinate, i.e. index 0\nThe y coordinate, i.e. index 1\nThe y coordinate, i.e. index 1\nThe z coordinate, i.e. index 2\nThe z coordinate, i.e. index 2\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nLeft or right handedness. Used to describe a coordinate …\nLeft-handed coordinate system.\n-X\n-Y\n-Z\n+X\n+Y\n+Z\nRight-handed coordinate system.\nPositive (<code>+</code>) or Negative (<code>-</code>).\nOne of: <code>+X</code>, <code>-X</code>, <code>+Y</code>, <code>-Y</code>, <code>+Z</code>, <code>-Z</code>, i.e. one of the six …\nConvert to a unit-length 3D vector.\nOne of <code>X</code>, <code>Y</code>, <code>Z</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a dimension index to an axis.\nCreate a <code>Handedness</code> from a boolean.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPositive or negative.\nA vector of trait objects of <code>Array</code> where every item has …\nData associated with the blueprint state.\nA ref-counted, inner-mutable handle to a <code>ChunkStore</code>.\nDescribes a column selection to return as part of a query.\nSelect a component based on its <code>EntityPath</code> and …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nA way to filter a set of <code>EntityPath</code>s.\nFill null values using global-scope latest-at semantics.\nNo sparse filling. Nulls stay nulls.\nA ref-counted, inner-mutable handle to a <code>QueryCache</code>.\nA handle to our user-facing query engine.\nDescribes a complete query for Rerun’s dataframe API.\nA handle to a dataframe query, ready to be executed.\nA recording of user-data.\nSpecifies how null values should be filled in the returned …\nKeeps track of handles towards a <code>ChunkStore</code> and its …\nWhat kind of Store this is.\nSelect a time column.\nA 64-bit number describing either nanoseconds, sequence …\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nThe view contents specify which subset of the database …\nReturns an iterator backed by <code>Self::next_row_batch</code>.\nWhat is the threshold, in bytes, after which a <code>Chunk</code> …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nWhat is the threshold, in rows, after which a <code>Chunk</code> cannot …\nSemantic name associated with this data.\nConcatenate multiple <code>TransportChunk</code>s into one.\nAll the control, time and component data.\nAll the control, time and component data.\nIf <code>true</code> (the default), the store will emit events when its …\nThe path of the entity.\nThe index used to filter out <em>rows</em> from the view contents.\nThe range of index values used to filter out <em>rows</em> from the …\nThe specific index values used to filter out <em>rows</em> from the …\nThe component column used to filter out <em>rows</em> from the view …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLike <code>ChunkStore::from_rrd_filepath</code>, but automatically …\nThis will automatically instantiate a new empty <code>QueryCache</code>.\nWhether the <code>view_contents</code> should ignore columns …\nWhether the <code>view_contents</code> should ignore semantically empty …\nWhether the <code>view_contents</code> should ignore columns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an iterator backed by <code>Self::next_row_batch</code>.\nReturns an iterator backed by <code>Self::next_row</code>.\nReturns an iterator backed by <code>Self::next_row</code>.\nReturns an iterator over all the <code>EntityPath</code>s present in …\nReturns the next row’s worth of data.\nAsynchronously returns the next row’s worth of data.\nCalls <code>Self::next_row</code> and wraps the result in a <code>RecordBatch</code>.\nHow many rows of data will be returned?\nThe query used to instantiate this handle.\nStarts a new query by instantiating a <code>QueryHandle</code>.\nAll results returned by this handle will strictly follow …\nReturns the full schema of the store.\nThe schema of the dataframe, and all chunk-level and …\nThe schema of the dataframe, and all chunk-level and …\nReturns the filtered schema for the given <code>QueryExpression</code>.\nAdvance all internal cursors so that the next row yielded …\nDescribes the columns that make up this selection.\nThe specific <em>columns</em> to sample from the final view …\nSpecifies how null values should be filled in the returned …\nThe name of the timeline.\nThe specific index values used to sample <em>rows</em> from the …\nDescribes the columns that make up this view.\nThe subset of the database that the query will run on: a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nA trait representing an immutable Arrow array. Arrow …\nDense arrow-based storage of N rows of multi-component …\nImplements an asynchronous batcher that coalesces …\nDefines the different thresholds of the associated …\nErrors that can occur when creating/manipulating a …\nHelper to incrementally build a <code>Chunk</code>.\nThe actual iterator implementation for …\nThe underlying item type for <code>ChunkComponentIter</code>.\nErrors that can occur when creating/manipulating a <code>Chunk</code>s, …\nA unique ID for a <code>crate::Chunk</code>.\nA simple type alias for an <code>Arc&lt;Chunk&gt;</code>.\nThe fully-qualified name of a <code>Component</code>, e.g. …\nThe unique identifier of an entity, e.g. <code>camera/3/points</code>\nContains the error value\nContains the error value\nA query at a given time, for a given timeline.\nContains the success value\nContains the success value\nError when parsing configuration from environment.\nA single row’s worth of data (i.e. a single log call).\nA query over a time range, for a given timeline.\nA unique ID for a row’s worth of data within a chunk.\nError spawning one of the background threads.\nHelper to incrementally build a <code>TimeColumn</code>.\nA 64-bit number describing either nanoseconds, sequence …\nA point in time on any number of <code>Timeline</code>s.\nA time frame/space, e.g. <code>log_time</code> or <code>frame_nr</code>, coupled …\nThe name of a timeline. Often something like <code>&quot;log_time&quot;</code> or …\nA <code>Chunk</code> that is ready for transport. Obtained by calling …\nA <code>ChunkShared</code> that is guaranteed to always contain a …\nConverts itself to a reference of <code>Any</code>, which enables …\nConverts itself to a mutable reference of <code>Any</code>, which …\nSplit a chunk if it contains &gt;= rows than this threshold …\nThe component data.\nAll the control, time and component data.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nFlush if the accumulated payload has a size in bytes equal …\nFlush if the accumulated payload has a number of rows …\nDuration of the periodic tick.\nCallbacks you can install on the <code>ChunkBatcher</code>.\nIf true, the results will include one extra tick on each …\nwhether the array is empty\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is valid.\nShould the results contain all extra component information …\nShould the results contain all extra timeline information …\nThe length of the <code>Array</code>. Every array has a length …\nSize of the internal channel of <code>Chunk</code>s.\nSize of the internal channel of commands.\nThe number of null slots on this <code>Array</code>.\nAuto-generated <code>TUID</code>, uniquely identifying this event and …\nThe schema of the dataframe, and all chunk-level and …\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nUser-specified <code>TimePoint</code> for this event.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nThe validity of the <code>Array</code>: every array has an optional …\nClones this <code>Array</code> with a new new assigned bitmap.\nA <code>HashMap</code> using <code>RandomState</code> to hash the items. (Requires …\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nA value of type <code>L</code>.\nA value of type <code>R</code>.\nContains the <code>Array</code> and <code>MutableArray</code> trait objects …\ncontains <code>Bitmap</code> and <code>MutableBitmap</code>, containers of <code>bool</code>.\nContains <code>Buffer</code>, an immutable container for all Arrow …\nContains <code>Chunk</code>, a container of <code>Array</code> where every array has …\ncontains a wide range of compute operations (e.g. […\nContains all metadata, such as <code>PhysicalType</code>, <code>DataType</code>, …\nDefines <code>Error</code>, representing all errors returned by this …\ncontains FFI bindings to import and export <code>Array</code> via Arrow…\nContains modules to interface with other formats such as […\nMemory maps regions defined on the IPC format into <code>Array</code>.\nContains the declaration of <code>Offset</code>\ncontains the <code>Scalar</code> trait object representing individual …\nConversion methods for dates and times.\nDeclares <code>TrustedLen</code>.\nSealed traits and implementations to handle all <em>physical </em>…\nMisc utilities used in different places in the crate.\nA trait representing an immutable Arrow array. Arrow …\nIterator of values of an <code>ArrayAccessor</code>.\nTrait providing bi-directional conversion between arrow2 …\nA <code>BinaryArray</code> is Arrow’s semantically equivalent of an …\nIterator of values of an <code>BinaryArray</code>.\nA <code>BooleanArray</code> is Arrow’s semantically equivalent of an …\nA type definition <code>PrimitiveArray</code> for <code>days_ms</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>days_ms</code>\nAn <code>Array</code> whose values are stored as indices. This <code>Array</code> is …\nTrait denoting <code>NativeType</code>s that can be used as keys of a …\nThe Arrow’s equivalent to an immutable …\nThe Arrow’s equivalent to an immutable …\nA type definition <code>PrimitiveArray</code> for <code>f16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f16</code>\nA type definition <code>PrimitiveArray</code> for <code>f32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f32</code>\nA type definition <code>PrimitiveArray</code> for <code>f64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>f64</code>\nTrait that <code>BinaryArray</code> and <code>Utf8Array</code> implement for the …\nA type definition <code>PrimitiveArray</code> for <code>i128</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i128</code>\nA type definition <code>PrimitiveArray</code> for <code>i16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i16</code>\nA type definition <code>PrimitiveArray</code> for <code>i256</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i256</code>\nA type definition <code>PrimitiveArray</code> for <code>i32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i32</code>\nA type definition <code>PrimitiveArray</code> for <code>i64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i64</code>\nA type definition <code>PrimitiveArray</code> for <code>i8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>i8</code>\nThe corresponding <code>IntegerType</code> of this key\nAn <code>Array</code> semantically equivalent to …\nIterator of values of a <code>ListArray</code>.\nAn array representing a (key, value), both of arbitrary …\nA type definition <code>PrimitiveArray</code> for <code>months_days_ns</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>months_days_ns</code>\nA trait describing a mutable array; i.e. an array whose …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;Vec&lt;u8&gt;&gt;&gt;</code>. …\nA <code>MutableArray</code> that builds a <code>BinaryArray</code>. It differs from …\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;bool&gt;&gt;</code>, but with …\nA mutable, strong-typed version of <code>DictionaryArray</code>.\nThe Arrow’s equivalent to a mutable …\nThe mutable version of <code>FixedSizeListArray</code>.\nThe mutable version of <code>ListArray</code>.\nA distinct type to disambiguate clashing methods\nThe Arrow’s equivalent to <code>Vec&lt;Option&lt;T&gt;&gt;</code> where <code>T</code> is …\nConverting a <code>MutableStructArray</code> into a <code>StructArray</code> is <code>O(1)</code>.\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nA <code>MutableArray</code> that builds a <code>Utf8Array</code>. It differs from …\nThe concrete <code>Array</code> of <code>DataType::Null</code>.\nA <code>PrimitiveArray</code> is Arrow’s semantically equivalent of …\nA trait describing the ability of a struct to receive new …\nA <code>StructArray</code> is a nested <code>Array</code> with an optional validity …\nA trait describing the ability of a struct to create …\nA trait describing the ability of a struct to extend from …\nA trait describing the ability of a struct to receive new …\nA type definition <code>PrimitiveArray</code> for <code>u16</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u16</code>\nA type definition <code>PrimitiveArray</code> for <code>u32</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u32</code>\nA type definition <code>PrimitiveArray</code> for <code>u64</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u64</code>\nA type definition <code>PrimitiveArray</code> for <code>u8</code>\nA type definition <code>MutablePrimitiveArray</code> for <code>u8</code>\n<code>UnionArray</code> represents an array whose each slot can contain …\nA <code>Utf8Array</code> is arrow’s semantic equivalent of an …\nIterator of values of an <code>Utf8Array</code>.\nIf the key type always can be converted to <code>usize</code>.\nConverts itself to a reference of <code>Any</code>, which enables …\nConvert to <code>Any</code>, to enable dynamic casting.\nConverts itself to a mutable reference of <code>Any</code>, which …\nConvert itself to an (immutable) atomically reference …\nConvert itself to an (immutable) <code>Array</code>.\nConvert to mutable <code>Any</code>, to enable dynamic casting.\nRepresents this key as a <code>usize</code>.\nClones a dynamic <code>Array</code>.\nThe <code>DataType</code> of the <code>Array</code>. In combination with …\nThe <code>DataType</code> of the array.\nLogically compares two <code>Array</code>s. Two arrays are logically …\nConvert an <code>arrow_data::ArrayData</code> to arrow2 <code>Array</code>\nCreate this <code>Array</code> from [<code>ArrayData</code>]\nReturns a function that writes the element of <code>array</code> at …\nReturns a function that writes the value of the element of …\nContains the trait <code>Growable</code> and corresponding concreate …\nwhether the array is empty\nWhether the array is empty.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is null.\nReturns whether slot <code>i</code> is valid.\nWhether <code>index</code> is valid / set.\nThe length of the <code>Array</code>. Every array has a length …\nThe length of the array.\nCreates a new <code>Array</code> with a <code>Array::len</code> of 0.\nCreates a new <code>Array</code> of <code>DataType</code> <code>data_type</code> and <code>length</code>. The …\nThe number of null slots on this <code>Array</code>.\nThe offsets of the array\nContains functions and function factories to order values …\nAdds a new null element to the array.\nPush a new element that holds the invariants of the struct.\nReserves additional slots to its capacity.\nShrink the array to fit its length.\nSlices this <code>Array</code>.\nSlices the <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nReturns a slice of this <code>Array</code>.\nClone a <code>&amp;dyn Array</code> to an owned <code>Box&lt;dyn Array&gt;</code>.\nConvert an arrow2 <code>Array</code> to <code>arrow_data::ArrayData</code>\nConvert this <code>Array</code> into [<code>ArrayData</code>]\nFallible version of <code>Extend::extend</code>.\nTries to extend itself with elements from <code>other</code>, failing …\nTries to push a new element.\nThe validity of the <code>Array</code>: every array has an optional …\nThe optional validity of the array.\nThe values of the array\nClones this <code>Array</code> with a new new assigned bitmap.\nDescribes a struct that can be extended from slices of …\nConcrete <code>Growable</code> for the <code>BinaryArray</code>.\nConcrete <code>Growable</code> for the <code>BooleanArray</code>.\nConcrete <code>Growable</code> for the <code>DictionaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeBinaryArray</code>.\nConcrete <code>Growable</code> for the <code>FixedSizeListArray</code>.\nConcrete <code>Growable</code> for the <code>ListArray</code>.\nConcrete <code>Growable</code> for the <code>MapArray</code>.\nConcrete <code>Growable</code> for the <code>NullArray</code>.\nConcrete <code>Growable</code> for the <code>PrimitiveArray</code>.\nConcrete <code>Growable</code> for the <code>StructArray</code>.\nConcrete <code>Growable</code> for the <code>UnionArray</code>.\nConcrete <code>Growable</code> for the <code>Utf8Array</code>.\nConverts this <code>Growable</code> to an <code>Arc&lt;dyn Array&gt;</code>, thereby …\nConverts this <code>Growable</code> to an <code>Box&lt;dyn Array&gt;</code>, thereby …\nExtends this <code>Growable</code> with elements from the bounded <code>Array</code> …\nExtends this <code>Growable</code> with null elements, disregarding the …\nThe current length of the <code>Growable</code>.\nCreates a new <code>Growable</code> from an arbitrary number of <code>Array</code>s.\nCompare the values at two arbitrary indices in two arrays.\nreturns a comparison function that compares values at two …\nTotal order of all native types whose Rust implementation …\nimplements comparison using IEEE 754 total ordering for f32\nimplements comparison using IEEE 754 total ordering for f64\nAn immutable container semantically equivalent to …\nThis crates’ equivalent of <code>std::vec::IntoIter</code> for <code>Bitmap</code>.\nA container of booleans. <code>MutableBitmap</code> is semantically …\nCompute bitwise AND operation\nApply a bitwise operation <code>op</code> to two inputs and return the …\nApply a bitwise binary operation to a <code>MutableBitmap</code>.\nCreates a <code>Vec&lt;u8&gt;</code> from a <code>TrustedLen</code> of <code>BitChunk</code>.\nCreates a Vec from an <code>Iterator</code> of <code>BitChunk</code>.\nCompute bitwise OR operation\nApply a bitwise operation <code>op</code> to four inputs and return the …\nApply a bitwise operation <code>op</code> to three inputs and return …\nApply a bitwise operation <code>op</code> to one input and return the …\nApplies a function to every bit of this <code>MutableBitmap</code> in …\nGeneral utilities for bitmaps representing items where LSB …\nCompute bitwise XOR operation\nA chunk of bits. This is used to create masks of a given …\nTrait representing an exact iterator over bytes in <code>BitChunk</code>…\nThis struct is used to efficiently iterate over bit masks …\nAn iterator over a slice of bytes in <code>BitChunk</code>s.\nAn iterator over mutable slices of bytes of exact size.\nAn iterator over bits according to the LSB, i.e. the bytes …\nThere are null values\nThere are no null values\nIterator over a bitmap that returns slices of set regions …\nAn <code>Iterator</code> over <code>Option&lt;T&gt;</code> This enum can be used in two …\nAn <code>Iterator</code> over validity and values.\nReturns the number of bytes required to hold <code>bits</code> bits.\nReturns the number of zero bits in the slice offsetted by …\nFormats <code>bytes</code> taking into account an offset and length of …\nconvert itself from bytes.\nReturns whether bit at position <code>i</code> in <code>data</code> is set\nReturns whether bit at position <code>i</code> in <code>data</code> is set or not.\nReturns whether bit at position <code>i</code> in <code>byte</code> is set or not\nThe remainder of the iterator.\nAn iterator over individual items of the remainder\nThe number of items in the remainder\nSets bit at position <code>i</code> in <code>byte</code>\nSets bit at position <code>i</code> in <code>data</code>\nSets bit at position <code>i</code> in <code>data</code> without doing bound checks\nconvert itself into bytes.\n<code>Buffer</code> is a contiguous memory region that can be shared …\nBytes representation.\nA vector of trait objects of <code>Array</code> where every item has …\nDefines kernels suitable to perform operations to …\nDefines generics suitable to perform operations to …\nContains the concatenate kernel\nContains operators to filter arrays such as <code>filter</code>.\nDefines take kernel for <code>Array</code>\nApplies a binary operations to two primitive arrays. This …\nVersion of binary that creates a mutable bitmap that is …\nVersion of binary that returns an array and bitmap. Used …\nVersion of binary that checks for errors in the closure …\nVersion of unary that checks for errors in the closure …\nApplies an unary and infallible function to a …\nVersion of unary that creates a mutable bitmap that is …\nVersion of unary that returns an array and bitmap. Used …\nApplies a binary function to two <code>PrimitiveArray</code>s, …\nApplies an unary function to a <code>PrimitiveArray</code>, optionally …\nConcatenate multiple Array of the same type into a single …\nFunction that can filter arbitrary arrays\nReturns a prepared function optimized to filter multiple …\nFilters an Array, returning elements matching the filter …\nReturns a new Chunk with arrays containing only values …\nChecks if an array of type <code>datatype</code> can perform take …\nReturns a new <code>Array</code> with only indices at <code>indices</code>. Null …\nAn extension trait to polyfill <code>Arc::unwrap_or_clone</code> from …\nOpaque binary data of variable length.\nOpaque binary data of variable length whose offsets are …\nA boolean represented as a single bit.\n<code>true</code> and <code>false</code>.\nThe set of supported logical types in this crate.\nAn <code>i32</code> representing the elapsed time since UNIX epoch …\nAn <code>i64</code> representing the elapsed time since UNIX epoch …\nThe number of elapsed days and milliseconds, stored as 2 …\nTwo i32 representing days and ms\nDecimal value with precision and scale precision is the …\nDecimal backed by 256 bits\nDense union\nA dictionary encoded array by <code>IntegerType</code>.\nA dictionary encoded array (<code>key_type</code>, <code>value_type</code>), where …\nMeasure of elapsed time. This elapsed time is a physical …\nExtension type.\nRepresents Arrow’s metadata of a “column”.\nOpaque binary data of fixed size.\nOpaque binary data of fixed size. Enum parameter specifies …\nA list of some data type with fixed length.\nA list of some logical data type with a fixed number of …\nA 16-bit floating point number.\nAn 16-bit float\nA 32-bit floating point number.\nA <code>f32</code>\nA 64-bit floating point number.\nA <code>f64</code>\nA signed 128-bit integer.\nA signed 16-bit integer.\nA signed 16-bit integer.\nAn <code>i16</code>\nA signed 256-bit integer.\nA signed 32-bit integer.\nA signed 32-bit integer.\nAn <code>i32</code>\nA signed 64-bit integer.\nA signed 64-bit integer.\nAn <code>i64</code>\nA signed 8-bit integer.\nA signed 8-bit integer.\nAn <code>i8</code>\nthe set of valid indices types of a dictionary-encoded …\nA “calendar” interval modeling elapsed time that takes …\nInterval units defined in Arrow\nOpaque binary data of variable length and 64-bit offsets.\nOpaque binary data of variable length whose offsets are …\nA list of some data type with variable length and 64-bit …\nA list of some logical data type whose offsets are …\nA variable-length string in Unicode with UFT-8 encoding …\nA variable-length UTF-8 encoded string whose offsets are …\nA list of some data type with variable length.\nA list of some logical data type whose offsets are …\nA nested type.\nA nested type that is represented as\ntypedef for BTreeMap&lt;String, String&gt; denoting <code>Field</code>’s …\nTime in microseconds.\nTime in milliseconds.\nmonths_days_ns(i32, i32, i64)\nThe number of elapsed months (i32), days (i32) and …\nTime in nanoseconds.\nA Null with no allocation.\nNull type\nThe set of physical types: unique in-memory …\nAn array where each slot has a known compile-time size.\nThe set of all implementations of the sealed trait …\nAn ordered sequence of <code>Field</code>s with associated <code>Metadata</code>.\ntypedef for <code>Arc&lt;Schema&gt;</code>.\nTime in seconds.\nSparse union\nA nested type that contains an arbitrary number of fields.\nA nested <code>DataType</code> with a given number of <code>Field</code>s.\nA 32-bit time representing the elapsed time since midnight …\nA 64-bit time representing the elapsed time since midnight …\nThe time units defined in Arrow.\nA <code>i64</code> representing a timestamp measured in <code>TimeUnit</code> with …\nAn unsigned 16-bit integer.\nAn unsigned 16-bit integer.\nAn <code>u16</code>\nAn unsigned 32-bit integer.\nAn unsigned 32-bit integer.\nAn <code>u32</code>\nAn unsigned 64-bit integer.\nAn unsigned 64-bit integer.\nAn <code>u64</code>\nAn unsigned 8-bit integer.\nAn unsigned 8-bit integer.\nAn <code>u8</code>\nA nested type that represents slots of differing types.\nA nested datatype that can represent slots of differing …\nMode of <code>DataType::Union</code>\nA variable-length string in Unicode with UTF-8 encoding.\nA variable-length UTF-8 encoded string whose offsets are …\nThe number of elapsed whole months.\nIts logical <code>DataType</code>\nThe fields composing this schema.\nsupport get extension for metadata\nIts nullability\nAdditional custom (opaque) metadata.\nOptional metadata.\nIts name\nIf we have the only reference to <code>T</code> then unwrap it. …\nContains the error value\nEnum with all errors in this crate.\nWrapper for an error triggered by a dependency\nError during import or export to/from a format\nWhen an invalid argument is passed to a function.\nWrapper for IO errors\nReturned when functionality is not yet available.\nContains the success value\nWhenever incoming data from the C data interface, IPC or …\nWhenever pushing to a container fails because it does not …\nTypedef for a <code>std::result::Result</code> of an <code>Error</code>.\nABI-compatible struct for <code>ArrowArray</code>\nABI-compatible struct for <code>ArrowArrayStream</code>.\nImplements an iterator of <code>Array</code> consumed from the C stream …\nABI-compatible struct for <code>ArrowSchema</code>\nExports an <code>Box&lt;dyn Array&gt;</code> to the C data interface.\nExports a <code>Field</code> to the C data interface.\nExports an iterator to the C stream interface\nImports an <code>Array</code> from the C data interface.\nImports a <code>Field</code> from the C data interface.\nFunctionality to mmap in-memory data regions.\nCreates a (non-null) <code>BooleanArray</code> from a slice of bits. …\nCreates a (non-null) <code>PrimitiveArray</code> from a slice of values.\nAPIs to read from and write to Arrow’s IPC format.\nAPIs to represent <code>Chunk</code> as a formatted table.\nStruct containing <code>dictionary_id</code> and nested <code>IpcField</code>, …\nStruct containing fields and whether the file is written …\nA struct adapter of Read+Seek+Write to append to IPC files\ndictionary id\noptional children\nThe fields in the schema\nEndianness of the file\nAPIs to read Arrow’s IPC format.\nAPIs to write to Arrow’s IPC format.\nhow dictionaries are tracked in this crate\nThe record contains a number of buffers that does not …\nMetadata of an Arrow IPC file, written in the footer of …\nAn iterator of <code>Chunk</code>s from an Arrow IPC file.\nA bitmap’s size is smaller than the required for the …\nA buffer’s size is smaller than the required for the …\nA buffer’s size is larger than the file size\nFixedSizeBinaryArray has invalid datatype.\nThe block is an invalid flatbuffer\nThe message’s body length is an invalid flatbuffer\nThe message’s buffers is an invalid flatbuffer\nThe compression is an invalid flatbuffer\nThe message’s data is an invalid flatbuffer\nThe footer’s dictionaries is an invalid flatbuffer\nThe footer is an invalid flatbuffer\nThe message’s header is an invalid flatbuffer\nThe dictionary id is an invalid flatbuffer\nThe dictionary is_delta is an invalid flatbuffer\nThe dictionary message is an invalid flatbuffer\nThe message’s nodes is an invalid flatbuffer\nThe footer’s record batches is an invalid flatbuffer\nThe footer’s schema is an invalid flatbuffer\nThe version is an invalid flatbuffer\nThe IPC file does not end with [b’A’, b’R’, b’R…\nThe IPC file does not start with [b’A’, b’R’, b’R…\nInvalid dictionary id\nField id is not a dictionary\nThe message does not contain data\nThe file’s schema does not contain fields\nRecordBatch messages do not contain buffers\nThe message does not contain a header\nRecordBatch messages does not contain nodes\nThe file’s footer does not contain record batches\nThe file’s footer does not contain a schema\nThe first 4 bytes of the last 10 bytes is &lt; 0\nThe different types of errors that reading from IPC can …\nNext item in the stream\nMetadata of an Arrow IPC stream, written at the start of …\nArrow Stream reader.\nEncodes the stream’s status after each read.\ndictionaries can only contain dictionary messages; record …\nRelative positions in the file is &lt; 0\nA live stream without data\nThe blocks in the file\nDeserialize an flatbuffers-encoded Schema message into …\nThe files’ <code>IpcSchema</code>\nThe IPC fields tracking dictionaries\nReads the record batch at position <code>index</code> from the reader.\nReads all file’s dictionaries, if any This function is …\nRead the Arrow IPC file’s metadata\nReads the metadata of the stream\nThe schema that is read from the file footer\nThe schema that is read from the stream’s first message\nThe total size of the file in bytes\nThe IPC version of the stream\nThe size of the IPC buffer\nnumber of bytes of all buffers in the record\nthe size of the file\nDeclared number of elements in the buffer\nDeclared length of the bitmap\nNumber of bits on the IPC buffer\nThe requested dictionary id\nThe requested dictionary id\nBytes required for the <code>length</code> and <code>type</code>\nThe name of the <code>NativeType</code>\nCompression codec\nArrow file writer\nLZ4 (framed)\nAn array <code>Chunk</code> with optional accompanying IPC fields.\nArrow stream writer\nOptions declaring the behaviour of writing to IPC\nZSTD\nWhether the buffers should be compressed and which codec …\nAssigns every dictionary field a unique ID\nConverts a Schema and IpcFields to a flatbuffers-encoded …\nWrites an <code>Array</code> to <code>arrow_data</code>\nReturns a visual representation of <code>Chunk</code>\nMemory maps dictionaries from an IPC file into\nMemory maps an record batch from an IPC file into a <code>Chunk</code>.\nWhether it is <code>i32</code> (false) or <code>i64</code> (true).\nSealed trait describing the subset (<code>i32</code> and <code>i64</code>) of <code>Index</code> …\nA wrapper type of <code>Vec&lt;O&gt;</code> representing the invariants of …\nA wrapper type of <code>Buffer&lt;O&gt;</code> that is guaranteed to:\nThe <code>Scalar</code> implementation of binary (<code>Option&lt;Vec&lt;u8&gt;&gt;</code>).\nThe <code>Scalar</code> implementation of a boolean.\nThe <code>DictionaryArray</code> equivalent of <code>Array</code> for <code>Scalar</code>.\nThe <code>Scalar</code> implementation of fixed size binary ([…\nThe scalar equivalent of <code>FixedSizeListArray</code>. Like …\nThe scalar equivalent of <code>ListArray</code>. Like <code>ListArray</code>, this …\nThe scalar equivalent of <code>MapArray</code>. Like <code>MapArray</code>, this …\nThe representation of a single entry of a …\nThe implementation of <code>Scalar</code> for primitive, semantically …\nTrait object declaring an optional value with a <code>DataType</code>. …\nA single entry of a <code>crate::array::StructArray</code>.\nA single entry of a <code>crate::array::UnionArray</code>.\nThe implementation of <code>Scalar</code> for utf8, semantically …\nconvert itself to\nthe logical type.\nwhether it is valid\ncreates a new <code>Scalar</code> from an <code>Array</code>.\nNumber of days between 0001-01-01 and 1970-01-01\nNumber of microseconds in a second\nNumber of milliseconds in a second\nNumber of milliseconds in a day\nNumber of nanoseconds in a second\nNumber of seconds in a day\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units and …\nAdds an <code>interval</code> to a <code>timestamp</code> in <code>time_unit</code> units without …\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDate</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i32</code> representing a <code>date32</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDate</code>\nconverts a <code>i64</code> representing a <code>date64</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>duration(ms)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(ns)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(s)</code> to <code>Duration</code>\nconverts a <code>i64</code> representing a <code>duration(us)</code> to <code>Duration</code>\nParses an offset of the form <code>&quot;+WX:YZ&quot;</code> or <code>&quot;UTC&quot;</code> into …\nconverts a <code>i32</code> representing a <code>time32(ms)</code> to <code>NaiveTime</code>\nconverts a <code>i32</code> representing a <code>time32(s)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(ns)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>time64(us)</code> to <code>NaiveTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ms)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(ns)</code> to …\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nconverts a <code>i64</code> representing a <code>timestamp(s)</code> to <code>NaiveDateTime</code>\nConverts a timestamp in <code>time_unit</code> and <code>timezone</code> into …")