searchState.loadedDescShard("re_types", 0, "The standard Rerun data types, component types, and …\nAn archetype is a high-level construct that represents a …\nThe name of an <code>Archetype</code>’s field, e.g. <code>positions</code>.\nThe fully-qualified name of an <code>Archetype</code>, e.g. …\nIndicates that the archetype has reflection data available …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an <code>arrow::buffer::ScalarBuffer</code> …\nE.g. too many values (overflows i32).\nConvenience-wrapper around an arrow <code>Buffer</code> that is known …\nDescribes the interface for interpreting an object as a …\nRotation defined with an axis and an angle.\nA <code>Component</code> describes semantic data that can be used by …\nA <code>ComponentBatch</code> represents an array’s worth of <code>Component</code>…\nHolds either an owned <code>ComponentBatch</code> that lives on heap, …\nSome <code>ComponentBatch</code>, optionally with an overridden …\nA <code>ComponentDescriptor</code> fully describes the semantics of a …\nThe fully-qualified name of a <code>Component</code>, e.g. …\nNumber of decimals shown for all float display methods.\nNumber of decimals shown for all float display methods. …\nThe fully-qualified name of a [<code>Datatype</code>], e.g. …\nContains the error value\nContains the error value\nA generic indicator component that can be specialized for …\nThe associated indicator component, whose presence …\nA <code>Loggable</code> represents a single instance in an array of …\nA <code>LoggableBatch</code> represents an array’s worth of <code>Loggable</code> …\nAn arbitrary named indicator component.\nContains the success value\nContains the success value\nRotation defined by a quaternion.\nA 3D rotation.\nApproximations of stack and heap size for both internal …\nViews are the panels shown in the viewer’s viewport and …\nThe unique name of a view\nReturns all component descriptors that must, should and …\nOptional name of the field within <code>Archetype</code> associated …\nOptional name of the <code>Archetype</code> associated with this data.\nArchetype are the high-level things you can log, like <code>Image</code>…\nThe underlying <code>arrow2::datatypes::DataType</code>, excluding …\nThe underlying <code>arrow::datatypes::DataType</code>, excluding …\nExposes the object’s contents as a set of <code>ComponentBatch</code>…\nReturns the <em>unresolved</em> backtrace associated with this …\nReturns the <em>unresolved</em> backtrace associated with this …\nThe component data.\nThe blueprint-specific components.\nCast POD (plain-old-data) types to another POD type.\nCast POD (plain-old-data) types to <code>u8</code>.\nSemantic name associated with this data.\nComponents are the basic building blocks of <code>archetypes</code>.\nThe low-level datatypes that <code>components</code> are built from.\nImplements <code>crate::Component</code> for any given type that is a …\nReturns the complete <code>ComponentDescriptor</code> for this <code>Component</code>…\nReturns the complete <code>ComponentDescriptor</code> for this …\nIf set, will override the <code>ComponentBatch</code>’s …\nReadable name for displaying in UI.\nWeb URL to the Rerun documentation for this component.\nRe-exports of external crates that are used throughout the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow2 array, deserializes it into a collection …\nGiven an iterator of Arrow arrays and their respective …\nGiven an Arrow array, deserializes it into a collection of …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nReturns the fully-qualified name, e.g. …\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nPrecomputed hash of the string.\nReturns the total size of <code>self</code> on the heap, in bytes.\nImage-related utilities.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nCreates a <code>ComponentBatch</code> out of the associated …\nIf this is an indicator component, for which archetype?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this an indicator component for an archetype?\nIs <code>Self</code> just plain old data?\nDetermine if component matches a string\nThe fully-qualified name of this archetype, e.g. …\nThe fully-qualified name of this component, e.g. …\nThe fully-qualified name of this component batch, e.g. …\nCreate an array of indicator components of this type with …\nThe number of instances of T stored in this buffer.\nReturns all component descriptors that <em>may</em> be provided by …\nSets <code>Self::archetype_field_name</code> to the given one iff it’…\nSets <code>Self::archetype_name</code> to the given one iff it’s not …\nReturns all component descriptors that <em>should</em> be provided …\nRun-time reflection for reading meta-data about components …\nReturns all component descriptors that <em>must</em> be provided by …\nReturns the unqualified name, e.g. <code>Points3D</code>.\nReturns the unqualified name, e.g. …\nReturns the unqualified name, e.g. <code>Position2D</code>.\nReturns the unqualified name, e.g. <code>Vec2D</code>.\nThe number of bytes stored in this buffer\nReturns a new <code>ArrowBuffer</code> that is a slice of this buffer …\nReturns the total size of <code>self</code> on the stack, in bytes.\nUseful macro for statically asserting that a <code>struct</code> …\nInternal helpers; not part of the public API.\nGiven an iterator of owned or reference values to the …\nSerializes the batch into an Arrow array.\nSerializes all non-null <code>Component</code>s of this bundle into …\nGiven an iterator of owned or reference values to the …\nGiven an iterator of options of owned or reference values …\nSerializes the batch into an Arrow list array with a …\nGiven an iterator of options of owned or reference values …\nReturns the total size of <code>self</code> in bytes, accounting for …\nUnconditionally sets <code>Self::archetype_field_name</code> to the …\nUnconditionally sets <code>Self::archetype_name</code> to the given one.\n<strong>Archetype</strong>: The annotation context provides additional …\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\n<strong>Archetype</strong>: A video binary.\n<strong>Archetype</strong>: A bar chart.\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\n<strong>Archetype</strong>: Empties all the components of an entity.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\n<strong>Archetype</strong>: Geospatial line strings with positions …\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\n<strong>Archetype</strong>: A list of edges in a graph.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\n<strong>Archetype</strong>: A monochrome or color image.\n<strong>Archetype</strong>: One or more transforms between the current …\n<strong>Archetype</strong>: 2D line strips with positions and optional …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\n<strong>Archetype</strong>: Define the style properties for a line series …\n<strong>Archetype</strong>: Define the style properties for a point series …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\n<strong>Archetype</strong>: A text element intended to be displayed in its …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\n<strong>Archetype</strong>: References a single video frame.\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nConfigures the zoom-dependent scalar aggregation.\nA color multiplier applied to the whole asset.\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nVisual length of the 3 axes.\nThe asset’s bytes.\nThe asset’s bytes.\nThe encoded content of some image file, e.g. a PNG or JPEG.\nThe raw depth image data.\nThe raw image data.\nThe raw image data.\nSets the view coordinates for the camera.\nOptional center positions of the boxes.\nOptional center positions of the boxes.\nOptional center positions of the ellipsoids.\nOptional class Ids for the points.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional class ID for the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional class Ids for the points.\nOptional <code>components::ClassId</code>s for the lines.\nOptional <code>components::ClassId</code>s for the lines.\nOptional class Ids for the vertices.\nOptional class Ids for the points.\nOptional class Ids for the points.\nThe color of the bar chart\nColor for the corresponding series.\nColor for the corresponding series.\nOptional color to use for the log line in the Rerun Viewer.\nColormap to use for rendering the depth image.\nOptional colors for the points.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the boxes.\nOptional colors for the capsules.\nOptional colors for the ellipsoids.\nOptional colors for the line strings.\nOptional colors for the points.\nOptional colors for the boxes.\nOptional colors for the line strips.\nOptional colors for the line strips.\nOptional colors for the points.\nOptional colors for the points.\nList of class descriptions, mapping class indices to class …\nThe tensor data\nThe expected range of depth values.\nWhether the entity path at which this is logged is …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies the 2D …\nA list of node tuples.\nOptionally choose whether the boxes are drawn with lines …\nOptionally choose whether the ellipsoids are drawn with …\nReturns a non-recursive clear.\nThe format of the image.\nThe format of the image.\nThe format of the image.\nReturns the argument unchanged.\nSpecifies if the graph is directed or undirected.\nAll half-extents that make up the batch of boxes.\nAll half-extents that make up the batch of boxes.\nFor each ellipsoid, half of its size on its three axes.\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the arrows.\nOptional text labels for the arrows.\nOptional text labels for the boxes.\nOptional text labels for the boxes.\nOptional text labels for the capsules, which will be …\nOptional text labels for the ellipsoids.\nOptional text labels for the node.\nOptional text labels for the line strips.\nOptional text labels for the line strips.\nOptional text labels for the points.\nOptional text labels for the points.\nLengths of the capsules, defined as the distance between …\nThe verbosity level of the message.\nOptional radii for the lines used when the ellipsoid is …\nThe line strings, expressed in EPSG:4326 coordinates …\nWhat shape to use to represent the point\nSize of the marker.\n3x3 transformation matrices.\n3x3 transformation matrix.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the asset.\nThe Media Type of the text.\nAn optional floating point value that specifies how long a …\nDisplay name of the series.\nDisplay name of the series.\nCreate a new <code>Clear</code>.\nA list of node IDs.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering several images.\nOpacity of the image, useful for layering the segmentation …\nAll the origin (base) positions for each arrow in the …\nAll the origin (base) positions for each arrow in the …\nScale the radii of the points in the point cloud generated …\nThe EPSG:4326 coordinates for the points …\nOptional center positions of the nodes.\nAll the 2D positions at which the point cloud shows points.\nAll the 3D positions at which the point cloud shows points.\nRotation via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nRotations via quaternion.\nOptional radii for the arrows.\nOptional radii for the arrows.\nOptional radii for the lines that make up the boxes.\nOptional radii for the lines that make up the boxes.\nRadii of the capsules.\nOptional radii for the line strings.\nOptional radii for the points, effectively turning them …\nOptional radii for nodes.\nOptional radii for the line strips.\nOptional radii for the line strips.\nOptional radii for the points, effectively turning them …\nOptional radii for the points, effectively turning them …\nReturns a recursive clear.\nSpecifies the relation this transform establishes between …\nPixel resolution (usually integers) of child image space. …\nRotation via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nRotations via axis + angle.\nThe scalar value to log.\nScaling factor.\nScaling factors.\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nAll the actual 3D line strips that make up the batch.\nContents of the text document.\nThe body of the message.\nReferences the closest video frame to this timestamp.\nTranslation vector.\nOptional translations of the capsules.\nTranslation vectors.\nOptional indices for the triangles that make up the mesh.\nThe expected range of values.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nAll the vectors for each arrow in the batch.\nAll the vectors for each arrow in the batch.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nOptional reference to an entity with a …\nStroke width for the corresponding series.\nThe directions of the [x, y, z] axes.\n<strong>Archetype</strong>: The annotation context provides additional …\nIndicator component for the <code>AnnotationContext</code> …\nThe total number of components in the archetype: 1 …\nList of class descriptions, mapping class indices to class …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AnnotationContext</code>.\n<strong>Archetype</strong>: 2D arrows with optional colors, radii, labels, …\nIndicator component for the <code>Arrows2D</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates new 2D arrows pointing in the given directions, …\nCalls <code>U::from(self)</code>.\nOptional text labels for the arrows.\nCreate a new <code>Arrows2D</code>.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nAll the vectors for each arrow in the batch.\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nOptional text labels for the arrows.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D arrows with optional colors, radii, labels, …\nIndicator component for the <code>Arrows3D</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nOptional colors for the points.\nReturns the argument unchanged.\nCreates new 3D arrows pointing in the given directions, …\nCalls <code>U::from(self)</code>.\nOptional text labels for the arrows.\nCreate a new <code>Arrows3D</code>.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\nAll the vectors for each arrow in the batch.\nOptional class Ids for the points.\nOptional colors for the points.\nOptional text labels for the arrows.\nAll the origin (base) positions for each arrow in the …\nOptional radii for the arrows.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: A prepacked 3D asset (<code>.gltf</code>, <code>.glb</code>, <code>.obj</code>, <code>.stl</code>, …\nIndicator component for the <code>Asset3D</code> …\nThe total number of components in the archetype: 1 …\nA color multiplier applied to the whole asset.\nThe asset’s bytes.\nReturns the argument unchanged.\nCreates a new <code>Asset3D</code> from the file contents at <code>path</code>.\nCreates a new <code>Asset3D</code> from the given <code>contents</code>.\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>Asset3D</code>.\nA color multiplier applied to the whole asset.\nThe Media Type of the asset.\n<strong>Archetype</strong>: A video binary.\nIndicator component for the <code>AssetVideo</code> …\nThe total number of components in the archetype: 1 …\nThe asset’s bytes.\nReturns the argument unchanged.\nCreates a new <code>AssetVideo</code> from the given <code>contents</code>.\nCreates a new <code>AssetVideo</code> from the file contents at <code>path</code>.\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>AssetVideo</code>.\nDetermines the presentation timestamps of all frames …\nThe Media Type of the asset.\n<strong>Archetype</strong>: A bar chart.\nIndicator component for the <code>BarChart</code> …\nThe total number of components in the archetype: 1 …\nThe color of the bar chart\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>BarChart</code>.\nThe values. Should always be a 1-dimensional tensor (i.e. …\nThe color of the bar chart\n<strong>Archetype</strong>: 2D boxes with half-extents and optional center, …\nIndicator component for the <code>Boxes2D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes2D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes2D</code> with <code>Self::half_sizes</code> created from …\nAll half-extents that make up the batch of boxes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the boxes.\nCreate a new <code>Boxes2D</code>.\nOptional radii for the lines that make up the boxes.\nOptional choice of whether the text labels should be shown …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nAn optional floating point value that specifies the 2D …\nOptional text labels for the boxes.\nOptional radii for the lines that make up the boxes.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D boxes with half-extents and optional center, …\nIndicator component for the <code>Boxes3D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nOptionally choose whether the boxes are drawn with lines …\nReturns the argument unchanged.\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> centered around …\nCreates new <code>Boxes3D</code> with <code>Self::centers</code> and <code>Self::half_sizes</code>…\nCreates new <code>Boxes3D</code> with <code>Self::half_sizes</code> created from …\nAll half-extents that make up the batch of boxes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the boxes.\nCreate a new <code>Boxes3D</code>.\nRotations via quaternion.\nOptional radii for the lines that make up the boxes.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional center positions of the boxes.\nOptional <code>components::ClassId</code>s for the boxes.\nOptional colors for the boxes.\nOptionally choose whether the boxes are drawn with lines …\nOptional text labels for the boxes.\nRotations via quaternion.\nOptional radii for the lines that make up the boxes.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D capsules; cylinders with hemispherical caps.\nIndicator component for the <code>Capsules3D</code> …\nThe total number of components in the archetype: 2 …\nOptional class ID for the ellipsoids.\nOptional colors for the capsules.\nReturns the argument unchanged.\nCreates a new <code>Capsules3D</code> where each capsule extends …\nCreates a new <code>Capsules3D</code> with the given axis-aligned …\nCalls <code>U::from(self)</code>.\nOptional text labels for the capsules, which will be …\nLengths of the capsules, defined as the distance between …\nCreate a new <code>Capsules3D</code>.\nRotations via quaternion.\nRadii of the capsules.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional translations of the capsules.\nOptional class ID for the ellipsoids.\nOptional colors for the capsules.\nOptional text labels for the capsules, which will be …\nRotations via quaternion.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional translations of the capsules.\n<strong>Archetype</strong>: A depth image, i.e. as captured by a depth …\nIndicator component for the <code>DepthImage</code> …\nThe total number of components in the archetype: 2 …\nThe raw depth image data.\nColormap to use for rendering the depth image.\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nConstruct a depth image from a byte buffer given its …\nFrom an 16-bit grayscale image.\nCalls <code>U::from(self)</code>.\nAn optional floating point value that specifies how long a …\nCreate a new <code>DepthImage</code>.\nScale the radii of the points in the point cloud generated …\nTry to construct a <code>DepthImage</code> from anything that can be …\nColormap to use for rendering the depth image.\nThe expected range of depth values.\nAn optional floating point value that specifies the 2D …\nAn optional floating point value that specifies how long a …\nScale the radii of the points in the point cloud generated …\n<strong>Archetype</strong>: Spatially disconnect this entity from its …\nIndicator component for the <code>DisconnectedSpace</code> …\nThe total number of components in the archetype: 1 …\nWhether the entity path at which this is logged is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DisconnectedSpace</code>.\n<strong>Archetype</strong>: 3D ellipsoids or spheres.\nIndicator component for the <code>Ellipsoids3D</code> …\nThe total number of components in the archetype: 1 …\nOptional center positions of the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional colors for the ellipsoids.\nOptionally choose whether the ellipsoids are drawn with …\nReturns the argument unchanged.\nCreates a new <code>Ellipsoids3D</code> with <code>Self::centers</code> and …\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nCreates a new <code>Ellipsoids3D</code> with <code>Self::half_sizes</code>.\nCreates a new <code>Ellipsoids3D</code> for spheres with the given …\nFor each ellipsoid, half of its size on its three axes.\nCalls <code>U::from(self)</code>.\nOptional text labels for the ellipsoids.\nOptional radii for the lines used when the ellipsoid is …\nCreate a new <code>Ellipsoids3D</code>.\nRotations via quaternion.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\nOptional center positions of the ellipsoids.\nOptional class ID for the ellipsoids.\nOptional colors for the ellipsoids.\nOptionally choose whether the ellipsoids are drawn with …\nOptional text labels for the ellipsoids.\nOptional radii for the lines used when the ellipsoid is …\nRotations via quaternion.\nRotations via axis + angle.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: An image encoded as e.g. a JPEG or PNG.\nIndicator component for the <code>EncodedImage</code> …\nThe total number of components in the archetype: 1 …\nThe encoded content of some image file, e.g. a PNG or JPEG.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCreates a new image from the file contents at <code>path</code>.\nConstruct an image given the encoded content of some image …\nCalls <code>U::from(self)</code>.\nThe Media Type of the asset.\nCreate a new <code>EncodedImage</code>.\nOpacity of the image, useful for layering several images.\nAn optional floating point value that specifies the 2D …\nThe Media Type of the asset.\nOpacity of the image, useful for layering several images.\n<strong>Archetype</strong>: Geospatial line strings with positions …\nIndicator component for the <code>GeoLineStrings</code> …\nThe total number of components in the archetype: 1 …\nOptional colors for the line strings.\nReturns the argument unchanged.\nCreate a new <code>GeoLineStrings</code> from EPSG:4326 latitude and …\nCalls <code>U::from(self)</code>.\nThe line strings, expressed in EPSG:4326 coordinates …\nCreate a new <code>GeoLineStrings</code>.\nOptional radii for the line strings.\nOptional colors for the line strings.\nOptional radii for the line strings.\n<strong>Archetype</strong>: Geospatial points with positions expressed in …\nIndicator component for the <code>GeoPoints</code> …\nThe total number of components in the archetype: 1 …\nOptional class Ids for the points.\nOptional colors for the points.\nReturns the argument unchanged.\nCreate a new <code>GeoPoints</code> from EPSG:4326 latitude and …\nCalls <code>U::from(self)</code>.\nCreate a new <code>GeoPoints</code>.\nThe EPSG:4326 coordinates for the points …\nOptional radii for the points, effectively turning them …\nOptional class Ids for the points.\nOptional colors for the points.\nOptional radii for the points, effectively turning them …\n<strong>Archetype</strong>: A list of edges in a graph.\nIndicator component for the <code>GraphEdges</code> …\nThe total number of components in the archetype: 1 …\nA list of node tuples.\nReturns the argument unchanged.\nSpecifies if the graph is directed or undirected.\nCalls <code>U::from(self)</code>.\nCreate a new <code>GraphEdges</code>.\nCreates a graph with directed edges.\nSpecifies if the graph is directed or undirected.\nCreates a graph with undirected edges.\n<strong>Archetype</strong>: A list of nodes in a graph with optional …\nIndicator component for the <code>GraphNodes</code> …\nThe total number of components in the archetype: 1 …\nOptional colors for the boxes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the node.\nCreate a new <code>GraphNodes</code>.\nA list of node IDs.\nOptional center positions of the nodes.\nOptional radii for nodes.\nOptional choice of whether the text labels should be shown …\nOptional colors for the boxes.\nOptional text labels for the node.\nOptional center positions of the nodes.\nOptional radii for nodes.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: A monochrome or color image.\nIndicator component for the <code>Image</code> …\nThe total number of components in the archetype: 2 …\nThe raw image data.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nConstruct an image from a byte buffer given its …\nTry to construct an <code>Image</code> from a color model (L, RGB, …\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct an image from a byte buffer given its …\nCreates a new <code>Image</code> from the contents of a file.\nCreates a new <code>Image</code> from a file.\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from the contents of an image file.\nFrom an 8-bit grayscale image.\nConstruct an image from a byte buffer given its resolution …\nAssumes RGB, 8-bit per channel, interleaved as <code>RGBRGBRGB</code>.\nAssumes RGBA, 8-bit per channel, with separate alpha.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Image</code>.\nOpacity of the image, useful for layering several images.\nAn optional floating point value that specifies the 2D …\nOpacity of the image, useful for layering several images.\n<strong>Archetype</strong>: One or more transforms between the current …\nIndicator component for the <code>InstancePoses3D</code> …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n3x3 transformation matrices.\nCreate a new <code>InstancePoses3D</code>.\nRotations via quaternion.\nRotations via axis + angle.\nScaling factors.\nTranslation vectors.\n3x3 transformation matrices.\nRotations via quaternion.\nRotations via axis + angle.\nScaling factors.\nTranslation vectors.\n<strong>Archetype</strong>: 2D line strips with positions and optional …\nIndicator component for the <code>LineStrips2D</code> …\nThe total number of components in the archetype: 1 …\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the line strips.\nCreate a new <code>LineStrips2D</code>.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 2D line strips that make up the batch.\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nAn optional floating point value that specifies the 2D …\nOptional text labels for the line strips.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: 3D line strips with positions and optional …\nIndicator component for the <code>LineStrips3D</code> …\nThe total number of components in the archetype: 1 …\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional text labels for the line strips.\nCreate a new <code>LineStrips3D</code>.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\nAll the actual 3D line strips that make up the batch.\nOptional <code>components::ClassId</code>s for the lines.\nOptional colors for the line strips.\nOptional text labels for the line strips.\nOptional radii for the line strips.\nOptional choice of whether the text labels should be shown …\n<strong>Archetype</strong>: A 3D triangle mesh as specified by its per-mesh …\nIndicator component for the <code>Mesh3D</code> …\nThe total number of components in the archetype: 1 …\nA color multiplier applied to the whole mesh.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nOptional class Ids for the vertices.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Mesh3D</code>.\nThe total number of triangles.\nThe total number of vertices.\nCheck that this is a valid mesh, e.g. that the vertex …\nOptional indices for the triangles that make up the mesh.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nThe positions of each vertex.\nAn optional uv texture coordinate for each vertex.\nA color multiplier applied to the whole mesh.\nUse this image as the albedo texture.\nOptional albedo texture.\nThe format of the <code>albedo_texture_buffer</code>, if any.\nUse this image as the albedo texture.\nOptional class Ids for the vertices.\nOptional indices for the triangles that make up the mesh.\nAn optional color for each vertex.\nAn optional normal for each vertex.\nAn optional uv texture coordinate for each vertex.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Camera perspective projection (a.k.a. …\nIndicator component for the <code>Pinhole</code> …\nWidth/height ratio of the camera sensor.\nSets the view coordinates for the camera.\nX &amp; Y focal length in pixels.\nField of View on the Y axis, i.e. the angle between top …\nReturns the argument unchanged.\nCreates a pinhole from the camera focal length and …\nCreates a pinhole from the camera vertical field of view …\nCamera projection, from image coordinates to view …\nThe distance from the camera origin to the image plane …\nCalls <code>U::from(self)</code>.\nCreate a new <code>Pinhole</code>.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nThe resolution of the camera sensor in pixels.\nPixel resolution (usually integers) of child image space. …\nGiven pixel coordinates and a world-space depth, return a …\nSets the view coordinates for the camera.\nThe distance from the camera origin to the image plane …\nPrincipal point of the pinhole camera, i.e. the …\nPixel resolution (usually integers) of child image space. …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A 2D point cloud with positions and optional …\nIndicator component for the <code>Points2D</code> …\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nCreate a new <code>Points2D</code>.\nAll the 2D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nOptional class Ids for the points.\nOptional colors for the points.\nAn optional floating point value that specifies the 2D …\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A 3D point cloud with positions and optional …\nIndicator component for the <code>Points3D</code> …\nOptional class Ids for the points.\nOptional colors for the points.\nReturns the argument unchanged.\nCreates a new <code>Points3D</code> from the contents of a <code>.ply</code> file.\nCreates a new <code>Points3D</code> from a <code>.ply</code> file.\nCalls <code>U::from(self)</code>.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nCreate a new <code>Points3D</code>.\nAll the 3D positions at which the point cloud shows points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nOptional class Ids for the points.\nOptional colors for the points.\nOptional keypoint IDs for the points, identifying them …\nOptional text labels for the points.\nOptional radii for the points, effectively turning them …\nOptional choice of whether the text labels should be shown …\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A double-precision scalar, e.g. for use for …\nIndicator component for the <code>Scalar</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Scalar</code>.\nThe scalar value to log.\nThe total number of components in the archetype: 2 …\n<strong>Archetype</strong>: An image made up of integer <code>components::ClassId</code>…\nIndicator component for the <code>SegmentationImage</code> …\nThe raw image data.\nAn optional floating point value that specifies the 2D …\nThe format of the image.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SegmentationImage</code>.\nOpacity of the image, useful for layering the segmentation …\nTry to construct a <code>SegmentationImage</code> from anything that …\nAn optional floating point value that specifies the 2D …\nOpacity of the image, useful for layering the segmentation …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Define the style properties for a line series …\nIndicator component for the <code>SeriesLine</code> …\nConfigures the zoom-dependent scalar aggregation.\nColor for the corresponding series.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay name of the series.\nCreate a new <code>SeriesLine</code>.\nStroke width for the corresponding series.\nConfigures the zoom-dependent scalar aggregation.\nColor for the corresponding series.\nDisplay name of the series.\nStroke width for the corresponding series.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Define the style properties for a point series …\nIndicator component for the <code>SeriesPoint</code> …\nColor for the corresponding series.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhat shape to use to represent the point\nSize of the marker.\nDisplay name of the series.\nCreate a new <code>SeriesPoint</code>.\nColor for the corresponding series.\nWhat shape to use to represent the point\nSize of the marker.\nDisplay name of the series.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: An N-dimensional array of numbers.\nIndicator component for the <code>Tensor</code> …\nAccessor to the underlying <code>TensorData</code>.\nThe tensor data\nReturns the argument unchanged.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from something that can be turned into …\nCalls <code>U::from(self)</code>.\nCreate a new <code>Tensor</code>.\nTry to construct a <code>Tensor</code> from anything that can be …\nThe expected range of values.\nUpdate the <code>names</code> of the contained <code>TensorData</code> dimensions.\nThe expected range of values.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A text element intended to be displayed in its …\nIndicator component for the <code>TextDocument</code> …\nReturns the argument unchanged.\nCreates a new <code>TextDocument</code> from the contents of a utf8 …\nCreates a new <code>TextDocument</code> from a utf8 file.\nCreates a new <code>TextDocument</code> containing Markdown.\nCalls <code>U::from(self)</code>.\nThe Media Type of the text.\nCreate a new <code>TextDocument</code>.\nContents of the text document.\nThe Media Type of the text.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: A log entry in a text log, comprised of a text …\nIndicator component for the <code>TextLog</code> …\nOptional color to use for the log line in the Rerun Viewer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe verbosity level of the message.\nCreate a new <code>TextLog</code>.\nThe body of the message.\nOptional color to use for the log line in the Rerun Viewer.\nThe verbosity level of the message.\nThe identity transform.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: A transform between two 3D spaces, i.e. a pose.\nIndicator component for the <code>Transform3D</code> …\nVisual length of the 3 axes.\nCreate a new <code>Transform3D</code> which when logged will clear the …\nReturns the argument unchanged.\nFrom a translation.\nIndicate that this transform is from parent to child.\nFrom a rotation\nFrom a rotation &amp; scale\nFrom a scale\nFrom a translation.\nFrom a translation applied after a 3x3 matrix.\nFrom a translation applied after a rotation, known as a …\nFrom a translation, applied after a rotation &amp; scale, …\nFrom a translation applied after a scale.\nCalls <code>U::from(self)</code>.\n3x3 transformation matrix.\nRotation via quaternion.\nSpecifies the relation this transform establishes between …\nRotation via axis + angle.\nScaling factor.\nTranslation vector.\nVisual length of the 3 axes.\n3x3 transformation matrix.\nRotation via quaternion.\nSpecifies the relation this transform establishes between …\nConvenience method that takes any kind of (single) …\nRotation via axis + angle.\nScaling factor.\nTranslation vector.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: References a single video frame.\nIndicator component for the <code>VideoFrameReference</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VideoFrameReference</code>.\nReferences the closest video frame to this timestamp.\nOptional reference to an entity with a …\nOptional reference to an entity with a …\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\nThe total number of components in the archetype: 1 …\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\n<strong>Archetype</strong>: How we interpret the coordinate system of an …\nIndicator component for the <code>ViewCoordinates</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewCoordinates</code>.\nThe directions of the [x, y, z] axes.\nMove an arrow array into an <code>ArrayRef</code>.\nThe blueprint-specific archetypes.\nThe blueprint-specific components.\nThe blueprint-specific datatypes.\nThe blueprint-specific views.\n<strong>Archetype</strong>: Configuration for the background of a view.\n<strong>Archetype</strong>: The description of a container.\n<strong>Archetype</strong>: The query for the dataframe view.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\n<strong>Archetype</strong>: Resolves collisions between the bounding …\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\n<strong>Archetype</strong>: A force between each pair of nodes that …\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\n<strong>Archetype</strong>: Configuration for the 3D line grid.\n<strong>Archetype</strong>: Configuration for the background map of the map …\n<strong>Archetype</strong>: Configuration of the map view zoom level.\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\n<strong>Archetype</strong>: Configuration for the legend of a plot.\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\n<strong>Archetype</strong>: The description of a single view.\n<strong>Archetype</strong>: The contents of a <code>View</code>.\n<strong>Archetype</strong>: The top-level description of the viewport.\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nWhich tab is active.\nShould empty cells be filled with latest-at queries?\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nThe class of the view.\nThe layout shares of each column in the container.\nColor used for the solid background type.\nColor used for the grid.\nHow scalar values map to colors.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nTo what corner the legend is aligned.\nThe name of the container.\nThe name of the view.\nThe target distance between two nodes.\nWhether the center force is enabled.\nWhether the collision force is enabled.\nWhether the link force is enabled.\nWhether the many body force is enabled.\nWhether the position force is enabled.\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nGamma exponent applied to normalized values before mapping …\nHow many columns this grid should have.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nSpecifies how often this force should be applied per …\nSpecifies how often this force should be applied per …\nThe type of the background.\nFilter used when zooming in on the tensor.\nShow one tab as maximized?\nControls the distance to the near clip plane in 3D scene …\nHashes of all recommended views the viewer has already …\nIn what plane the grid is drawn.\nThe position where the nodes should be pulled towards.\nMap provider and style to use.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe range of the axis.\nControls the visible range of a 2D view.\nThe time ranges to show for each timeline unless specified …\nThe layout of the views\nThe layout shares of each row of the container.\nHow the image is scaled to fit the view.\nSelected columns. If unset, all columns are selected.\nAny dimension listed here will have a slider for the index.\nThe “anchor point” of this view.\nSpace between grid lines spacing of one line to the next …\nCurrent state of the panels.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nThe strength of the force.\nHow thick the lines should be in ui units.\nThe timeline for this query.\nWhether this container is visible.\nWhether the grid is visible.\nWhether the legend is shown at all.\nWhether this view is visible.\nWhich dimension to map to width.\nZoom level for the map.\nIf enabled, the Y axis range will remain locked to the …\n<strong>Archetype</strong>: Configuration for the background of a view.\nIndicator component for the <code>Background</code> …\nThe total number of components in the archetype: 1 …\nColor used for the solid background type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe type of the background.\nCreate a new <code>Background</code>.\nColor used for the solid background type.\n<strong>Archetype</strong>: The description of a container.\nIndicator component for the <code>ContainerBlueprint</code> …\nThe total number of components in the archetype: 1 …\nWhich tab is active.\nThe layout shares of each column in the container.\nThe class of the view.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nThe name of the container.\nReturns the argument unchanged.\nHow many columns this grid should have.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ContainerBlueprint</code>.\nThe layout shares of each row of the container.\nWhether this container is visible.\nWhich tab is active.\nThe layout shares of each column in the container.\n<code>ContainerId</code>s or <code>ViewId</code>s that are children of this …\nThe name of the container.\nHow many columns this grid should have.\nThe layout shares of each row of the container.\nWhether this container is visible.\n<strong>Archetype</strong>: The query for the dataframe view.\nIndicator component for the <code>DataframeQuery</code> …\nThe total number of components in the archetype: 0 …\nShould empty cells be filled with latest-at queries?\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>DataframeQuery</code>.\nSelected columns. If unset, all columns are selected.\nThe timeline for this query.\nShould empty cells be filled with latest-at queries?\nIf provided, only rows whose timestamp is within this …\nIf provided, only show rows which contains a logged event …\nSelected columns. If unset, all columns are selected.\nThe timeline for this query.\n<strong>Archetype</strong>: Tries to move the center of mass of the graph …\nIndicator component for the <code>ForceCenter</code> …\nThe total number of components in the archetype: 0 …\nWhether the center force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForceCenter</code>.\nThe strength of the force.\nWhether the center force is enabled.\nThe strength of the force.\n<strong>Archetype</strong>: Resolves collisions between the bounding …\nIndicator component for the <code>ForceCollisionRadius</code> …\nThe total number of components in the archetype: 0 …\nWhether the collision force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecifies how often this force should be applied per …\nCreate a new <code>ForceCollisionRadius</code>.\nThe strength of the force.\nWhether the collision force is enabled.\nSpecifies how often this force should be applied per …\nThe strength of the force.\n<strong>Archetype</strong>: Aims to achieve a target distance between two …\nIndicator component for the <code>ForceLink</code> …\nThe total number of components in the archetype: 0 …\nThe target distance between two nodes.\nWhether the link force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecifies how often this force should be applied per …\nCreate a new <code>ForceLink</code>.\nThe target distance between two nodes.\nWhether the link force is enabled.\nSpecifies how often this force should be applied per …\n<strong>Archetype</strong>: A force between each pair of nodes that …\nIndicator component for the <code>ForceManyBody</code> …\nThe total number of components in the archetype: 0 …\nWhether the many body force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForceManyBody</code>.\nThe strength of the force.\nWhether the many body force is enabled.\nThe strength of the force.\n<strong>Archetype</strong>: Similar to gravity, this force pulls nodes …\nIndicator component for the <code>ForcePosition</code> …\nThe total number of components in the archetype: 0 …\nWhether the position force is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ForcePosition</code>.\nThe position where the nodes should be pulled towards.\nThe strength of the force.\nWhether the position force is enabled.\nThe position where the nodes should be pulled towards.\nThe strength of the force.\n<strong>Archetype</strong>: Configuration for the 3D line grid.\nIndicator component for the <code>LineGrid3D</code> …\nThe total number of components in the archetype: 0 …\nColor used for the grid.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>LineGrid3D</code>.\nIn what plane the grid is drawn.\nSpace between grid lines spacing of one line to the next …\nHow thick the lines should be in ui units.\nWhether the grid is visible.\nColor used for the grid.\nIn what plane the grid is drawn.\nSpace between grid lines spacing of one line to the next …\nHow thick the lines should be in ui units.\nWhether the grid is visible.\n<strong>Archetype</strong>: Configuration for the background map of the map …\nIndicator component for the <code>MapBackground</code> …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>MapBackground</code>.\nMap provider and style to use.\n<strong>Archetype</strong>: Configuration of the map view zoom level.\nIndicator component for the <code>MapZoom</code> …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>MapZoom</code>.\nZoom level for the map.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Controls the distance to the near clip plane in …\nIndicator component for the <code>NearClipPlane</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nControls the distance to the near clip plane in 3D scene …\nCreate a new <code>NearClipPlane</code>.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Shared state for the 3 collapsible panels.\nIndicator component for the <code>PanelBlueprint</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PanelBlueprint</code>.\nCurrent state of the panels.\nCurrent state of the panels.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configuration for the legend of a plot.\nIndicator component for the <code>PlotLegend</code> …\nTo what corner the legend is aligned.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>PlotLegend</code>.\nWhether the legend is shown at all.\nTo what corner the legend is aligned.\nWhether the legend is shown at all.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configuration for the scalar axis of a plot.\nIndicator component for the <code>ScalarAxis</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ScalarAxis</code>.\nThe range of the axis.\nThe range of the axis.\nIf enabled, the Y axis range will remain locked to the …\nIf enabled, the Y axis range will remain locked to the …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configures how tensor scalars are mapped to …\nIndicator component for the <code>TensorScalarMapping</code> …\nHow scalar values map to colors.\nReturns the argument unchanged.\nGamma exponent applied to normalized values before mapping …\nCalls <code>U::from(self)</code>.\nFilter used when zooming in on the tensor.\nCreate a new <code>TensorScalarMapping</code>.\nHow scalar values map to colors.\nGamma exponent applied to normalized values before mapping …\nFilter used when zooming in on the tensor.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Specifies a 2D slice of a tensor.\nIndicator component for the <code>TensorSliceSelection</code> …\nReturns the argument unchanged.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TensorSliceSelection</code>.\nAny dimension listed here will have a slider for the index.\nWhich dimension to map to width.\nWhich dimension to map to height.\nSelected indices for all other dimensions.\nAny dimension listed here will have a slider for the index.\nWhich dimension to map to width.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: Configures how a selected tensor slice is shown …\nIndicator component for the <code>TensorViewFit</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>TensorViewFit</code>.\nHow the image is scaled to fit the view.\nHow the image is scaled to fit the view.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: The description of a single view.\nIndicator component for the <code>ViewBlueprint</code> …\nThe class of the view.\nThe name of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewBlueprint</code>.\nThe “anchor point” of this view.\nWhether this view is visible.\nThe name of the view.\nThe “anchor point” of this view.\nWhether this view is visible.\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: The contents of a <code>View</code>.\nIndicator component for the <code>ViewContents</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ViewContents</code>.\nThe <code>QueryExpression</code> that populates the contents for the …\nThe total number of components in the archetype: 0 …\n<strong>Archetype</strong>: The top-level description of the viewport.\nIndicator component for the <code>ViewportBlueprint</code> …\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nShow one tab as maximized?\nCreate a new <code>ViewportBlueprint</code>.\nHashes of all recommended views the viewer has already …\nThe layout of the views\nWhether the viewport layout is determined automatically.\nWhether or not views should be created automatically.\nShow one tab as maximized?\nHashes of all recommended views the viewer has already …\nThe layout of the views\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Configures what range of each timeline is shown …\nIndicator component for the <code>VisibleTimeRanges</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VisibleTimeRanges</code>.\nRetrieves the time range for a given timeline.\nThe time ranges to show for each timeline unless specified …\nSets the time range for a given timeline.\nThe total number of components in the archetype: 1 …\n<strong>Archetype</strong>: Controls the visual bounds of a 2D view.\nIndicator component for the <code>VisualBounds2D</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>VisualBounds2D</code>.\nControls the visible range of a 2D view.\n<strong>Component</strong>: The active tab in a tabbed container.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\n<strong>Component</strong>: Whether the viewport layout is determined …\n<strong>Component</strong>: Whether or not views should be created …\n<strong>Component</strong>: The type of the background in a view.\nVisible, but as small as possible on its shorter axis.\n<strong>Component</strong>: The layout share of a column in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\n<strong>Component</strong>: One of four 2D corners, typically used to align …\n<strong>Component</strong>: Whether a procedure is enabled.\nFully expanded.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\n<strong>Component</strong>: Configuration for the filter is not null …\n<strong>Component</strong>: The target distance between two nodes.\n<strong>Component</strong>: Specifies how often this force should be …\n<strong>Component</strong>: The strength of a given force.\nA bright gradient.\nA dark gradient.\nOrganize children in a grid layout\n<strong>Component</strong>: How many columns a grid container should have.\n<strong>Component</strong>: Space between grid lines of one line to the …\nCompletely hidden.\nOrder the children left to right\n<strong>Component</strong>: All the contents in the container.\n<strong>Component</strong>: Whether the entity can be interacted with.\nLeft bottom corner.\nLeft top corner.\n<strong>Component</strong>: Indicate whether the range should be locked …\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<strong>Component</strong>: Distance to the near clip plane used for …\n<code>OpenStreetMap</code> is the default map provider.\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Tri-state for panel controls.\n<strong>Component</strong>: An individual query expression used to filter a …\nRight bottom corner.\nRight top corner.\n<strong>Component</strong>: The container that sits at the root of a …\n<strong>Component</strong>: The layout share of a row in the container.\n<strong>Component</strong>: Describe a component column to be selected in …\nSimple uniform color.\nPut children in separate tabs\n<strong>Component</strong>: Show a slider for the index of some dimension …\n<strong>Component</strong>: A timeline identified by its name.\nOrder the children top to bottom\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\n<strong>Component</strong>: Determines whether an image or texture should …\n<strong>Component</strong>: Whether a view is maximized.\n<strong>Component</strong>: The origin of a view.\n<strong>Component</strong>: Hash of a viewer recommendation.\n<strong>Component</strong>: Whether the container, view, entity or instance …\n<strong>Component</strong>: The range of values on a given timeline that …\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\n<strong>Component</strong>: Override the visualizers for an entity.\n<strong>Component</strong>: A zoom level determines how much of the world …\n<strong>Component</strong>: The active tab in a tabbed container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether empty cells in a dataframe should be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the viewport layout is determined …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether or not views should be created …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The type of the background in a view.\nA bright gradient.\nA dark gradient.\nSimple uniform color.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The layout share of a column in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Describe a component column to be selected in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\n<strong>Component</strong>: The kind of a blueprint container (tabs, grid, …\nOrganize children in a grid layout\nOrder the children left to right\nPut children in separate tabs\nOrder the children top to bottom\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: One of four 2D corners, typically used to align …\nLeft bottom corner.\nLeft top corner.\nRight bottom corner.\nRight top corner.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether a procedure is enabled.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Configuration for a filter-by-range feature of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new range filter with the provided time …\n<strong>Component</strong>: Configuration for the filter is not null …\nIs the filter active?\nComponent name of the filter column.\nEntity path of the filter column.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Self</code>.\n<strong>Component</strong>: The target distance between two nodes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Specifies how often this force should be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The strength of a given force.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: How many columns a grid container should have.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Space between grid lines of one line to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: All the contents in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the entity can be interacted with.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Indicate whether the range should be locked …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Name of the map provider to be used in Map …\nMapbox Dark is a dark-themed map designed by Mapbox.\nMapbox Satellite is a satellite map designed by Mapbox.\nMapbox Streets is a minimalistic map designed by Mapbox.\n<code>OpenStreetMap</code> is the default map provider.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Distance to the near clip plane used for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVisible, but as small as possible on its shorter axis.\nFully expanded.\nCompletely hidden.\n<strong>Component</strong>: Tri-state for panel controls.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if self is <code>PanelState::Expanded</code>\nReturns <code>true</code> if self is <code>PanelState::Hidden</code>\nSets the panel to <code>Self::Hidden</code> if it is collapsed or …\n<strong>Component</strong>: An individual query expression used to filter a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The container that sits at the root of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The layout share of a row in the container.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Describe a component column to be selected in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Show a slider for the index of some dimension …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TensorDimensionIndexSlider</code> to determine the …\n<strong>Component</strong>: A timeline identified by its name.\nReturns the argument unchanged.\nCreate a <code>Self</code> from a <code>re_log_types::Timeline</code>.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The class identifier of view, e.g. <code>&quot;2D&quot;</code>, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScale the image for the largest possible fit in the view’…\nScale the image for the largest possible fit in the view’…\nNo scaling, pixel size will match the image’s …\n<strong>Component</strong>: Determines whether an image or texture should …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether a view is maximized.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The origin of a view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Hash of a viewer recommendation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Whether the container, view, entity or instance …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The range of values on a given timeline that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Visual bounds in 2D space used for <code>Spatial2DView</code>…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Override the visualizers for an entity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A zoom level determines how much of the world …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: Describe a component column to be selected in …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\n<strong>Datatype</strong>: List of selected columns in a dataframe.\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nThe name of the component.\nThe component columns to include\nThe dimension number.\nEnd of the time range (inclusive).\nThe entity path for this component.\nBeginning of the time range.\nThe time columns to include\n<strong>Datatype</strong>: Describe a component column to be selected in …\nThe name of the component.\nThe entity path for this component.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a <code>Self</code> from an <code>EntityPath</code> and a …\n<strong>Datatype</strong>: Configuration for the filter-by-range feature of …\nEnd of the time range (inclusive).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBeginning of the time range.\n<strong>Datatype</strong>: Configuration for the filter is not null feature …\nWhether the filter by event feature is active.\nThe column used when the filter by event feature is used.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: List of selected columns in a dataframe.\nThe component columns to include\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe time columns to include\n<strong>Datatype</strong>: Defines a slider for the index of some dimension.\nThe dimension number.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A list of strings of text, encoded as UTF-8.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates through the list of strings as Rust <code>str</code> …\n<strong>View</strong>: A bar chart view.\n<strong>View</strong>: A view to display any data in a tabular form.\n<strong>View</strong>: A graph view to display time-variying, directed or …\n<strong>View</strong>: A 2D map view to display geospatial primitives.\n<strong>View</strong>: For viewing spatial 2D data.\n<strong>View</strong>: For viewing spatial 3D data.\n<strong>View</strong>: A view on a tensor of any dimensionality.\n<strong>View</strong>: A view of a single text document, for use with …\n<strong>View</strong>: A view of a text log, for use with …\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nConfiguration for the background map of the map view.\nConfiguration for the background of the view.\nConfiguration for the background of the view.\nTries to move the center of mass of the graph to the …\nResolves collisions between the bounding spheres, …\nAllows to control the interaction between two nodes …\nA force between each pair of nodes that ressembles an …\nSimilar to gravity, this force pulls nodes towards a …\nConfiguration for the 3D line grid.\nConfigures the legend of the plot.\nConfigures the legend of the plot.\nQuery of the dataframe.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures which range on each timeline is shown by this …\nConfigures how the selected slice should fit into the view.\nEverything within these bounds is guaranteed to be visible.\nThe visible parts of the scene, in the coordinate space of …\nConfigures the zoom level of the map view.\n<strong>View</strong>: A bar chart view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the legend of the plot.\n<strong>View</strong>: A view to display any data in a tabular form.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery of the dataframe.\n<strong>View</strong>: A graph view to display time-variying, directed or …\nTries to move the center of mass of the graph to the …\nResolves collisions between the bounding spheres, …\nAllows to control the interaction between two nodes …\nA force between each pair of nodes that ressembles an …\nSimilar to gravity, this force pulls nodes towards a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEverything within these bounds is guaranteed to be visible.\n<strong>View</strong>: A 2D map view to display geospatial primitives.\nConfiguration for the background map of the map view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the zoom level of the map view.\n<strong>View</strong>: For viewing spatial 2D data.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures which range on each timeline is shown by this …\nThe visible parts of the scene, in the coordinate space of …\n<strong>View</strong>: For viewing spatial 3D data.\nConfiguration for the background of the view.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for the 3D line grid.\nConfigures which range on each timeline is shown by this …\n<strong>View</strong>: A view on a tensor of any dimensionality.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures how scalars are mapped to color.\nHow to select the slice of the tensor to show.\nConfigures how the selected slice should fit into the view.\n<strong>View</strong>: A view of a single text document, for use with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>View</strong>: A view of a text log, for use with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>View</strong>: A time series view for scalars over time, for use …\nConfigures the vertical axis of the plot.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfigures the legend of the plot.\nConfigures which range on each timeline is shown by this …\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\n<strong>Component</strong>: The annotation context provides additional …\n<code>*</code>\nAverage all points in the range together.\n<strong>Component</strong>: The length of an axis in local units of the …\n<strong>Component</strong>: A binary blob of data.\nThe transform describes how to transform into the child …\n<code>⏺</code>\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: Configures how a clear operation should behave …\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Component</strong>: Colormap for mapping scalar values within a …\n<code>x</code>\nRasmusgo’s Cyan to Yellow colormap\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\n<code>◆</code>\nThe graph has directed edges.\n<strong>Component</strong>: Spatially disconnect this entity from its …\n<code>▼</code>\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\n<strong>Component</strong>: A path to an entity, usually to reference some …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\n<strong>Component</strong>: How much a primitive fills out the available …\n<strong>Component</strong>: A gamma correction value to be used with a …\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\n<strong>Component</strong>: An edge in a graph connecting two nodes.\n<strong>Component</strong>: A string-based ID representing a node in a …\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nA simple black to white gradient.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\n<strong>Component</strong>: A buffer that is known to store image data.\n<strong>Component</strong>: The metadata describing the contents of a …\n<strong>Component</strong>: The distance from the camera origin to the …\nThe Inferno colormap from Matplotlib.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\n<code>◀</code>\n<strong>Component</strong>: Length, or one-dimensional size.\n<strong>Component</strong>: A line strip in 2D space.\n<strong>Component</strong>: A line strip in 3D space.\nLinearly interpolate the nearest neighbors, creating a …\nThe Magma colormap from Matplotlib.\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nLines are drawn around the parts of the shape which …\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nKeep only the maximum values in the range.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\n<strong>Component</strong>: A display name, typically for an entity or a …\nShow the nearest pixel value.\nNo aggregation.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Camera projection, from image coordinates to …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe Plasma colormap from Matplotlib.\n<code>+</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\n<strong>Component</strong>: A position in 2D space.\n<strong>Component</strong>: A position in 3D space.\n<strong>Component</strong>: The radius of something, e.g. a point.\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\n<code>▶</code>\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\n<strong>Component</strong>: A 3D scale factor.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nThe surface of the shape is filled in with a solid color. …\n<code>◼️</code>\n<strong>Component</strong>: The width of a stroke specified in UI points.\n<strong>Component</strong>: An N-dimensional array of numbers.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\n<strong>Component</strong>: Specifies which dimension to use for height.\n<strong>Component</strong>: Specifies which dimension to use for width.\n<strong>Component</strong>: A 2D texture UV coordinate.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\n<strong>Component</strong>: The severity level of a text log message.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\n<strong>Component</strong>: Specifies relation a spatial transform …\n<strong>Component</strong>: A translation vector in 3D space.\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nGoogle’s Turbo colormap map.\nThe graph has undirected edges.\n<code>▲</code>\n<strong>Component</strong>: Range of expected or valid values, specifying a …\n<strong>Component</strong>: A vector in 2D space.\n<strong>Component</strong>: A vector in 3D space.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\n<strong>Component</strong>: How we interpret the coordinate system of an …\nThe Viridis colormap from Matplotlib\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Policy for aggregation of multiple scalar plot …\nAverage all points in the range together.\nKeep only the maximum values in the range.\nKeep only the minimum values in the range.\nKeep both the minimum and maximum values in the range.\nFind both the minimum and maximum values in the range, …\nNo aggregation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A color multiplier, usually applied to a whole …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The annotation context provides additional …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The length of an axis in local units of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A binary blob of data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlack and opaque.\n<strong>Component</strong>: An RGBA color with unmultiplied/separate alpha, …\nFully transparent (invisible).\nWhite and opaque.\nReturns the argument unchanged.\nFrom gamma-space sRGB values.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nCalls <code>U::from(self)</code>.\nCreate a new color.\n<code>[r, g, b, a]</code>\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\n<strong>Component</strong>: Colormap for mapping scalar values within a …\nRasmusgo’s Cyan to Yellow colormap\nA simple black to white gradient.\nThe Inferno colormap from Matplotlib.\nThe Magma colormap from Matplotlib.\nThe Plasma colormap from Matplotlib.\nGoogle’s Turbo colormap map.\nThe Viridis colormap from Matplotlib\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The world-&gt;depth map scaling factor.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Spatially disconnect this entity from its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraw order used for 2D boxes if no draw order was …\nDraw order used for depth image when they’re not shown …\nDraw order used for images if no draw order was specified.\nDraw order used for 2D lines if no draw order was …\nDraw order used for 2D points if no draw order was …\nDraw order used for segmentation images if no draw order …\n<strong>Component</strong>: Draw order of 2D elements. Higher values are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A path to an entity, usually to reference some …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMany lines are drawn to represent the surface of the shape …\n<strong>Component</strong>: How a geometric shape is drawn and colored.\nLines are drawn around the parts of the shape which …\nThe surface of the shape is filled in with a solid color. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: How much a primitive fills out the available …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A gamma correction value to be used with a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A geospatial line string expressed in EPSG:4326 …\nReturns the argument unchanged.\nCreate a new line string from a list of positions.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: An edge in a graph connecting two nodes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A string-based ID representing a node in a …\nReturns the string slice of the graph node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe graph has directed edges.\n<strong>Component</strong>: Specifies if a graph has directed or undirected …\nThe graph has undirected edges.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Half-size (radius) of a 2D box.\nReturns the maximum of a box with these half-extents and a …\nReturns the min position of a box with these half-extents …\nReturns the argument unchanged.\nHeight of a box using this half-extent.\nCalls <code>U::from(self)</code>.\nCreate a new half-extent from half-width and half-height.\nWidth of a box using this half-extent.\n<strong>Component</strong>: Half-size (radius) of a 3D box.\nReturns the maximum of a box with these half-extents and a …\nReturns the min position of a box with these half-extents …\nHeight of a box using this half-extent.\nReturns the argument unchanged.\nHeight of a box using this half-extent.\nCalls <code>U::from(self)</code>.\nCreate a new half-extent from half-width, half-height, …\nCreate a new half-extent with all the same sizes (a …\nWidth of a box using this half-extent.\n<strong>Component</strong>: A buffer that is known to store image data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The metadata describing the contents of a …\nThe color model represented by this image format.\nThe datatype represented by this image format.\nCreate a new depth image format with the given resolution …\nReturns the argument unchanged.\nFrom a speicifc pixel format.\nDetermine if the image format has an alpha channel.\nCalls <code>U::from(self)</code>.\nDetermine if the image format represents floating point …\nNumber of bytes for the whole image.\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nCreate a new segmentation image format with the given …\n<strong>Component</strong>: The distance from the camera origin to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A geospatial position expressed in EPSG:4326 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe latitude.\nThe longitude.\nCreate a new position.\n<strong>Component</strong>: Length, or one-dimensional size.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A line strip in 2D space.\nReturns the argument unchanged.\nCreate a new line strip from a list of positions.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A line strip in 3D space.\nReturns the argument unchanged.\nConstruct a line strip from a sequence of points.\nCalls <code>U::from(self)</code>.\nLinearly interpolate the nearest neighbors, creating a …\n<strong>Component</strong>: Filter used when magnifying an image/texture …\nShow the nearest pixel value.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>*</code>\n<code>⏺</code>\n<code>x</code>\n<code>◆</code>\n<code>▼</code>\n<code>◀</code>\n<strong>Component</strong>: The visual appearance of a point in e.g. a 2D …\n<code>+</code>\n<code>▶</code>\n<code>◼️</code>\n<code>▲</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Radius of a marker of a point in e.g. a 2D …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBinary <code>glTF</code>.\n<code>glTF</code>.\nJPEG image: <code>image/jpeg</code>.\nMarkdown.\nMP4 video: <code>video/mp4</code>.\n<strong>Component</strong>: A standardized media type (RFC2046, formerly …\nWavefront .obj.\nPNG image: <code>image/png</code>.\nStereolithography Model <code>stl</code>: <code>model/stl</code>.\nPlain text.\nReturns the media type as a string slice, e.g. “…\nReturn e.g. “jpg” for <code>image/jpeg</code>.\nReturns the argument unchanged.\n<code>model/gltf-binary</code>\n<code>model/gltf+json</code>\nTries to guess the media type of the file at <code>path</code> based on …\nTries to guess the media type of the file at <code>path</code> based on …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is an image media type.\nReturns <code>true</code> if this is an video media type.\n<code>image/jpeg</code>\n<code>text/markdown</code>\n<code>video/mp4</code>\n<code>model/obj</code>\nReturns <code>opt</code> if not <code>None</code>, otherwise tries to guess a media …\nReturns <code>opt</code> if not <code>None</code>, otherwise tries to guess a media …\n<code>text/plain</code>\n<code>image/png</code>\n<code>model/stl</code>\n<strong>Component</strong>: A display name, typically for an entity or a …\nReturns the name as a string slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Degree of transparency ranging from 0.0 (fully …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Camera projection, from image coordinates to …\nX &amp; Y focal length in pixels.\nReturns the argument unchanged.\nCreate a new pinhole projection matrix from a focal length …\nCalls <code>U::from(self)</code>.\nPrincipal point of the pinhole camera, i.e. the …\nProject camera-space coordinates into pixel coordinates, …\nGiven pixel coordinates and a world-space depth, return a …\nPrincipal point of the pinhole camera, i.e. the …\n<strong>Component</strong>: An infinite 3D plane represented by a unit …\nThe X^Y plane with normal = +Z.\nThe Y^Z plane with normal = +X.\nThe Z^X plane with normal = +Y.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new plane from a normal and distance.\nThe identity rotation, representing no rotation.\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new rotation from an axis and an angle.\nThe identity rotation, representing no rotation.\nA rotation that represents an invalid transform.\n<strong>Component</strong>: A 3D rotation expressed as a quaternion that …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 3D scale factor that doesn’t propagate in …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScale the same amount along all axis.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix that doesn’…\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A translation vector in 3D space that doesn’t …\nNo translation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new translation.\nThe x coordinate, i.e. index 0\nThe y coordinate, i.e. index 1\nThe z coordinate, i.e. index 2\n<strong>Component</strong>: A position in 2D space.\nThe origin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new position.\nThe x coordinate, i.e. index 0\nThe y coordinate, i.e. index 1\n<strong>Component</strong>: A position in 3D space.\nThe origin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new position.\nThe x coordinate, i.e. index 0\nThe y coordinate, i.e. index 1\nThe z coordinate, i.e. index 2\nRadius of length 1 in ui points.\n<strong>Component</strong>: The radius of something, e.g. a point.\nZero radius.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new radius in scene units.\nCreates a new radius in ui points.\nIf this radius is in scene units, returns the radius in …\nIf this radius is in ui points, returns the radius in ui …\n<strong>Component</strong>: A 1D range, specifying a lower and upper bound.\nThe end of the range.\nThe end of the range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new range.\nThe start of the range.\nThe start of the range.\n<strong>Component</strong>: A recording URI (Uniform Resource Identifier).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn the Recording URI contained in this component.\n<strong>Component</strong>: Pixel resolution width &amp; height, e.g. of a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe identity rotation, representing no rotation.\n<strong>Component</strong>: 3D rotation represented by a rotation around a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new rotation from an axis and an angle.\nThe identity rotation, representing no rotation.\nA rotation that represents an invalid transform.\n<strong>Component</strong>: A 3D rotation expressed as a quaternion.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A scalar value, encoded as a 64-bit floating …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 3D scale factor.\nScale individually along each axis.\nScale the same amount along all axis.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nScale the same amount along all axis.\n<strong>Component</strong>: Whether the entity’s <code>components::Text</code> label …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: The width of a stroke specified in UI points.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: An N-dimensional array of numbers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Specifies a concrete index on a tensor …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>TensorDimensionIndexSelection</code> from the given …\n<strong>Component</strong>: Specifies which dimension to use for height.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Specifies which dimension to use for width.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe corner opposite the origin.\n<strong>Component</strong>: A 2D texture UV coordinate.\nThe origin.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new texture coordinate.\nThe first coordinate, i.e. index 0.\nThe second coordinate, i.e. index 1.\n<strong>Component</strong>: A string of text, e.g. for labels and text …\nThe text as a string slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDesignates catastrophic failures.\nDesignates lower priority information.\nDesignates very serious errors.\nDesignates useful information.\nDesignates very low priority, often extremely verbose, …\n<strong>Component</strong>: The severity level of a text log message.\nDesignates hazardous situations.\nThe log level as a string slice, e.g. “INFO”.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A 3x3 transformation matrix Matrix.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe transform describes how to transform into the child …\nThe transform describes how to transform into the parent …\n<strong>Component</strong>: Specifies relation a spatial transform …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: A translation vector in 3D space.\nNo translation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new translation.\nThe x coordinate, i.e. index 0\nThe y coordinate, i.e. index 1\nThe z coordinate, i.e. index 2\n<strong>Component</strong>: The three indices of a triangle in a triangle …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Range of expected or valid values, specifying a …\nThe end of the range.\nThe end of the range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new range.\nThe start of the range.\nThe start of the range.\n<code>[1, 1]</code>, i.e. the multiplicative identity.\n<strong>Component</strong>: A vector in 2D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>[1, 1, 1]</code>, i.e. the multiplicative identity.\n<strong>Component</strong>: A vector in 3D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Component</strong>: Timestamp inside a <code>archetypes::AssetVideo</code>.\nReturns the argument unchanged.\nCreate new timestamp from milliseconds since video start.\nCreate new timestamp from nanoseconds since video start.\nCreate new timestamp from seconds since video start.\nCalls <code>U::from(self)</code>.\nX=Back, Y=Down, Z=Left\nX=Back, Y=Down, Z=Right\nX=Back, Y=Left, Z=Down\nX=Back, Y=Left, Z=Up\nX=Back, Y=Right, Z=Down\nX=Back, Y=Right, Z=Up\nX=Back, Y=Up, Z=Left\nX=Back, Y=Up, Z=Right\nX=Down, Y=Back, Z=Left\nX=Down, Y=Back, Z=Right\nX=Down, Y=Forward, Z=Left\nX=Down, Y=Forward, Z=Right\nX=Down, Y=Left, Z=Back\nX=Down, Y=Left, Z=Forward\nX=Down, Y=Right, Z=Back\nX=Down, Y=Right, Z=Forward\nX=Forward, Y=Down, Z=Left\nX=Forward, Y=Down, Z=Right\nX=Forward, Y=Left, Z=Down\nX=Forward, Y=Left, Z=Up\nX=Forward, Y=Right, Z=Down\nX=Forward, Y=Right, Z=Up\nX=Forward, Y=Up, Z=Left\nX=Forward, Y=Up, Z=Right\nX=Left, Y=Back, Z=Down\nX=Left, Y=Back, Z=Up\nX=Left, Y=Down, Z=Back\nX=Left, Y=Down, Z=Forward\nX=Down, Y=Right, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Right, Y=Down, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Back, Z=Up\nX=Left, Y=Forward, Z=Down\nX=Left, Y=Forward, Z=Up\nX=Left, Y=Up, Z=Back\nX=Left, Y=Up, Z=Forward\nX=Right, Y=Back, Z=Down\nX=Right, Y=Back, Z=Up\nX=Right, Y=Down, Z=Back\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Forward, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Down, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\nX=Right, Y=Down, Z=Forward\nX=Right, Y=Up, Z=Back\nX=Right, Y=Back, Z=Down\nX=Right, Y=Forward, Z=Up\nX=Right, Y=Up, Z=Back\nX=Right, Y=Up, Z=Forward\nX=Up, Y=Back, Z=Left\nX=Up, Y=Back, Z=Right\nX=Up, Y=Forward, Z=Left\nX=Up, Y=Forward, Z=Right\nX=Up, Y=Left, Z=Back\nX=Up, Y=Left, Z=Forward\nX=Up, Y=Right, Z=Back\nX=Up, Y=Right, Z=Forward\n<strong>Component</strong>: How we interpret the coordinate system of an …\nA long description of the coordinate system, explicitly …\nDescribe using three letters, e.g. <code>RDF</code> for X=Right, …\nThe forward-axis.\nReturns the argument unchanged.\nReturns a matrix that transforms from another coordinate …\nReturns a matrix that transforms from RDF to this …\nReturns a matrix that transforms from RUB to this …\nReturns a quaternion that rotates from RUB to this …\nChooses a coordinate system based on just an up-axis.\nReturns whether or not this coordinate system is left or …\nCalls <code>U::from(self)</code>.\nConstruct a new <code>ViewCoordinates</code> from an array of <code>ViewDir</code>s.\nThe right-axis.\nReturns an error if this does not span all three …\nReturns a matrix that transforms this coordinate system to …\nReturns a matrix that transforms this coordinate system to …\nThe up-axis.\nA range of zero length exactly at the time cursor.\nPut the boundary at the current time cursor.\nBoundary is an absolute value.\n<strong>Datatype</strong>: Angle in radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: A binary blob of data.\n<strong>Datatype</strong>: A single boolean.\n<strong>Datatype</strong>: The innermost datatype of an image.\n<strong>Datatype</strong>: The description of a semantic Class.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: Specified what color components are present in …\nBoundary is a value relative to the time cursor.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\nThe range encompassing all time, from -∞ to +∞.\n<strong>Datatype</strong>: A path to an entity in the <code>ChunkStore</code>.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n64bit IEEE-754 floating point, also known as <code>double</code>.\n<strong>Datatype</strong>: A single-precision 32-bit IEEE 754 floating …\n<strong>Datatype</strong>: A double-precision 64-bit IEEE 754 floating …\n16-bit signed integer.\n16bit signed integer.\n32-bit signed integer.\n32bit signed integer.\n64-bit signed integer.\n64bit signed integer.\n8-bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe boundary extends to infinity.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nGrayscale luminance intencity/brightness/value, sometimes …\n<strong>Datatype</strong>: A 3x3 Matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nRed, Green, Blue\nRed, Green, Blue, Alpha\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\n<strong>Datatype</strong>: A single dimension within a multi-dimensional …\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\n<strong>Datatype</strong>: A 64-bit number describing either nanoseconds OR …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\n<strong>Datatype</strong>: Left or right boundary of a time range.\n16-bit unsigned integer.\n16bit unsigned integer.\n32-bit unsigned integer.\n32bit unsigned integer.\n64-bit unsigned integer.\n64bit unsigned integer.\n8-bit unsigned integer.\n8bit unsigned integer.\n<strong>Datatype</strong>: A 16bit unsigned integer.\n<strong>Datatype</strong>: A 32bit unsigned integer.\n<strong>Datatype</strong>: A 64bit unsigned integer.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\n<strong>Datatype</strong>: A uint32 vector in 3D space.\n<strong>Datatype</strong>: A uint vector in 4D space.\n<strong>Datatype</strong>: A string of text, encoded as UTF-8.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\n<strong>Datatype</strong>: A 16-byte UUID.\n<strong>Datatype</strong>: A vector in 2D space.\n<strong>Datatype</strong>: A vector in 3D space.\n<strong>Datatype</strong>: A vector in 4D space.\n<strong>Datatype</strong>: Presentation timestamp within a …\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\n<strong>Datatype</strong>: Visible time range bounds for a specific …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nHow much to rotate around the axis.\nAxis to rotate around.\nThe content/data.\nThe raw bytes representing the UUID.\nThe data type of each channel (e.g. the red channel) of …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nThe color that will be applied to the annotated entity.\nL, RGB, RGBA, …\nThe dimension number to select.\nThe dimension number to select.\nHigh time boundary for sequence timeline.\nReturns the correct time assuming this boundary is an end …\nThe first string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the image in pixels.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nThe index along the dimension to use.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInvert the direction of the dimension.\nThe first point of the pair.\nThe second point of the pair.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\nThe label that will be shown in the UI.\nThe name of this dimension, e.g. “width”, “height”…\nUsed mainly for chroma downsampled formats and differing …\nAngle in radians. One turn is equal to 2π (or τ) radians.\nTime range to use for this timeline.\nThe second string.\nThe shape of the tensor, including optional names for each …\nThe length of this dimension.\nLow time boundary for sequence timeline.\nReturns the time assuming this boundary is a start …\nName of the timeline this applies to.\nThe width of the image in pixels.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\n<strong>Datatype</strong>: Angle in radians.\nCreate a new angle from degrees.\nCreate a new angle from radians.\nZero angle, often used for representing no rotation.\nAngle in degrees (converts from radians).\nReturns the argument unchanged.\nCreate a new angle from degrees.\nCreate a new angle from radians.\nCalls <code>U::from(self)</code>.\nAngle in radians.\nAngle in radians. One turn is equal to 2π (or τ) radians.\n<strong>Datatype</strong>: Annotation info annotating a class id or …\nThe color that will be applied to the annotated entity.\nReturns the argument unchanged.\n<code>datatypes::ClassId</code> or <code>datatypes::KeypointId</code> to which this …\nCalls <code>U::from(self)</code>.\nThe label that will be shown in the UI.\n<strong>Datatype</strong>: A binary blob of data.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Blob</code> that is a slice of this buffer starting …\n<strong>Datatype</strong>: The innermost datatype of an image.\n16-bit IEEE-754 floating point, also known as <code>half</code>.\n32-bit IEEE-754 floating point, also known as <code>float</code> or …\n64-bit IEEE-754 floating point, also known as <code>double</code>.\n16-bit signed integer.\n32-bit signed integer.\n64-bit signed integer.\n8-bit signed integer.\n16-bit unsigned integer.\n32-bit unsigned integer.\n64-bit unsigned integer.\n8-bit unsigned integer.\nNumber of bits used to represent this element type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\n<strong>Datatype</strong>: The description of a semantic Class.\nReturns the argument unchanged.\nThe <code>datatypes::AnnotationInfo</code> for the class.\nCalls <code>U::from(self)</code>.\nThe <code>datatypes::AnnotationInfo</code> for all of the keypoints.\nThe connections between keypoints.\n<strong>Datatype</strong>: A helper type for mapping <code>datatypes::ClassId</code>s to …\nThe value: class name, color, etc.\nThe key: the <code>components::ClassId</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBlue, Green, Red\nBlue, Green, Red, Alpha\n<strong>Datatype</strong>: Specified what color components are present in …\nGrayscale luminance intencity/brightness/value, sometimes …\nRed, Green, Blue\nRed, Green, Blue, Alpha\nReturns the argument unchanged.\nDo we have an alpha channel?\nCalls <code>U::from(self)</code>.\n1 for grayscale, 3 for RGB, etc.\n<strong>Datatype</strong>: A double-precision vector in 2D space.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\n<strong>Datatype</strong>: The metadata describing the contents of a …\nThe data type of each channel (e.g. the red channel) of …\nThe color model represented by this image format.\nL, RGB, RGBA, …\nThe datatype represented by this image format.\nCreate a new depth image format with the given resolution …\nReturns the argument unchanged.\nFrom a speicifc pixel format.\nDetermine if the image format has an alpha channel.\nThe height of the image in pixels.\nCalls <code>U::from(self)</code>.\nDetermine if the image format represents floating point …\nNumber of bytes for the whole image.\nUsed mainly for chroma downsampled formats and differing …\nCreate a new rgb image format with 8 bit per channel with …\nCreate a new rgba image format with 8 bit per channel with …\nCreate a new segmentation image format with the given …\nThe width of the image in pixels.\n<strong>Datatype</strong>: A 16-bit ID representing a type of semantic …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: A connection between two <code>datatypes::KeypointId</code>s.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe first point of the pair.\nThe second point of the pair.\nCreate a vector of <code>KeypointPair</code> from an array of tuples.\nThe identity matrix.\n<strong>Datatype</strong>: A 3x3 Matrix.\nReturns the matrix column for the given <code>index</code>.\nReturns the argument unchanged.\nGet a specific element.\nColumn-major order matrix coefficients.\nCalls <code>U::from(self)</code>.\nSet a specific element.\nThe identity matrix.\n<strong>Datatype</strong>: A 4x4 Matrix.\nReturns the matrix column for the given <code>index</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>NV12</code> (aka <code>Y_UV12</code>) is a YUV 4:2:0 chroma downsampled form …\n<strong>Datatype</strong>: Specifieds a particular format of an …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\nMonochrome Y plane only, essentially a YUV 4:0:0 planar …\n<code>YUY2</code> (aka ‘YUYV’, ‘YUYV16’ or ‘NV21’), is a …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V12</code> is a YUV 4:2:0 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V16</code> is a YUV 4:2:2 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\n<code>Y_U_V24</code> is a YUV 4:4:4 fully planar YUV format without …\nThe color model derived from this pixel format.\nThe datatype that this decodes into.\nRandom-access decoding of a specific pixel of an image.\nRandom-access decoding of a specific pixel of an image.\nReturns the argument unchanged.\nDo we have an alpha channel?\nCalls <code>U::from(self)</code>.\nIs this pixel format floating point?\nReturns true if the format is a YUV format using limited …\nNumber of bytes needed to represent an image of the given …\nYuv matrix coefficients used by this format.\n<strong>Datatype</strong>: An infinite 3D plane represented by a unit …\nThe X^Y plane with normal = +Z.\nThe Y^Z plane with normal = +X.\nThe Z^X plane with normal = +Y.\nThe distance of the plane from the origin (in multiples of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new plane from a normal and distance.\nThe normal of the plane (unnormalized if the plane is …\nThe identity quaternion representing no rotation.\nA quaternion that represents an invalid transform.\n<strong>Datatype</strong>: A Quaternion represented by 4 real numbers.\nReturns the argument unchanged.\nFrom WXYZ.\nFrom XYZW.\nCalls <code>U::from(self)</code>.\nThe components of the quaternion in X,Y,Z,W order.\nRange that expands from negative infinity to positive …\n<strong>Datatype</strong>: A 1D range, specifying a lower and upper bound.\nAbsolute length of the range.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRange that expands from negative infinity to positive …\n<strong>Datatype</strong>: An Axis-Aligned Bounding Box in 2D space, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe range of the X-axis (usually left and right bounds).\nThe range of the Y-axis (usually top and bottom bounds).\nBlack and opaque.\n<strong>Datatype</strong>: An RGBA color with unmultiplied/separate alpha, …\nFully transparent (invisible).\nWhite and opaque.\nReturns the argument unchanged.\nFrom linear-space sRGB values in 0-1 range, with a …\nFrom gamma-space sRGB values.\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nFrom gamma-space sRGB values, with a separate/unmultiplied …\nCalls <code>U::from(self)</code>.\n<code>[r, g, b, a]</code>\nMost significant byte is <code>r</code>, least significant byte is <code>a</code>.\nThe identity rotation, representing no rotation.\nA rotation that represents an invalid transform.\n<strong>Datatype</strong>: 3D rotation represented by a rotation around a …\nHow much to rotate around the axis.\nAxis to rotate around.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new rotation from an axis and an angle.\n16bit IEEE-754 floating point, also known as <code>half</code>.\n32bit IEEE-754 floating point, also known as <code>float</code> or …\n64bit IEEE-754 floating point, also known as <code>double</code>.\n16bit signed integer.\n32bit signed integer.\n64bit signed integer.\n8bit signed integer.\n<strong>Datatype</strong>: The underlying storage for <code>archetypes::Tensor</code>.\n16bit unsigned integer.\n32bit unsigned integer.\n64bit unsigned integer.\n8bit unsigned integer.\nThe underlying data type of the buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIs this buffer empty?\nThe size of the buffer in bytes.\n<strong>Datatype</strong>: An N-dimensional array of numbers.\nThe content/data.\nThe datatype of the tensor.\nReturns the argument unchanged.\nConstruct a tensor from <code>image::DynamicImage</code>.\nConstruct a tensor from something that can be turned into …\nConstruct a tensor from the contents of an image file.\nConstruct a tensor from the contents of an image file on …\nGet the value of the element at the given index.\nCalls <code>U::from(self)</code>.\nReturns true if either all dimensions have size 1 or only …\nCreate a new tensor.\nThe number of dimensions of the tensor.\nThe shape of the tensor, including optional dimension …\nThe shape of the tensor, including optional names for each …\nReturns the shape of the tensor with all leading &amp; …\nThe size of the tensor data, in bytes.\n<strong>Datatype</strong>: A single dimension within a multi-dimensional …\nCreate a new dimension with a given size, and the name “…\nReturns the argument unchanged.\nCreate a new dimension with a given size, and the name “…\nCalls <code>U::from(self)</code>.\nThe name of this dimension, e.g. “width”, “height”…\nCreate a named dimension.\nThe length of this dimension.\nCreate an unnamed dimension.\nCreate a new dimension with a given size, and the name “…\n<strong>Datatype</strong>: Indexing a specific tensor dimension.\nThe dimension number to select.\nReturns the argument unchanged.\nThe index along the dimension to use.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: Selection of a single tensor dimension.\nThe dimension number to select.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvert the direction of the dimension.\n<strong>Datatype</strong>: Stores a tuple of UTF-8 strings.\nThe first string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe second string.\n<strong>Datatype</strong>: A 16-byte UUID.\nThe raw bytes representing the UUID.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A uint32 vector in 2D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nAssign a new x\nAssign a new y\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\n<strong>Datatype</strong>: A uint32 vector in 3D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\nThe unit vector <code>[1, 1, 1]</code>, i.e. the multiplicative …\n<strong>Datatype</strong>: A uint vector in 4D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe w-coordinate, i.e. index 3.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\nThe unit vector <code>[1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A vector in 2D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\n<code>[1, 1, 1]</code>, i.e. the multiplicative identity.\n<strong>Datatype</strong>: A vector in 3D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\n<strong>Datatype</strong>: A vector in 4D space.\nThe zero vector, i.e. the additive identity.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new vector.\nThe w-coordinate, i.e. index 3.\nThe x-coordinate, i.e. index 0.\nThe y-coordinate, i.e. index 1.\nThe z-coordinate, i.e. index 2.\n<strong>Datatype</strong>: Presentation timestamp within a …\nReturns the timestamp as nanoseconds.\nReturns the timestamp as seconds.\nReturns the argument unchanged.\nCreate new timestamp from nanoseconds since video start.\nCalls <code>U::from(self)</code>.\n<strong>Datatype</strong>: How we interpret the coordinate system of an …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe tensor did not have the right shape for an image (e.g. …\nBT.601 (aka. SDTV, aka. Rec.601)\nBT.709 (aka. HDTV, aka. Rec.709)\nThe <code>ChannelDatatype</code> for this type.\nHappens if you try to cast <code>NV12</code> or <code>YUY2</code> to a depth image …\nA normal grayscale or color image (<code>crate::archetypes::Image</code>…\nA depth map (<code>crate::archetypes::DepthImage</code>).\ne.g. failed to decode a JPEG file.\nTypes that implement this can be used as image channel …\nError returned when trying to interpret a tensor as an …\nErrors when converting images from the <code>image</code> crate to an …\nFailure to convert the loaded image to a …\nThe kind of image data, either color, segmentation, or …\nErrors when loading image files.\ne.g. failed to find a file on disk.\nA segmentation image (<code>crate::archetypes::SegmentationImage</code>…\nCould not convert source to <code>TensorData</code>.\nFailed to read the MIME type from inspecting the image …\nUnknown color type from the image crate.\nThe encountered MIME type is not supported for decoding …\nYuv matrix coefficients that determine how a YUV image is …\nConverts it to what is useful for the image API.\nReturns the indices of an appropriate set of dimensions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns sRGB from YUV color.\nImplements <code>From&lt;Self&gt;</code> and <code>From&lt;&#39;a Self&gt;</code> for <code>Cow&lt;Self&gt;</code>.\nAdditional information about an archetype’s field.\nUtility struct containing all archetype meta information.\nRuntime reflection about archetypes.\nInformation about a Rerun <code>component</code>, generated by codegen.\nRuntime reflection about components.\nA trait for code-generated enums.\nRuntime reflection about components and archetypes.\nFind an <code>ArchetypeReflection</code> based on its short name.\nThe type of the field (it’s always a component).\nCustom placeholder value, used when not fallback was …\nDatatype of the component.\nThe name of the field in human case.\nThe name of the field in human case.\nMarkdown docstring for the given enum variant.\nMarkdown docstring for the component.\nMarkdown docstring for the field (not for the component …\nAll the component fields of the archetype, in the order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates reflection about all known components.\nComputes a placeholder for a given arrow datatype.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a required component?\nThe name of the field (i.e. same as …\nIterate over this archetype’s required fields.\nDoes this have a particular scope?\nAll variants, in the order they appear in the enum.\nThe views that this archetype can be added to.\nGenerates reflection about all known archetypes.\nGenerates reflection about all known components.\nGenerates reflection about all known components.\nRotation defined with an axis and an angle.\nThe identity rotation, expressed as a quaternion\nRotation defined by a quaternion.\nA 3D rotation.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n16-bit floating point number.\n16-bit floating point number.\n32-bit floating point number.\n32-bit floating point number.\n64-bit floating point number.\n64-bit floating point number.\nSigned 16 bit integer.\nSigned 16 bit integer.\nSigned 32 bit integer.\nSigned 32 bit integer.\nSigned 64 bit integer.\nSigned 64 bit integer.\nSigned 8 bit integer.\nSigned 8 bit integer.\nErrors when trying to cast <code>TensorData</code> to an <code>ndarray</code>\nThe data types supported by a <code>crate::datatypes::TensorData</code>.\nThe data that can be stored in a …\nErrors when loading <code>TensorData</code> from the <code>image</code> crate.\nUnsigned 16 bit integer.\nUnsigned 16 bit integer.\nUnsigned 32 bit integer.\nUnsigned 32 bit integer.\nUnsigned 64 bit integer.\nUnsigned 64 bit integer.\nUnsigned 8 bit integer.\nUnsigned 8 bit integer.\nGet the value as a 64-bit floating point number.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this datatype a floating point number?\nIs this datatype an integer?\nWhat is the maximum finite value representable by this …\nWhat is the minimum finite value representable by this …\nNumber of bytes used by the type\nConvert the value to a <code>u16</code>, but only if it can be …\nLarge struct used for benchmarking.\nBuilds len instances of <code>LargeStruct</code>\nIndicator component for the <code>AffixFuzzer1</code> …\nThe total number of components in the archetype: 22 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer1</code>.\nIndicator component for the <code>AffixFuzzer2</code> …\nThe total number of components in the archetype: 19 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer2</code>.\nIndicator component for the <code>AffixFuzzer3</code> …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>AffixFuzzer3</code>.\nIndicator component for the <code>AffixFuzzer4</code> …\nThe total number of components in the archetype: 0 …\nReturns the argument unchanged.")